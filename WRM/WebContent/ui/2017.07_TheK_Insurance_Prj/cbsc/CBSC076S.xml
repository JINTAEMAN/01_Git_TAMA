<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/cm/css/all.css" type="text/css"?>
<?xml-stylesheet href="/cm/css/new.css" type="text/css"?>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare"
	xmlns:xf="http://www.w3.org/2002/xforms">
	<head>
		<!-- 
	       ###################################################
	        파일명 : CBSC076S.xml
	        프로그램명 : 연금가입설계 1번 화면
	        설 명 :  연금가입설계 화면
	        작성자 : 이경일
	        작성일 : 2017.10.23
	
	        수정일자            수정자                  수정내용
	       ==================================================
	       2017.10.23       이경일       최초작성
	       ###################################################
	    -->
		<w2:type>DEFAULT</w2:type>
		<w2:buildDate />
		<xf:model>
			<xf:instance>
				<data xmlns="" />
			</xf:instance>
			<w2:dataCollection baseNode="map">

				<w2:dataList baseNode="list" id="Ds_Grade"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sCd"
							name="sCd">
						</w2:column>
						<w2:column dataType="text" id="sHnglCdName"
							name="sHnglCdName">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="ds_plan"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="code"
							name="code">
						</w2:column>
						<w2:column dataType="text" id="name"
							name="name">
						</w2:column>
					</w2:columnInfo>
					<w2:data use="true">
						<w2:row>
							<code><![CDATA[01]]></code>
							<name><![CDATA[플랜A]]></name>
						</w2:row>
						<w2:row>
							<code><![CDATA[02]]></code>
							<name><![CDATA[플랜B]]></name>
						</w2:row>
						<w2:row>
							<code><![CDATA[03]]></code>
							<name><![CDATA[플랜C]]></name>
						</w2:row>
					</w2:data>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Single"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sStndDate"
							name="sStndDate">
						</w2:column>
						<w2:column dataType="text" id="sResno"
							name="sResno">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Dsws_BaseSlct"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_InPayTerm"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="chk"
							name="chk">
						</w2:column>
						<w2:column dataType="text" id="sBascSlctFlagCd"
							name="sBascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="number" id="nTrtyInsAmt"
							name="nTrtyInsAmt">
						</w2:column>
						<w2:column dataType="number" id="nSelfChamt"
							name="nSelfChamt">
						</w2:column>
						<w2:column dataType="number" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="number" id="nRiskPrem"
							name="nRiskPrem">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlAvaYn"
							name="sAutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlCyclCd"
							name="sAutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="number" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_LTIDA00"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='LTIDA00']/LTIDA00">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_BosangTrty"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_LTIEA10"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sGroupCrAdmNo"
							name="sGroupCrAdmNo">
						</w2:column>
						<w2:column dataType="text" id="sRpstName"
							name="sRpstName">
						</w2:column>
						<w2:column dataType="text" id="sRpstCd"
							name="sRpstCd">
						</w2:column>
						<w2:column dataType="text" id="sGroupName"
							name="sGroupName">
						</w2:column>
						<w2:column dataType="text" id="nFrstPsct"
							name="nFrstPsct">
						</w2:column>
						<w2:column dataType="text" id="nGroupDcrt"
							name="nGroupDcrt">
						</w2:column>
					</w2:columnInfo>
					<w2:data use="true">
						<w2:row>
							<nFrstPsct></nFrstPsct>
							<nGroupDcrt></nGroupDcrt>
							<sGroupCrAdmNo></sGroupCrAdmNo>
							<sGroupName></sGroupName>
							<sRpstCd></sRpstCd>
							<sRpstName></sRpstName>
						</w2:row>
					</w2:data>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_long_mPlr"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sCustNo"
							name="sCustNo">
						</w2:column>
						<w2:column dataType="text" id="sCstId"
							name="sCstId">
						</w2:column>
						<w2:column dataType="text" id="nSeqNo"
							name="nSeqNo">
						</w2:column>
						<w2:column dataType="text" id="sName"
							name="sName">
						</w2:column>
						<w2:column dataType="text" id="sCustType"
							name="sCustType">
						</w2:column>
						<w2:column dataType="text" id="sClass"
							name="sClass">
						</w2:column>
						<w2:column dataType="text" id="sMarry"
							name="sMarry">
						</w2:column>
						<w2:column dataType="text" id="sJobCode"
							name="sJobCode">
						</w2:column>
						<w2:column dataType="text" id="sJobName"
							name="sJobName">
						</w2:column>
						<w2:column dataType="text" id="sDrvCls"
							name="sDrvCls">
						</w2:column>
						<w2:column dataType="text" id="sJobCls"
							name="sJobCls">
						</w2:column>
						<w2:column dataType="text" id="nHomAdrsChangeNo"
							name="nHomAdrsChangeNo">
						</w2:column>
						<w2:column dataType="text" id="sHomZco"
							name="sHomZco">
						</w2:column>
						<w2:column dataType="text" id="sHomAdr1"
							name="sHomAdr1">
						</w2:column>
						<w2:column dataType="text" id="sHomAdr2"
							name="sHomAdr2">
						</w2:column>
						<w2:column dataType="text" id="nCrpAdrsChangeNo"
							name="nCrpAdrsChangeNo">
						</w2:column>
						<w2:column dataType="text" id="sCrpZco"
							name="sCrpZco">
						</w2:column>
						<w2:column dataType="text" id="sCrpAdr1"
							name="sCrpAdr1">
						</w2:column>
						<w2:column dataType="text" id="sCrpAdr2"
							name="sCrpAdr2">
						</w2:column>
						<w2:column dataType="text" id="nEtcAdrsChangeNo"
							name="nEtcAdrsChangeNo">
						</w2:column>
						<w2:column dataType="text" id="sEtcZco"
							name="sEtcZco">
						</w2:column>
						<w2:column dataType="text" id="sEtcAdr1"
							name="sEtcAdr1">
						</w2:column>
						<w2:column dataType="text" id="sEtcAdr2"
							name="sEtcAdr2">
						</w2:column>
						<w2:column dataType="text" id="sAdrsType"
							name="sAdrsType">
						</w2:column>
						<w2:column dataType="text" id="nAdrsChangeNo"
							name="nAdrsChangeNo">
						</w2:column>
						<w2:column dataType="text" id="sAdrsZco"
							name="sAdrsZco">
						</w2:column>
						<w2:column dataType="text" id="sAdrs1"
							name="sAdrs1">
						</w2:column>
						<w2:column dataType="text" id="sAdrs2"
							name="sAdrs2">
						</w2:column>
						<w2:column dataType="text" id="sDMAdrsTyp"
							name="sDMAdrsTyp">
						</w2:column>
						<w2:column dataType="text" id="nTelChangeNo"
							name="nTelChangeNo">
						</w2:column>
						<w2:column dataType="text" id="sHomeTel1"
							name="sHomeTel1">
						</w2:column>
						<w2:column dataType="text" id="sHomeTel2"
							name="sHomeTel2">
						</w2:column>
						<w2:column dataType="text" id="sHomeTel3"
							name="sHomeTel3">
						</w2:column>
						<w2:column dataType="text" id="sOfficeTel1"
							name="sOfficeTel1">
						</w2:column>
						<w2:column dataType="text" id="sOfficeTel2"
							name="sOfficeTel2">
						</w2:column>
						<w2:column dataType="text" id="sOfficeTel3"
							name="sOfficeTel3">
						</w2:column>
						<w2:column dataType="text" id="sCellPhone1"
							name="sCellPhone1">
						</w2:column>
						<w2:column dataType="text" id="sCellPhone2"
							name="sCellPhone2">
						</w2:column>
						<w2:column dataType="text" id="sCellPhone3"
							name="sCellPhone3">
						</w2:column>
						<w2:column dataType="text" id="sFax1"
							name="sFax1">
						</w2:column>
						<w2:column dataType="text" id="sFax2"
							name="sFax2">
						</w2:column>
						<w2:column dataType="text" id="sFax3"
							name="sFax3">
						</w2:column>
						<w2:column dataType="text" id="sEtcType"
							name="sEtcType">
						</w2:column>
						<w2:column dataType="text" id="sEtcTel1"
							name="sEtcTel1">
						</w2:column>
						<w2:column dataType="text" id="sEtcTel2"
							name="sEtcTel2">
						</w2:column>
						<w2:column dataType="text" id="sEtcTel3"
							name="sEtcTel3">
						</w2:column>
						<w2:column dataType="text" id="sEmail1"
							name="sEmail1">
						</w2:column>
						<w2:column dataType="text" id="sEmail2"
							name="sEmail2">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list"
					ev:oncelldatachange="scwin.ds_Trty_OnColumnChanged" id="Ds_Trty"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="chk"
							name="chk">
						</w2:column>
						<w2:column dataType="text" id="sBascSlctFlagCd"
							name="sBascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd_H"
							name="BascSlctFlagCd_H">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnPrprtGroupFlgcd" name="sPsnPrprtGroupFlgcd">
						</w2:column>
						<w2:column dataType="text"
							id="nPsnPrprtGroupSeqno" name="nPsnPrprtGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="nTrtyOrdr"
							name="nTrtyOrdr">
						</w2:column>
						<w2:column dataType="text" id="sScrnIndcYn"
							name="sScrnIndcYn">
						</w2:column>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sGnrzCd"
							name="sGnrzCd">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlAvaYn"
							name="sAutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlCyclCd"
							name="sAutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="nTrtyInsAmt"
							name="nTrtyInsAmt">
						</w2:column>
						<w2:column dataType="text" id="nSelfChamt"
							name="nSelfChamt">
						</w2:column>
						<w2:column dataType="text" id="sGrntAccuFlagCd"
							name="sGrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nAccuPrem"
							name="nAccuPrem">
						</w2:column>
						<w2:column dataType="text"
							id="nExptGrntBussPrem" name="nExptGrntBussPrem">
						</w2:column>
						<w2:column dataType="text" id="nRiskPrem"
							name="nRiskPrem">
						</w2:column>
						<w2:column dataType="text" id="nTrtyPrem"
							name="nTrtyPrem">
						</w2:column>
						<w2:column dataType="text" id="nRenwlSeq"
							name="nRenwlSeq">
						</w2:column>
						<w2:column dataType="text" id="sRenwlYn"
							name="sRenwlYn">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sTrtyStatCd"
							name="sTrtyStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="TrtyTypeCd"
							name="TrtyTypeCd">
						</w2:column>
						<w2:column dataType="text" id="TrtyFlagCd"
							name="TrtyFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd"
							name="BascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlAvaYn"
							name="AutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="GrntAccuFlagCd"
							name="GrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlCyclCd"
							name="AutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="PmmiInsurFlagCd"
							name="PmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlUseCrFlagCd"
							name="RenwlUseCrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="PronCmpsTrtyYn"
							name="PronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPronCmpsTrtyYn"
							name="sPronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPmmiInsurFlagCd"
							name="sPmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sResvAmtKey"
							name="sResvAmtKey">
						</w2:column>
						<w2:column dataType="text" id="FxamtCmpsFlag"
							name="FxamtCmpsFlag">
						</w2:column>
						<w2:column dataType="text" id="InsAvaDrveCd"
							name="InsAvaDrveCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlTrtyCd"
							name="RenwlTrtyCd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_LTIDA00"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text" id="sCrNoType"
							name="sCrNoType">
						</w2:column>
						<w2:column dataType="text" id="sItemCd"
							name="sItemCd">
						</w2:column>
						<w2:column dataType="text" id="sCrNoSeq"
							name="sCrNoSeq">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="sHsecFlagCd"
							name="sHsecFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sSaleChnlFlagCd"
							name="sSaleChnlFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sGnrzCd"
							name="sGnrzCd">
						</w2:column>
						<w2:column dataType="text"
							id="sBunsAchvDgrmClsfCd" name="sBunsAchvDgrmClsfCd">
						</w2:column>
						<w2:column dataType="text" id="sApplDclrRato"
							name="sApplDclrRato">
						</w2:column>
						<w2:column dataType="text" id="sDvdnFlagCd"
							name="sDvdnFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sPpayAvaYn"
							name="sPpayAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sTaxPrfrYn"
							name="sTaxPrfrYn">
						</w2:column>
						<w2:column dataType="text" id="sCrStatCd"
							name="sCrStatCd">
						</w2:column>
						<w2:column dataType="text" id="sCrStatFlgcd"
							name="sCrStatFlgcd">
						</w2:column>
						<w2:column dataType="text" id="nCrStatCarrSeqno"
							name="nCrStatCarrSeqno">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sSsrtDate"
							name="sSsrtDate">
						</w2:column>
						<w2:column dataType="text" id="sCpayDate"
							name="sCpayDate">
						</w2:column>
						<w2:column dataType="text" id="sPaymExptDate"
							name="sPaymExptDate">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nDefrYct"
							name="nDefrYct">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sPaymCyclCd"
							name="sPaymCyclCd">
						</w2:column>
						<w2:column dataType="text" id="sCmMetd"
							name="sCmMetd">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nAccuPrem"
							name="nAccuPrem">
						</w2:column>
						<w2:column dataType="text" id="nBussPrem"
							name="nBussPrem">
						</w2:column>
						<w2:column dataType="text" id="nDcPrem"
							name="nDcPrem">
						</w2:column>
						<w2:column dataType="text" id="nApplPrem"
							name="nApplPrem">
						</w2:column>
						<w2:column dataType="text" id="nMinPrem"
							name="nMinPrem">
						</w2:column>
						<w2:column dataType="text" id="nMaxPrem"
							name="nMaxPrem">
						</w2:column>
						<w2:column dataType="text" id="sPsnGroupFlgcd"
							name="sPsnGroupFlgcd">
						</w2:column>
						<w2:column dataType="text" id="sGroupCrAdmNo"
							name="sGroupCrAdmNo">
						</w2:column>
						<w2:column dataType="text" id="sBsmnRgstNo"
							name="sBsmnRgstNo">
						</w2:column>
						<w2:column dataType="text" id="sAnntOpnAgeCd"
							name="sAnntOpnAgeCd">
						</w2:column>
						<w2:column dataType="text" id="sAnntPymTermCd"
							name="sAnntPymTermCd">
						</w2:column>
						<w2:column dataType="text" id="sAnntPymCyclCd"
							name="sAnntPymCyclCd">
						</w2:column>
						<w2:column dataType="text" id="sAnntPymTypeCd"
							name="sAnntPymTypeCd">
						</w2:column>
						<w2:column dataType="text" id="sAnntPymStrtDate"
							name="sAnntPymStrtDate">
						</w2:column>
						<w2:column dataType="text" id="nAnntPymCt"
							name="nAnntPymCt">
						</w2:column>
						<w2:column dataType="text" id="nFinalPaymSeq"
							name="nFinalPaymSeq">
						</w2:column>
						<w2:column dataType="text" id="sFinalPaymMthy"
							name="sFinalPaymMthy">
						</w2:column>
						<w2:column dataType="text" id="sFinalRecpDate"
							name="sFinalRecpDate">
						</w2:column>
						<w2:column dataType="text" id="nTotPaymPrem"
							name="nTotPaymPrem">
						</w2:column>
						<w2:column dataType="text" id="sInsurCrLoanYn"
							name="sInsurCrLoanYn">
						</w2:column>
						<w2:column dataType="text" id="sFinalReviDate"
							name="sFinalReviDate">
						</w2:column>
						<w2:column dataType="text" id="sLapsDate"
							name="sLapsDate">
						</w2:column>
						<w2:column dataType="text" id="sFrstSaleChnlCd"
							name="sFrstSaleChnlCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerHdqtCd"
							name="sFrstDoerHdqtCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerCentrCd"
							name="sFrstDoerCentrCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerTeamCd"
							name="sFrstDoerTeamCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerGroupCd"
							name="sFrstDoerGroupCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerPartCd"
							name="sFrstDoerPartCd">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoer"
							name="sFrstDoer">
						</w2:column>
						<w2:column dataType="text" id="sFrstDoerUser"
							name="sFrstDoerUser">
						</w2:column>
						<w2:column dataType="text" id="sDoer"
							name="sDoer">
						</w2:column>
						<w2:column dataType="text" id="sDoerUser"
							name="sDoerUser">
						</w2:column>
						<w2:column dataType="text" id="sCrNo"
							name="sCrNo">
						</w2:column>
						<w2:column dataType="text" id="sPlanProgRankCd"
							name="sPlanProgRankCd">
						</w2:column>
						<w2:column dataType="text" id="sPlanProgTbNo"
							name="sPlanProgTbNo">
						</w2:column>
						<w2:column dataType="text" id="sJugmAuthCd"
							name="sJugmAuthCd">
						</w2:column>
						<w2:column dataType="text" id="sJugmGradCd"
							name="sJugmGradCd">
						</w2:column>
						<w2:column dataType="text" id="sConuResltCd"
							name="sConuResltCd">
						</w2:column>
						<w2:column dataType="text" id="sHndwritJugmYn"
							name="sHndwritJugmYn">
						</w2:column>
						<w2:column dataType="text" id="nInrpsPsct"
							name="nInrpsPsct">
						</w2:column>
						<w2:column dataType="text" id="nObjtNum"
							name="nObjtNum">
						</w2:column>
						<w2:column dataType="text" id="nGroupInsPsct"
							name="nGroupInsPsct">
						</w2:column>
						<w2:column dataType="text" id="sCedeStndYm"
							name="sCedeStndYm">
						</w2:column>
						<w2:column dataType="text" id="nEndRtnrt"
							name="nEndRtnrt">
						</w2:column>
						<w2:column dataType="text" id="nExptEndRetrnAmt"
							name="nExptEndRetrnAmt">
						</w2:column>
						<w2:column dataType="text" id="nExptEndRtnrt"
							name="nExptEndRtnrt">
						</w2:column>
						<w2:column dataType="text" id="sPectSaleYn"
							name="sPectSaleYn">
						</w2:column>
						<w2:column dataType="text" id="sScanObjtYn"
							name="sScanObjtYn">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanCd"
							name="sApplPlanCd">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanName"
							name="sApplPlanName">
						</w2:column>
						<w2:column dataType="text" id="sSaleChnlDtal"
							name="sSaleChnlDtal">
						</w2:column>
						<w2:column dataType="text"
							id="sInsurTermPaymTermName" name="sInsurTermPaymTermName">
						</w2:column>
						<w2:column dataType="text" id="gUserID"
							name="gUserID">
						</w2:column>
						<w2:column dataType="text" id="gUserIP"
							name="gUserIP">
						</w2:column>
						<w2:column dataType="text"
							id="sPlanProgRankName" name="sPlanProgRankName">
						</w2:column>
						<w2:column dataType="text" id="sConuResltName"
							name="sConuResltName">
						</w2:column>
						<w2:column dataType="text" id="sGdTypeFlgCd"
							name="sGdTypeFlgCd">
						</w2:column>
						<w2:column dataType="text" id="sTaxPrfrGdYn"
							name="sTaxPrfrGdYn">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt1" name="nEndRtnAmtCalElmnt1">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt2" name="nEndRtnAmtCalElmnt2">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt3" name="nEndRtnAmtCalElmnt3">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt4" name="nEndRtnAmtCalElmnt4">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt5" name="nEndRtnAmtCalElmnt5">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt6" name="nEndRtnAmtCalElmnt6">
						</w2:column>
						<w2:column dataType="text" id="sSrdoIssuDate"
							name="sSrdoIssuDate">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt10" name="nEndRtnAmtCalElmnt10">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt21" name="nEndRtnAmtCalElmnt21">
						</w2:column>
						<w2:column dataType="text"
							id="nEndRtnAmtCalElmnt22" name="nEndRtnAmtCalElmnt22">
						</w2:column>
						<w2:column id="sDrivFlagCd" name="sDrivFlagCd"
							dataType="text">
						</w2:column>
					</w2:columnInfo>
					<w2:data use="true">
						<w2:row>
							<gUserID></gUserID>
							<gUserIP></gUserIP>
							<nAccuPrem></nAccuPrem>
							<nAnntPymCt></nAnntPymCt>
							<nApplPrem></nApplPrem>
							<nBussPrem></nBussPrem>
							<nCrChngNo></nCrChngNo>
							<nCrStatCarrSeqno></nCrStatCarrSeqno>
							<nDcPrem></nDcPrem>
							<nDefrYct></nDefrYct>
							<nEndAge></nEndAge>
							<nEndRtnAmtCalElmnt1></nEndRtnAmtCalElmnt1>
							<nEndRtnAmtCalElmnt10></nEndRtnAmtCalElmnt10>
							<nEndRtnAmtCalElmnt2></nEndRtnAmtCalElmnt2>
							<nEndRtnAmtCalElmnt21></nEndRtnAmtCalElmnt21>
							<nEndRtnAmtCalElmnt22></nEndRtnAmtCalElmnt22>
							<nEndRtnAmtCalElmnt3></nEndRtnAmtCalElmnt3>
							<nEndRtnAmtCalElmnt4></nEndRtnAmtCalElmnt4>
							<nEndRtnAmtCalElmnt5></nEndRtnAmtCalElmnt5>
							<nEndRtnAmtCalElmnt6></nEndRtnAmtCalElmnt6>
							<nEndRtnrt></nEndRtnrt>
							<nExptEndRetrnAmt></nExptEndRetrnAmt>
							<nExptEndRtnrt></nExptEndRtnrt>
							<nFinalPaymSeq></nFinalPaymSeq>
							<nGrntPrem></nGrntPrem>
							<nGroupInsPsct></nGroupInsPsct>
							<nInrpsPsct></nInrpsPsct>
							<nMaxPrem></nMaxPrem>
							<nMinPrem></nMinPrem>
							<nObjtNum></nObjtNum>
							<nPaymAge></nPaymAge>
							<nRealInsurTerm></nRealInsurTerm>
							<nRealPaymTerm></nRealPaymTerm>
							<nTotPaymPrem></nTotPaymPrem>
							<sAnntOpnAgeCd></sAnntOpnAgeCd>
							<sAnntPymCyclCd></sAnntPymCyclCd>
							<sAnntPymStrtDate></sAnntPymStrtDate>
							<sAnntPymTermCd></sAnntPymTermCd>
							<sAnntPymTypeCd></sAnntPymTypeCd>
							<sApplDclrRato></sApplDclrRato>
							<sApplPlanCd></sApplPlanCd>
							<sApplPlanName></sApplPlanName>
							<sBsmnRgstNo></sBsmnRgstNo>
							<sBunsAchvDgrmClsfCd></sBunsAchvDgrmClsfCd>
							<sCedeStndYm></sCedeStndYm>
							<sCmMetd></sCmMetd>
							<sConuResltCd></sConuResltCd>
							<sConuResltName></sConuResltName>
							<sCpayDate></sCpayDate>
							<sCrNo></sCrNo>
							<sCrNoSeq></sCrNoSeq>
							<sCrNoType></sCrNoType>
							<sCrStatCd></sCrStatCd>
							<sCrStatFlgcd></sCrStatFlgcd>
							<sDoer></sDoer>
							<sDoerUser></sDoerUser>
							<sDvdnFlagCd></sDvdnFlagCd>
							<sFinalPaymMthy></sFinalPaymMthy>
							<sFinalRecpDate></sFinalRecpDate>
							<sFinalReviDate></sFinalReviDate>
							<sFrstDoer></sFrstDoer>
							<sFrstDoerCentrCd></sFrstDoerCentrCd>
							<sFrstDoerGroupCd></sFrstDoerGroupCd>
							<sFrstDoerHdqtCd></sFrstDoerHdqtCd>
							<sFrstDoerPartCd></sFrstDoerPartCd>
							<sFrstDoerTeamCd></sFrstDoerTeamCd>
							<sFrstDoerUser></sFrstDoerUser>
							<sFrstSaleChnlCd></sFrstSaleChnlCd>
							<sGdCd></sGdCd>
							<sGdTypeFlgCd></sGdTypeFlgCd>
							<sGnrzCd></sGnrzCd>
							<sGroupCrAdmNo></sGroupCrAdmNo>
							<sHndwritJugmYn></sHndwritJugmYn>
							<sHsecFlagCd></sHsecFlagCd>
							<sInsurCrLoanYn></sInsurCrLoanYn>
							<sInsurEndDate></sInsurEndDate>
							<sInsurStrtdate></sInsurStrtdate>
							<sInsurTermCd></sInsurTermCd>
							<sInsurTermPaymTermName></sInsurTermPaymTermName>
							<sItemCd></sItemCd>
							<sJugmAuthCd></sJugmAuthCd>
							<sJugmGradCd></sJugmGradCd>
							<sLapsDate></sLapsDate>
							<sPaymCyclCd></sPaymCyclCd>
							<sPaymExptDate></sPaymExptDate>
							<sPaymTermCd></sPaymTermCd>
							<sPectSaleYn></sPectSaleYn>
							<sPlanNo></sPlanNo>
							<sPlanProgRankCd></sPlanProgRankCd>
							<sPlanProgRankName></sPlanProgRankName>
							<sPlanProgTbNo></sPlanProgTbNo>
							<sPpayAvaYn></sPpayAvaYn>
							<sPsnGroupFlgcd></sPsnGroupFlgcd>
							<sSaleChnlDtal></sSaleChnlDtal>
							<sSaleChnlFlagCd></sSaleChnlFlagCd>
							<sScanObjtYn></sScanObjtYn>
							<sSrdoIssuDate></sSrdoIssuDate>
							<sSsrtDate></sSsrtDate>
							<sTaxPrfrGdYn></sTaxPrfrGdYn>
							<sTaxPrfrYn></sTaxPrfrYn>
						</w2:row>
					</w2:data>
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_LTIEA10"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='LTIEA10']/LTIEA10">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Trty_Backup"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_LTIDA15"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text" id="nSeqno"
							name="nSeqno">
						</w2:column>
						<w2:column dataType="text" id="sCcndFlagCd"
							name="sCcndFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sCcndFlagName"
							name="sCcndFlagName">
						</w2:column>
						<w2:column dataType="text" id="sCcndResno"
							name="sCcndResno">
						</w2:column>
						<w2:column dataType="text" id="sCcndName"
							name="sCcndName">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sJugmAuthCd"
							name="sJugmAuthCd">
						</w2:column>
						<w2:column dataType="text" id="sJugmAuthName"
							name="sJugmAuthName">
						</w2:column>
						<w2:column dataType="text" id="sJugmGradName"
							name="sJugmGradName">
						</w2:column>
						<w2:column dataType="text" id="sJugmCont"
							name="sJugmCont">
						</w2:column>
						<w2:column dataType="text" id="sDgnsObjtYn"
							name="sDgnsObjtYn">
						</w2:column>
						<w2:column dataType="text" id="sConuObjtYn"
							name="sConuObjtYn">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnPrprtGroupFlgcd" name="sPsnPrprtGroupFlgcd">
						</w2:column>
						<w2:column dataType="text"
							id="nPsnPrprtGroupSeqno" name="nPsnPrprtGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="nOthrInsurSeqno"
							name="nOthrInsurSeqno">
						</w2:column>
						<w2:column dataType="text" id="nGroupInrpsSeqno"
							name="nGroupInrpsSeqno">
						</w2:column>
						<w2:column dataType="text" id="sRqstCd"
							name="sRqstCd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Trty_Tmp"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="chk"
							name="chk">
						</w2:column>
						<w2:column dataType="text" id="sBascSlctFlagCd"
							name="sBascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd_H"
							name="BascSlctFlagCd_H">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnPrprtGroupFlgcd" name="sPsnPrprtGroupFlgcd">
						</w2:column>
						<w2:column dataType="text"
							id="nPsnPrprtGroupSeqno" name="nPsnPrprtGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="nTrtyOrdr"
							name="nTrtyOrdr">
						</w2:column>
						<w2:column dataType="text" id="sScrnIndcYn"
							name="sScrnIndcYn">
						</w2:column>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sGnrzCd"
							name="sGnrzCd">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlAvaYn"
							name="sAutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlCyclCd"
							name="sAutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="nTrtyInsAmt"
							name="nTrtyInsAmt">
						</w2:column>
						<w2:column dataType="text" id="nSelfChamt"
							name="nSelfChamt">
						</w2:column>
						<w2:column dataType="text" id="sGrntAccuFlagCd"
							name="sGrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nAccuPrem"
							name="nAccuPrem">
						</w2:column>
						<w2:column dataType="text"
							id="nExptGrntBussPrem" name="nExptGrntBussPrem">
						</w2:column>
						<w2:column dataType="text" id="nRiskPrem"
							name="nRiskPrem">
						</w2:column>
						<w2:column dataType="text" id="nTrtyPrem"
							name="nTrtyPrem">
						</w2:column>
						<w2:column dataType="text" id="nRenwlSeq"
							name="nRenwlSeq">
						</w2:column>
						<w2:column dataType="text" id="sRenwlYn"
							name="sRenwlYn">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sTrtyStatCd"
							name="sTrtyStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="TrtyTypeCd"
							name="TrtyTypeCd">
						</w2:column>
						<w2:column dataType="text" id="TrtyFlagCd"
							name="TrtyFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd"
							name="BascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlAvaYn"
							name="AutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="GrntAccuFlagCd"
							name="GrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlCyclCd"
							name="AutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="PmmiInsurFlagCd"
							name="PmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlUseCrFlagCd"
							name="RenwlUseCrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="PronCmpsTrtyYn"
							name="PronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPronCmpsTrtyYn"
							name="sPronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPmmiInsurFlagCd"
							name="sPmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sResvAmtKey"
							name="sResvAmtKey">
						</w2:column>
						<w2:column dataType="text" id="FxamtCmpsFlag"
							name="FxamtCmpsFlag">
						</w2:column>
						<w2:column dataType="text" id="InsAvaDrveCd"
							name="InsAvaDrveCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlTrtyCd"
							name="RenwlTrtyCd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list"
					ev:oncelldatachange="scwin.Ds_Pibo_OnColumnChanged" id="Ds_Pibo"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sel"
							name="sel">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text" id="nGroupSeqno"
							name="nGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="nInrpsSeqno"
							name="nInrpsSeqno">
						</w2:column>
						<w2:column dataType="text" id="sInrpsFlagCd"
							name="sInrpsFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="sInrpsCd"
							name="sInrpsCd">
						</w2:column>
						<w2:column dataType="text" id="sInrpsName"
							name="sInrpsName">
						</w2:column>
						<w2:column dataType="text" id="sInrpsSexFlag"
							name="sInrpsSexFlag">
						</w2:column>
						<w2:column dataType="text" id="sJobCd"
							name="sJobCd">
						</w2:column>
						<w2:column dataType="text" id="sJobGradCd"
							name="sJobGradCd">
						</w2:column>
						<w2:column dataType="text" id="sDrveFlagCd"
							name="sDrveFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nInrpsAge"
							name="nInrpsAge">
						</w2:column>
						<w2:column dataType="text"
							id="sExisPftbpInrpsRelnCd" name="sExisPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpCd"
							name="sExisPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpName"
							name="sExisPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpTelno"
							name="sExisPftbpTelno">
						</w2:column>
						<w2:column dataType="text"
							id="sPftbpInrpsRelnCd" name="sPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sPftbpCd"
							name="sPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sPftbpName"
							name="sPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sPftbpTelno"
							name="sPftbpTelno">
						</w2:column>
						<w2:column dataType="text" id="sPftbpFlagCd"
							name="sPftbpFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanCd"
							name="sApplPlanCd">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanName"
							name="sApplPlanName">
						</w2:column>
						<w2:column dataType="text" id="sInrpsStatCd"
							name="sInrpsStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="sJobName"
							name="sJobName">
						</w2:column>
						<w2:column dataType="text"
							id="sPftbpInrpsRelnName" name="sPftbpInrpsRelnName">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nMaxPrem"
							name="nMaxPrem">
						</w2:column>
						<w2:column dataType="text" id="nMinPrem"
							name="nMinPrem">
						</w2:column>
						<w2:column dataType="text" id="sRqstYn"
							name="sRqstYn">
						</w2:column>
						<w2:column dataType="text" id="sRqstYnName"
							name="sRqstYnName">
						</w2:column>
						<w2:column dataType="text" id="sOthrInsurCnt"
							name="sOthrInsurCnt">
						</w2:column>
						<w2:column dataType="text"
							id="sOthrInsurCntName" name="sOthrInsurCntName">
						</w2:column>
						<w2:column dataType="text" id="sSubCvrgeYn"
							name="sSubCvrgeYn">
						</w2:column>
						<w2:column dataType="text" id="sSubCvrgeYnName"
							name="sSubCvrgeYnName">
						</w2:column>
						<w2:column dataType="text" id="sDgnsObjtYn"
							name="sDgnsObjtYn">
						</w2:column>
						<w2:column dataType="text" id="sDgnsObjtYnName"
							name="sDgnsObjtYnName">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnInfoOferAgreYn" name="sPsnInfoOferAgreYn">
						</w2:column>
						<w2:column dataType="text" id="sMNumCrInsAgreYn"
							name="sMNumCrInsAgreYn">
						</w2:column>
						<w2:column dataType="text" id="nAddrChngSeq"
							name="nAddrChngSeq">
						</w2:column>
						<w2:column dataType="text" id="nTelnoChngSeq"
							name="nTelnoChngSeq">
						</w2:column>
						<w2:column dataType="text"
							id="sMailRvadAddrFlagCd" name="sMailRvadAddrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nMailRvadChngSeq"
							name="nMailRvadChngSeq">
						</w2:column>
						<w2:column dataType="text" id="sAddrFlgcd"
							name="sAddrFlgcd">
						</w2:column>
						<w2:column dataType="text" id="sInrpsCstId"
							name="sInrpsCstId">
						</w2:column>
						<w2:column dataType="text" id="sCstFlgcd"
							name="sCstFlgcd">
						</w2:column>
						<w2:column dataType="text" id="sCrtorRelnCd"
							name="sCrtorRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sMinsrRelnCd"
							name="sMinsrRelnCd">
						</w2:column>
						<w2:column dataType="text"
							id="sXcptPftbpInrpsRelnCd" name="sXcptPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpCd"
							name="sXcptPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpName"
							name="sXcptPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpTelno"
							name="sXcptPftbpTelno">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpFlagCd"
							name="sXcptPftbpFlagCd">
						</w2:column>
						<w2:column id="sPiboDrivCd" name="sPiboDrivCd"
							dataType="text">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_InsAmt"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_InsAmt_Tmp"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Pibo_BackUp"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sInrpsCd"
							name="sInrpsCd">
						</w2:column>
						<w2:column dataType="text" id="sInrpsName"
							name="sInrpsName">
						</w2:column>
						<w2:column dataType="text" id="sJobCd"
							name="sJobCd">
						</w2:column>
						<w2:column dataType="text" id="sDrveFlagCd"
							name="sDrveFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sMinsrRelnCd"
							name="sMinsrRelnCd">
						</w2:column>
						<w2:column dataType="text" id="fixFlag"
							name="fixFlag">
						</w2:column>
						<w2:column dataType="text" id="MediFlag"
							name="MediFlag">
						</w2:column>
						<w2:column dataType="text" id="hasPronCmpsTrty"
							name="hasPronCmpsTrty">
						</w2:column>
						<w2:column dataType="text" id="hasFxamtCmps"
							name="hasFxamtCmps">
						</w2:column>
						<w2:column dataType="text" id="sAddrFlgcd"
							name="sAddrFlgcd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Pibo_Tmp"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="sel"
							name="sel">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text" id="nGroupSeqno"
							name="nGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="nInrpsSeqno"
							name="nInrpsSeqno">
						</w2:column>
						<w2:column dataType="text" id="sInrpsFlagCd"
							name="sInrpsFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="sInrpsCd"
							name="sInrpsCd">
						</w2:column>
						<w2:column dataType="text" id="sInrpsName"
							name="sInrpsName">
						</w2:column>
						<w2:column dataType="text" id="sInrpsSexFlag"
							name="sInrpsSexFlag">
						</w2:column>
						<w2:column dataType="text" id="sJobCd"
							name="sJobCd">
						</w2:column>
						<w2:column dataType="text" id="sJobGradCd"
							name="sJobGradCd">
						</w2:column>
						<w2:column dataType="text" id="sDrveFlagCd"
							name="sDrveFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nInrpsAge"
							name="nInrpsAge">
						</w2:column>
						<w2:column dataType="text"
							id="sExisPftbpInrpsRelnCd" name="sExisPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpCd"
							name="sExisPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpName"
							name="sExisPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sExisPftbpTelno"
							name="sExisPftbpTelno">
						</w2:column>
						<w2:column dataType="text"
							id="sPftbpInrpsRelnCd" name="sPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sPftbpCd"
							name="sPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sPftbpName"
							name="sPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sPftbpTelno"
							name="sPftbpTelno">
						</w2:column>
						<w2:column dataType="text" id="sPftbpFlagCd"
							name="sPftbpFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanCd"
							name="sApplPlanCd">
						</w2:column>
						<w2:column dataType="text" id="sApplPlanName"
							name="sApplPlanName">
						</w2:column>
						<w2:column dataType="text" id="sInrpsStatCd"
							name="sInrpsStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="sJobName"
							name="sJobName">
						</w2:column>
						<w2:column dataType="text"
							id="sPftbpInrpsRelnName" name="sPftbpInrpsRelnName">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nMaxPrem"
							name="nMaxPrem">
						</w2:column>
						<w2:column dataType="text" id="nMinPrem"
							name="nMinPrem">
						</w2:column>
						<w2:column dataType="text" id="sRqstYn"
							name="sRqstYn">
						</w2:column>
						<w2:column dataType="text" id="sRqstYnName"
							name="sRqstYnName">
						</w2:column>
						<w2:column dataType="text" id="sOthrInsurCnt"
							name="sOthrInsurCnt">
						</w2:column>
						<w2:column dataType="text"
							id="sOthrInsurCntName" name="sOthrInsurCntName">
						</w2:column>
						<w2:column dataType="text" id="sSubCvrgeYn"
							name="sSubCvrgeYn">
						</w2:column>
						<w2:column dataType="text" id="sSubCvrgeYnName"
							name="sSubCvrgeYnName">
						</w2:column>
						<w2:column dataType="text" id="sDgnsObjtYn"
							name="sDgnsObjtYn">
						</w2:column>
						<w2:column dataType="text" id="sDgnsObjtYnName"
							name="sDgnsObjtYnName">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnInfoOferAgreYn" name="sPsnInfoOferAgreYn">
						</w2:column>
						<w2:column dataType="text" id="sMNumCrInsAgreYn"
							name="sMNumCrInsAgreYn">
						</w2:column>
						<w2:column dataType="text" id="nAddrChngSeq"
							name="nAddrChngSeq">
						</w2:column>
						<w2:column dataType="text" id="nTelnoChngSeq"
							name="nTelnoChngSeq">
						</w2:column>
						<w2:column dataType="text"
							id="sMailRvadAddrFlagCd" name="sMailRvadAddrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nMailRvadChngSeq"
							name="nMailRvadChngSeq">
						</w2:column>
						<w2:column dataType="text" id="sAddrFlgcd"
							name="sAddrFlgcd">
						</w2:column>
						<w2:column dataType="text" id="sInrpsCstId"
							name="sInrpsCstId">
						</w2:column>
						<w2:column dataType="text" id="sCstFlgcd"
							name="sCstFlgcd">
						</w2:column>
						<w2:column dataType="text" id="sCrtorRelnCd"
							name="sCrtorRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sMinsrRelnCd"
							name="sMinsrRelnCd">
						</w2:column>
						<w2:column dataType="text"
							id="sXcptPftbpInrpsRelnCd" name="sXcptPftbpInrpsRelnCd">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpCd"
							name="sXcptPftbpCd">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpName"
							name="sXcptPftbpName">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpTelno"
							name="sXcptPftbpTelno">
						</w2:column>
						<w2:column dataType="text" id="sXcptPftbpFlagCd"
							name="sXcptPftbpFlagCd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Trty_Set"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="chk"
							name="chk">
						</w2:column>
						<w2:column dataType="text" id="sBascSlctFlagCd"
							name="sBascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd_H"
							name="BascSlctFlagCd_H">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnPrprtGroupFlgcd" name="sPsnPrprtGroupFlgcd">
						</w2:column>
						<w2:column dataType="text"
							id="nPsnPrprtGroupSeqno" name="nPsnPrprtGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="nTrtyOrdr"
							name="nTrtyOrdr">
						</w2:column>
						<w2:column dataType="text" id="sScrnIndcYn"
							name="sScrnIndcYn">
						</w2:column>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sGnrzCd"
							name="sGnrzCd">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlAvaYn"
							name="sAutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlCyclCd"
							name="sAutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="nTrtyInsAmt"
							name="nTrtyInsAmt">
						</w2:column>
						<w2:column dataType="text" id="nSelfChamt"
							name="nSelfChamt">
						</w2:column>
						<w2:column dataType="text" id="sGrntAccuFlagCd"
							name="sGrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nAccuPrem"
							name="nAccuPrem">
						</w2:column>
						<w2:column dataType="text"
							id="nExptGrntBussPrem" name="nExptGrntBussPrem">
						</w2:column>
						<w2:column dataType="text" id="nRiskPrem"
							name="nRiskPrem">
						</w2:column>
						<w2:column dataType="text" id="nTrtyPrem"
							name="nTrtyPrem">
						</w2:column>
						<w2:column dataType="text" id="nRenwlSeq"
							name="nRenwlSeq">
						</w2:column>
						<w2:column dataType="text" id="sRenwlYn"
							name="sRenwlYn">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sTrtyStatCd"
							name="sTrtyStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="TrtyTypeCd"
							name="TrtyTypeCd">
						</w2:column>
						<w2:column dataType="text" id="TrtyFlagCd"
							name="TrtyFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd"
							name="BascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlAvaYn"
							name="AutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="GrntAccuFlagCd"
							name="GrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlCyclCd"
							name="AutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="PmmiInsurFlagCd"
							name="PmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlUseCrFlagCd"
							name="RenwlUseCrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="PronCmpsTrtyYn"
							name="PronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPronCmpsTrtyYn"
							name="sPronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPmmiInsurFlagCd"
							name="sPmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sResvAmtKey"
							name="sResvAmtKey">
						</w2:column>
						<w2:column dataType="text" id="FxamtCmpsFlag"
							name="FxamtCmpsFlag">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Trty_Save"
					repeatNode="map">
					<w2:columnInfo>
						<w2:column dataType="text" id="chk"
							name="chk">
						</w2:column>
						<w2:column dataType="text" id="sBascSlctFlagCd"
							name="sBascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd_H"
							name="BascSlctFlagCd_H">
						</w2:column>
						<w2:column dataType="text" id="sTrtyName"
							name="sTrtyName">
						</w2:column>
						<w2:column dataType="text" id="sPlanNo"
							name="sPlanNo">
						</w2:column>
						<w2:column dataType="text"
							id="sPsnPrprtGroupFlgcd" name="sPsnPrprtGroupFlgcd">
						</w2:column>
						<w2:column dataType="text"
							id="nPsnPrprtGroupSeqno" name="nPsnPrprtGroupSeqno">
						</w2:column>
						<w2:column dataType="text" id="sTrtyCd"
							name="sTrtyCd">
						</w2:column>
						<w2:column dataType="text" id="nCrChngNo"
							name="nCrChngNo">
						</w2:column>
						<w2:column dataType="text" id="nTrtyOrdr"
							name="nTrtyOrdr">
						</w2:column>
						<w2:column dataType="text" id="sScrnIndcYn"
							name="sScrnIndcYn">
						</w2:column>
						<w2:column dataType="text" id="sGdCd"
							name="sGdCd">
						</w2:column>
						<w2:column dataType="text" id="sGnrzCd"
							name="sGnrzCd">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlAvaYn"
							name="sAutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="sAutoRenwlCyclCd"
							name="sAutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="nTrtyInsAmt"
							name="nTrtyInsAmt">
						</w2:column>
						<w2:column dataType="text" id="nSelfChamt"
							name="nSelfChamt">
						</w2:column>
						<w2:column dataType="text" id="sGrntAccuFlagCd"
							name="sGrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="nGrntPrem"
							name="nGrntPrem">
						</w2:column>
						<w2:column dataType="text" id="nAccuPrem"
							name="nAccuPrem">
						</w2:column>
						<w2:column dataType="text"
							id="nExptGrntBussPrem" name="nExptGrntBussPrem">
						</w2:column>
						<w2:column dataType="text" id="nRiskPrem"
							name="nRiskPrem">
						</w2:column>
						<w2:column dataType="text" id="nTrtyPrem"
							name="nTrtyPrem">
						</w2:column>
						<w2:column dataType="text" id="nRenwlSeq"
							name="nRenwlSeq">
						</w2:column>
						<w2:column dataType="text" id="sRenwlYn"
							name="sRenwlYn">
						</w2:column>
						<w2:column dataType="text" id="sPaymTermCd"
							name="sPaymTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealPaymTerm"
							name="nRealPaymTerm">
						</w2:column>
						<w2:column dataType="text" id="sInsurTermCd"
							name="sInsurTermCd">
						</w2:column>
						<w2:column dataType="text" id="nRealInsurTerm"
							name="nRealInsurTerm">
						</w2:column>
						<w2:column dataType="text" id="nPaymAge"
							name="nPaymAge">
						</w2:column>
						<w2:column dataType="text" id="nEndAge"
							name="nEndAge">
						</w2:column>
						<w2:column dataType="text" id="sTrtyStatCd"
							name="sTrtyStatCd">
						</w2:column>
						<w2:column dataType="text" id="sInsurStrtdate"
							name="sInsurStrtdate">
						</w2:column>
						<w2:column dataType="text" id="sInsurEndDate"
							name="sInsurEndDate">
						</w2:column>
						<w2:column dataType="text" id="sCnclExtnEndDate"
							name="sCnclExtnEndDate">
						</w2:column>
						<w2:column dataType="text" id="TrtyTypeCd"
							name="TrtyTypeCd">
						</w2:column>
						<w2:column dataType="text" id="TrtyFlagCd"
							name="TrtyFlagCd">
						</w2:column>
						<w2:column dataType="text" id="BascSlctFlagCd"
							name="BascSlctFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlAvaYn"
							name="AutoRenwlAvaYn">
						</w2:column>
						<w2:column dataType="text" id="GrntAccuFlagCd"
							name="GrntAccuFlagCd">
						</w2:column>
						<w2:column dataType="text" id="AutoRenwlCyclCd"
							name="AutoRenwlCyclCd">
						</w2:column>
						<w2:column dataType="text" id="PmmiInsurFlagCd"
							name="PmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlUseCrFlagCd"
							name="RenwlUseCrFlagCd">
						</w2:column>
						<w2:column dataType="text" id="PronCmpsTrtyYn"
							name="PronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPronCmpsTrtyYn"
							name="sPronCmpsTrtyYn">
						</w2:column>
						<w2:column dataType="text" id="sPmmiInsurFlagCd"
							name="sPmmiInsurFlagCd">
						</w2:column>
						<w2:column dataType="text" id="sResvAmtKey"
							name="sResvAmtKey">
						</w2:column>
						<w2:column dataType="text" id="FxamtCmpsFlag"
							name="FxamtCmpsFlag">
						</w2:column>
						<w2:column dataType="text" id="InsAvaDrveCd"
							name="InsAvaDrveCd">
						</w2:column>
						<w2:column dataType="text" id="RenwlTrtyCd"
							name="RenwlTrtyCd">
						</w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataList baseNode="list" id="Ds_Trty_Basic"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_LTIDB01Cnt"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='LTIDB07Cnt']/LTIDB07Cnt">
				</w2:dataList>
				<w2:dataList baseNode="list" id="Dsws_InsAmt"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='InsAmt']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Pibo"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='vLTIDA01']/vector/data/LTIDA01">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Bogi"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Drive"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_FlagCd"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Grade"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_InsurTerm"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='InsurTerm']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_PaymCycl"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='paymCyclCdList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Plan"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='applPlanList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Trty"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='multi']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Warning"
					repeatNode="map" userData2="//*/WARNING">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_PaymTerm"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='PaymTerm']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Napgi"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='com_PaymTermCd']/vector/data/com_PaymTermCd">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_CrtorRelnCd"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='vCrtorRelnCd']/vector/data/com_CrtorRelnCd">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_PrdAttr"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='prdAttrList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_InsurTermPaymTerm"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_LTIDA15"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='lTIDA15List']/vector/data/LTIDA15">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Goods"
					repeatNode="map" userData2="//*/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_TrtyTerm"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='trtyTermList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_AgencyHistory"
					repeatNode="map">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_MinsrReln"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='MinsrReln']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Search42"
					repeatNode="map" userData2="//*/CUSAA42">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_BascTrty"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='BascList']/vector/data/LTIBA01">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_BankBizDay"
					repeatNode="map" userData2="//*/ACCAB02">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_AnntOpnAgeCd"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='AnntyOpnAgeList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_AnntPymTermCd"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_AnntPymCyclCd"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='AnntyPymCyclList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_AnntPymTypeCd"
					repeatNode="map"
					userData2="//hashtable/data[@hashkey='AnntyPymTypeList']/vector/data/multi">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_SendTax"
					repeatNode="map" userData2="//*/TAX0020">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_SendTaxList"
					repeatNode="map" userData2="//*/vector/data/TAX0200">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_Dmcy"
					repeatNode="map" userData2="//*/DMCY">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_PvcrJob"
					repeatNode="map" userData2="//vector/data/LTIEA01Job">
				</w2:dataList>
				<w2:dataList baseNode="list" id="DsWs_SsrtCarr"
					repeatNode="map" userData2="//vector/data/LTIEA01Carr">
				</w2:dataList>
				<w2:dataList id="DS_TrtyCmpsContAmtLimitInfo" baseNode="list" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="sTrtyCd" name="sTrtyCd" dataType="text"></w2:column>
						<w2:column id="nTrtyInsAmt" name="nTrtyInsAmt" dataType="text"></w2:column>
						<w2:column id="sInfo" name="sInfo" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
				
				<w2:dataMap baseNode="map" id="TrtyCmpsContAmtLimitVo">
					<w2:keyInfo>
						<w2:key id="gdCd" name="gdCd" dataType="text"></w2:key>
						<w2:key id="gnrzCd" name="gnrzCd" dataType="text"></w2:key>
						<w2:key id="planCd" name="planCd" dataType="text"></w2:key>
						<w2:key id="ssrtDate" name="ssrtDate" dataType="text"></w2:key>
						<w2:key id="trtyCd" name="trtyCd" dataType="text"></w2:key>
						<w2:key id="trtyInsAmt" name="trtyInsAmt" dataType="text"></w2:key>
					</w2:keyInfo>
				</w2:dataMap>
				<w2:dataList baseNode="list" id="TrtyCmpsContAmtLimitDtalVo" repeatNode="map">
					<w2:columnInfo>
						<w2:column id="amtAftrPrgp" name="amtAftrPrgp" dataType="text"></w2:column>
						<w2:column id="amtSpclGu" name="amtSpclGu" dataType="text"></w2:column>
						<w2:column id="bosangAmt" name="bosangAmt" dataType="text"></w2:column>
						<w2:column id="calcStnd" name="calcStnd" dataType="text"></w2:column>
						<w2:column id="connCvrgeCd" name="connCvrgeCd" dataType="text"></w2:column>
						<w2:column id="connCvrgeCd1" name="connCvrgeCd1" dataType="text"></w2:column>
						<w2:column id="conts" name="conts" dataType="text"></w2:column>
						<w2:column id="cvrgeCd" name="cvrgeCd" dataType="text"></w2:column>
						<w2:column id="cvrgeName" name="cvrgeName" dataType="text"></w2:column>
						<w2:column id="pymStndSpec" name="pymStndSpec" dataType="text"></w2:column>
						<w2:column id="seqno" name="seqno" dataType="text"></w2:column>
						<w2:column id="stndVarb" name="stndVarb" dataType="text"></w2:column>
						<w2:column id="stndVarb1" name="stndVarb1" dataType="text"></w2:column>
						<w2:column id="trtyCd" name="trtyCd" dataType="text"></w2:column>
						<w2:column id="trtyName" name="trtyName" dataType="text"></w2:column>
						<w2:column id="unit" name="unit" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>

				<w2:linkedDataList id="DsWs_TrtyTerm_Link" bind="DsWs_TrtyTerm">
					<w2:condition type="filter"><![CDATA[sTrtyCd==ref('data:Ds_Trty.sTrtyCd')]]></w2:condition>
					<w2:condition type="sort"><![CDATA[]]></w2:condition>
				</w2:linkedDataList>
				<w2:linkedDataList id="DsWs_TrtyTerm_1_Link" bind="DsWs_TrtyTerm">
					<w2:condition type="filter"><![CDATA[nInsurTermCd == ref('data:Ds_Trty.sInsurTermCd') && sTrtyCd == ref('data:Ds_Trty.sTrtyCd')]]></w2:condition>
					<w2:condition type="sort"><![CDATA[]]></w2:condition>
				</w2:linkedDataList>
				<w2:linkedDataList id="Dsws_InsAmt_Link" bind="Dsws_InsAmt"> 
					<w2:condition type="filter"><![CDATA[sTrtyCd==ref('data:Ds_Trty.sTrtyCd')]]></w2:condition>
					<w2:condition type="sort"><![CDATA[]]></w2:condition>
				</w2:linkedDataList>
			</w2:dataCollection>
			<w2:workflowCollection>
			</w2:workflowCollection>
			
		</xf:model>		
		<script src="/cm/js/wconv.js"/>
		<script src="/cm/js/convertJs/Global_Script.js"/>
		<script src="/cm/js/convertJs/comm_Webservice.js"/>
		<script src="/cm/js/convertJs/NewGen_Script.js"/>
		<script src="/cm/js/convertJs/LongTerm_Script.js"/>
		<script src="/cm/js/convertJs/Marine_Script.js"/>
		<script src="/cm/js/convertJs/GrdPassword_Script.js"/>
		<script type="javascript"><![CDATA[
var sGdCd;
//상품코드
var sGnrzCd;
//종형코드
var sPlanCd = "00";
//플랜코드
var nMaxPrem = 0;
//최대보험료
var nMinPrem = 0;
//최소보험료
var sInrpsCd_Backup;
//피보험자번호 Backup
var drive_Backup;
//운전용도 Backup
var oldPlanNo = "";
//읽어온청약번호
var runOnCellPosChanged = true;
var oldSsrtDate = "";
var except = "";
var nInrpsAgeOld = "";
//변경전 나이 보관
var nInrpsAgeNew = "";
//변경후 나이 보관
//체크 플래그
var modifyFlag = false;
//화면값중 기존값에서 변경된 경우 체크
var CalcPremFlag = false;
//보험료 계산 체크
var scmb_plan = false;
//프랜변경 flag

//주민번호 마스킹 처리 여부
var sInrpsCd_DspMask_Chk = "";

/* 
var sInrpsInfoChg = false;	//피보험자주민번호변경 flag
var sInrpsCdOld = []; //변경전 피보험자주민번호 보관
*/
//---------------------------------------------------------------------------
// function 명 : lfn_init()
// 내용        : 화면초기화
//---------------------------------------------------------------------------
scwin.fn_init = function() { //완료
	//div_Group.Visible = false;
	/*
    if (parent.sSimpleYn != "Y") {
        if (Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "20") {
            chk_sPsnGroupFlgcd.setValue(true);
            div_Group.show();
        } else {
            chk_sPsnGroupFlgcd.setValue(false);
            div_Group.hide();
        }
    }
    */

    if (parent.sSimpleYn != "Y") {
    	if (Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "20") {
            chk_sPsnGroupFlgcd.setValue(true);
            btn_chk_sPsnGroupFlgcd.show();
        } else {
            chk_sPsnGroupFlgcd.setValue(false);
            btn_chk_sPsnGroupFlgcd.hide();
        }
    } else {
    	
    }

    //피보험자번호 백업
    //sInrpsCd_Backup = Ds_Pibo.getCellData(0,"sInrpsCd");
    scwin.lfn_backup_Pibo();
}

//---------------------------------------------------------------------------
// function 명 : C010_Div1_OnLoadCompleted(obj)
// 내용        : 화면오픈시 처리
//---------------------------------------------------------------------------
scwin.init = function() {
	//초기 공백 한줄로 시작하는 DataList
    Ds_LTIDA00.setJSON([{"sPlanNo" : ""}]);
    Ds_LTIEA10.setJSON([{"sGroupCrAdmNo" : ""}]);
    util.setRowPosition(Ds_LTIDA00, 0);
    util.setRowPosition(Ds_LTIEA10, 0);
    
    if (parent.sSimpleYn == "Y") {
    	btn_Moni.hide();
    }

	//LinkDataList 정보 세팅 동적으로다시 생성될경우 사용.
	util.setLinkedCondition(DsWs_TrtyTerm_Link,		"sTrtyCd==ref('data:Ds_Trty.sTrtyCd')");
	util.setLinkedCondition(DsWs_TrtyTerm_1_Link,	"nInsurTermCd == ref('data:Ds_Trty.sInsurTermCd') && sTrtyCd == ref('data:Ds_Trty.sTrtyCd')");
	util.setLinkedCondition(Dsws_InsAmt_Link,		"sTrtyCd==ref('data:Ds_Trty.sTrtyCd')");

    grd_sTrty.setColumnVisible("colExpr",		false);
    grd_sTrty.setColumnVisible("TrtyFlagCd",	false);
    grd_sTrty.setColumnVisible("sScrnIndcYn",	false);
    grd_sTrty.setColumnVisible("sTrtyCd",		false);
    grd_sTrty.setColumnVisible("nExptGrntBussPrem",		false);

    $("#grd_sTrty_column1").html("<img src='/cm/images/chkoff.jpg'/>");

	//현재화면에서 미사용버튼 숨기기 처리
	btnAddPibo.hide();
	btnDelPibo.hide();
	Btn_LoadFile.hide();
	btn_ExptPrem.hide();
	Btn_carList.hide();
	Btn_goChung.hide();
};

//---------------------------------------------------------------------------
// function 명 : lfn_Moni
// 내용        : 모니터링 클릭시 이벤트 처리
//---------------------------------------------------------------------------
scwin.lfn_Moni = function(obj) { //완료

	parent.scwin.lfn_RtnAmt();

	var promise = Promise.resolve();
	
   	promise = promise.then(function(rtnVal) {
		var indata = new Object();
		indata.sPlanNo = parent.medt_PlanNo.getValue();
		indata.sFlag = "c";
		var popInfo = {"width":737,
					   "height":471,
					   "indata":indata,
					   "callback"  : "",
					   "title"     : "모니터링"
					  };
		return wprom.popupOpen("/ui/cbsc/CBSC051P.xml", popInfo);//모니터링
	});
	promise = promise.then(function(rv) {
		var rtnValue = wprom.getReturnData();
		if (rtnValue != ""){
			
		}
	});
	return promise;	    
};

//---------------------------------------------------------------------------
// function 명 : lfn_sInrpsCd_DspMask
// 내용        : 대리점의 경우 주민번호 마스킹 처리
//---------------------------------------------------------------------------
scwin.lfn_sInrpsCd_DspMask = function(rtv) { //완료
	//마스킹 처리 필요시 sInrpsCd_DspMask_Chk 값을 Y로 변경
	var rtv = rtv + "";
	if (sInrpsCd_DspMask_Chk == "Y") {
		if (util.isNull(rtv)) {
			rtv = "-";
		} else {
			rtv = rtv.substr(0,6) + "-" + rtv.substr(6,1) + "******";
		}
	} else {
		rtv = rtv.substr(0,6) + "-" + rtv.substr(6,7)
	}
	return rtv;
}

//---------------------------------------------------------------------------
// function 명 : lfn_mkGrdPassWord()
// 내용        : 그리드 패스워드 처리
//---------------------------------------------------------------------------
scwin.lfn_mkGrdPassWord = function() { //완료 (마시킹 처리로 대체 : scwin.lfn_sInrpsCd_DspMask)

	sInrpsCd_DspMask_Chk = "Y";

	return "";
	
	var ds_columnName = ["sInrpsCd"];
	var grd_idx = [2];
	var grd_cellSize;
	
	if(parent.sSimpleYn == "Y"){
		grd_cellSize = [128];
	}
	
	var edt_event = "lfn_Edt_Mask_OnKillFocus";
	
	var grd_mask = ["######-#******"];
	gfn_mkGrdPassWord(
					Grd_Pibo		//type = object , 그리드 Object
					,Ds_Pibo		//type = object , 데이터셋 Object
					,ds_columnName	//type = array , 실제 값이 보관될 데이터셋 컬럼명
					,grd_idx		//type = array , "*" 표시 할 그리드 인덱스
					,grd_mask		//type = array , "*" 표시 될 셀의 마스크 
					,grd_cellSize	//type = array , "*" 표시 될 셀의 사이즈(생략 가능)
					,edt_event		//type = String , killfocus 이벤트 함수(생략가능)
					);
}

//---------------------------------------------------------------------------
// function 명 : lfn_Edt_Mask_OnKillFocus()
// 내용        : 주민번호 입력 후 킬포커스
//---------------------------------------------------------------------------
scwin.lfn_Edt_Mask_OnKillFocus = function(rowIndex) { //완료

    var nRow = rowIndex;
    
    if (Ds_Pibo.getCellData(nRow, "sInrpsCd").length > 0 && scwin.lfn_ChkPersonID(Ds_Pibo.getCellData(nRow, "sInrpsCd"))) {
        //보험나이계산
        Ds_Pibo.setCellData(nRow, "nInrpsAge", gfn_getInsAge(Ds_Pibo.getCellData(nRow, "sInrpsCd"), cal_sSsrtDate.getValue()));
        //Grd_Pibo.SetCellProp("body", 5, "edit", "normal");
        Ds_Pibo_BackUp.setCellData(nRow, "sInrpsCd", Ds_Pibo.getCellData(nRow, "sInrpsCd"));
    } else {
        //Ds_Pibo.FireEvent = false;
        var dsListEvArray = util.getDataListEvent(Ds_Pibo);
		util.removeAllDataListEvent(Ds_Pibo);
        wprom.alert("주민번호를 정확히 입력해 주세요.");
        Ds_Pibo.setCellData(nRow, "nInrpsAge", "");
        Ds_Pibo.setCellData(nRow, "sInrpsName", "");
        util.setDataListEvent(Ds_Pibo, dsListEvArray);
        //Grd_Pibo.SetCellProp("body", 5, "edit", "none");
        //Ds_Pibo.FireEvent = true;
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_sel_dsp()
// 내용        : 체크박스 readonly 속성을 위해 이미지로 변경
//---------------------------------------------------------------------------
scwin.lfn_sel_dsp = function(dspV) { //완료
	if (dspV == 1) {
		return "<img src='/cm/images/chkon.jpg'>";
	} else {
		return "<img src='/cm/images/chkoff.jpg'>";
	}
}

//---------------------------------------------------------------------------
// function 명 : lfn_addRow
// 내용        : 피보험자 추가
//---------------------------------------------------------------------------
var chkMedical = true;

scwin.lfn_addRow = function(nSeq) { //완료

    //최대피보험목적수 <= 피보험자일때  추가금지
    if (wconv.length(DsWs_PrdAttr.getCellData(0, "MaxInsrdObjctCt")) > 1) {
        if (parseInt(DsWs_PrdAttr.getCellData(0, "MaxInsrdObjctCt")) <= Ds_Pibo.getRowCount()) {
            wprom.alert("피보험자 " + parseInt(DsWs_PrdAttr.getCellData(0, "MaxInsrdObjctCt")) + "명까지 가입 가능한 상품입니다.");
            return false;
        }
    }

    //청약일이 입력되어 있어야 한다.
    if (util.isNull(cal_sSsrtDate.getValue())) {
        wprom.alert("청약일을 입력해 주세요");
        util.focus(parent.cal_sSsrtDate);
        return false;
    }
    if (Ds_Trty.getRowCount() > 0) {
        chkMedical = false;
		var validFlag = scwin.Trty_ValidationCheck(Ds_Trty);
        chkMedical = true;
        if (validFlag == true) {
            return;
        }
    }

    //공통코드dataset에 코드가 없으면 조회해 온다.
    if (DsWs_FlagCd.getRowCount() == 0) {
        gfn_getCommonCodes_OLD("DsWs_FlagCd DsWs_Drive DsWs_Grade DsWs_CrtorRelnCd", "CcndFlagCd DrivFlagCd JobGradCd CrtorRelnCd", "cmb_codeHidden cmb_codeHidden cmb_codeHidden cmb_codeHidden", "N N N N");
        util.gridNodeSetResetAll(Grd_Pibo);
        util.gridNodeSetResetAll(grd_sTrty);
    }

    if (DsWs_Drive.getRowCount() > 0) {
        util.removeRow(DsWs_Drive, 2); //비운전자 구분 삭제 (LDH 2012.07.18)
    }

    //Ds_Pibo.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Pibo);
    util.removeAllDataListEvent(Ds_Pibo);

    var nCurrow = -1;
    if (nSeq >= 0) {
        util.insertRow(Ds_Pibo, nSeq);
        util.insertRow(Ds_Pibo_BackUp, nSeq);
        nCurrow = nSeq;
    } else {
        util.appendRow(Ds_Pibo); // Dataset에 빈 Record한줄 추가
        util.appendRow(Ds_Pibo_BackUp);
        nCurrow = Ds_Pibo.getTotalRow() - 1;
    }

    Ds_Pibo.setCellData(nCurrow, "sel", "1");
    Ds_Pibo.setCellData(nCurrow, "sInrpsFlagCd", "1");
    Ds_Pibo.setCellData(nCurrow, "sCrtorRelnCd", "10"); //피보험자관계(본인)
    Ds_Pibo.setCellData(nCurrow, "sGroupInrpsDrveFlagCd", "1");
    Ds_Pibo.setCellData(nCurrow, "sPftbpInrpsRelnCd", "99");
    Ds_Pibo.setCellData(nCurrow, "sPftbpName", "법정상속인");
    Ds_Pibo.setCellData(nCurrow, "sXcptPftbpInrpsRelnCd", "");
    //Ds_Pibo.SetColumn(nCurrow, "sXcptPftbpName", "선택");		// 장기보험고도화-사망외수익자
    Ds_Pibo.setCellData(nCurrow, "sXcptPftbpName", ""); // 장기보험고도화-사망외수익자
    Ds_Pibo.setCellData(nCurrow, "sPsnInfoOferAgreYn", "N");
    Ds_Pibo.setCellData(nCurrow, "sMNumCrInsAgreYn", "N");
    Ds_Pibo.setCellData(nCurrow, "nInrpsSeqno", (nCurrow + 1) + "");
    Ds_Pibo.setCellData(nCurrow, "sApplPlanCd", Ds_Pibo.getCellData(0, "sApplPlanCd"));
    Ds_Pibo.setCellData(nCurrow, "sApplPlanName", Ds_Pibo.getCellData(0, "sApplPlanName"));
    if (nCurrow == 0) {
        Ds_Pibo.setCellData(nCurrow, "sMinsrRelnCd", "10");
    }
    Ds_Pibo_BackUp.setCellData(nCurrow, "MediFlag", "N");
    Ds_Pibo_BackUp.setCellData(nCurrow, "fixFlag", "N");

    //현재 선택된 체크박스를 제외한 체크박스는 값을 0으로 바꾼다.
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        if (i != nCurrow && Ds_Pibo.getCellData(i, "sel") == "1") {
            Ds_Pibo.setCellData(i, "sel", "0");
        }
    }
    Ds_Pibo.setCellData(nCurrow, "sel", "1");

    //특약리스트를 한셋트 추가함.
    /*grd_sTrty.Redraw = false;
    var nRowPos = Ds_Trty.GetRowCount();
    for(var i=0; i < Ds_Trty_Set.GetRowCount(); i++){
    	Ds_Trty.AddRow();
    	Ds_Trty.CopyRow(nRowPos,"Ds_Trty_Set",i);
    	Ds_Trty.SetColumn(nRowPos,"nPsnPrprtGroupSeqno",(nCurrow+1));
    	nRowPos++;
    }
    lfn_changeTrty();
    grd_sTrty.Redraw = true;
    */

    scwin.lfn_changeTrty();

    //Grd_Pibo.focus();
    //Grd_Pibo.wconv.moveToNextCell();
    //Grd_Pibo.wconv.moveToNextCell();
    var focusFunction = function() {
    	//그리드 OnCellPosChanged Event를 발생한다.
    	Grd_Pibo_OnCellPosChanged_EventYn = "Y";
    	Grd_Pibo.setFocusedCell(Ds_Pibo.getRowPosition(), 2, true);
    }
    setTimeout(focusFunction, 500);
    
    util.setDataListEvent(Ds_Pibo, dsListEvArray);
    //Ds_Pibo.FireEvent = true;
};

/*-----------------------------------
// function 명 : Trty_ValidationCheck
// 내용        : 특약정보 체크 여부 
-----------------------------------*/
scwin.Trty_ValidationCheck = function(obj) { //완료

    var validFlag = true;
    btn_Medical.setDisabled(true);
    
    var chkCnt = 0; // 장기보험고도화 - 특약 체크개수
    
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasPronCmpsTrty", "N"); //실손가입 확인
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasFxamtCmps", "N"); //정액가입 확인
    if (obj.getRowCount() > 0) {
        for (var i = 0; i < obj.getRowCount(); i++) {
            //trace(length(obj.getColumn(i, "sInsurTermCd"))+"==="+obj.getColumn(i, "sInsurTermCd")+"==="+obj.getColumn(i, "sPaymTermCd"));
            if (obj.getCellData(i, "chk") == "1") {
                //보험기간코드
                if (wconv.length(obj.getCellData(i, "sInsurTermCd")) == 0) {
                    wprom.alert("특약 보험기간을 선택하세요");
                    /*
                    grd_sTrty.focus();
                    Ds_Trty.Row = i;
                    grd_sTrty.setFocusedCell(3);
                    grd_sTrty.wconv.showEditor();
                    */
                    validFlag = true;
                    break;
                }

                //lfn_CompChangeCheck(obj, i, "sInsurTermCd");						
                //납입기간코드
                if (wconv.length(obj.getCellData(i, "sPaymTermCd")) == 0) {
                    wprom.alert("특약 납입기간을 선택하세요");
                    /*
                    grd_sTrty.focus();
                    Ds_Trty.Row = i;
                    grd_sTrty.setFocusedCell(4);
                    grd_sTrty.wconv.showEditor();
                    */
                    validFlag = true;
                    validFlag = true;
                    break;
                }

                //lfn_CompChangeCheck(obj, i, "sPaymTermCd");	
                //특약가입금액
                if (wconv.length(obj.getCellData(i, "nTrtyInsAmt")) == 0) {
                    wprom.alert("특약 가입금액을 선택하세요");
                    /*
                    grd_sTrty.focus();
                    Ds_Trty.Row = i;
                    grd_sTrty.setFocusedCell(5);
                    grd_sTrty.wconv.showEditor();
                    */
                    validFlag = true;
                    validFlag = true;
                    break;
                }

                //lfn_CompChangeCheck(obj, i, "nTrtyInsAmt");					
                /*				
                				//보장보험료
                				if(length(obj.getColumn(i, "nGrntPrem")) == 0){
                					alert("보험료 산출을 해주세요");
                					validFlag = true; 
                					break;
                				}										
                */
                //2011.05.13 정액담보가입 또는 의료비가입시 사전조회 활성화
                // 사전조회 무조건 활성화. (2013.01.31) 다시 체크 
                if (Ds_Trty.getCellData(i, "PronCmpsTrtyYn") == "Y" || Ds_Trty.getCellData(i, "FxamtCmpsFlag") == "Y") {
                    btn_Medical.setDisabled(false); //사전조회버튼 활성화
                }


                //2011.05.13 실손담보가입시 가입확인(사전조회시 사용)
                if (Ds_Trty.getCellData(i, "PronCmpsTrtyYn") == "Y") {
                    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasPronCmpsTrty", "Y"); //실손가입 확인
                }


                //2011.05.13 정액담보가입시 가입확인(사전조회시 사용)
                if (Ds_Trty.getCellData(i, "FxamtCmpsFlag") == "Y") {
                    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasFxamtCmps", "Y"); //사전조회버튼 활성화
                }


                //특약변경여부 체크
                validFlag = false;
                //break;	
                chkCnt++; // 장기보험고도화 - 특약 체크개수
            }
            scwin.lfn_Trty_CompChangeCheck(Ds_Trty, Ds_Trty_Backup, i);
        }
    }
    if (chkCnt == 0 && DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {
        // 업무보고서분류코드-7:연금
        // 연금 적립만 존재해서 정상처리 위해 validFlag 세팅
        validFlag = false;
    }


    //trace("Ds_Pibo_BackUp:" + Ds_Pibo_BackUp.SaveXML());
    if (chkMedical == true && except != "calPrem" && except != "allPrem") {
        for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
            //trace("hasPronCmpsTrty:"+Ds_Pibo_BackUp.getColumn(i, "hasPronCmpsTrty"));//실손가입 확인
            //trace("MediFlag:"+Ds_Pibo_BackUp.getColumn(i, "MediFlag"));
            //trace("hasFxamtCmps:"+Ds_Pibo_BackUp.getColumn(i, "hasFxamtCmps")); //정액담보 가입 확인
            //trace("fixFlag:"+Ds_Pibo_BackUp.getColumn(i, "fixFlag"));
            if ((Ds_Pibo_BackUp.getCellData(i, "hasPronCmpsTrty") == "Y" && Ds_Pibo_BackUp.getCellData(i, "MediFlag") == "N") 
            		|| (Ds_Pibo_BackUp.getCellData(i, "hasFxamtCmps") == "Y" && Ds_Pibo_BackUp.getCellData(i, "fixFlag") == "N")) {
                if (parent.sScanObjtYn == "Y") {
                    if (scwin.lfn_checkMedical(i) == false) {
                        validFlag = true;
                        return validFlag;
                    }
                }
                wprom.alert(Ds_Pibo.getCellData(i, "sInrpsName") + "님의 보험계약정보 사전조회를 실행하십시오.");
                btn_Medical.focus();
                validFlag = true;
                return validFlag;
            }
        }
    }
    return validFlag;
};



/*-----------------------------------
// function 명 : lfn_changeTrty
// 내용        : 피보험자의 해당 특약으로 필터링
-----------------------------------*/
scwin.lfn_changeTrty = function() { //완료

    //Ds_Trty.FireEvent = false; //이벤트 발생이 안되도록 셋팅
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);

    var nFindRow = wconv.findRow(Ds_Pibo, "sel", "1");
    /*
    wconv.filter(Ds_Trty,        "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno") + "'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno") + "'");
    */
    var funcFilter1 = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
    var funcFilter2 = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
    Ds_Trty.clearFilter();
    Ds_Trty_Backup.clearFilter();
    Ds_Trty.setColumnFilter       ({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter1, "condition":"and"});
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter2, "condition":"and"});

    //일시납 납입기간에 따른 납입주기 세팅
    //lfn_PaymCyclSet();	
    //플랜,납입주기,납만 화면 활성화/비활성화
    scwin.lfn_PlanEnable(nFindRow);

    /*
    	//보험기간,가입금액 초기값 세팅
    	lfn_InsurTermInit();		

    	//특약관계체크
    	lfn_TrtyList_Relation_Check();
    		
    	for(var i=0 ; i < Ds_Trty.GetRowCount() ; i++){
    		//2011.05.13 정액담보가입 또는 의료비가입시 사전조회 활성화
    		if (ds_Trty.Getcolumn(i, "PronCmpsTrtyYn") == "Y" || ds_Trty.Getcolumn(i, "FxamtCmpsFlag") == "Y"){							
    			btn_Medical.Enable = true;//사전조회버튼 활성화
    		}
    		
    		//2011.05.13 실손담보가입시 가입확인(사전조회시 사용)
    		if (ds_Trty.Getcolumn(i, "PronCmpsTrtyYn") == "Y"){							
    			Ds_Pibo_BackUp.setColumn(Ds_Pibo.FindRow("sel","1"), "hasPronCmpsTrty","Y"); //실손가입 확인
    		}
    		
    		//2011.05.13 정액담보가입시 가입확인(사전조회시 사용)
    		if (ds_Trty.Getcolumn(i, "FxamtCmpsFlag") == "Y"){							
    			Ds_Pibo_BackUp.setColumn(Ds_Pibo.FindRow("sel","1"), "hasFxamtCmps","Y");//사전조회버튼 활성화
    		}
    	}
    */
    //Ds_Trty.FireEvent = true; //이벤트 발생이 안되도록 셋팅
    util.setDataListEvent(Ds_Trty, dsListEvArray);
};


/*-----------------------------------
// function 명 : lfn_PlanEnable
// 내용        : 플랜,납입주기,납만 화면 활성화/비활성화
-----------------------------------*/
scwin.lfn_PlanEnable = function(nRow) { //완료

    //주피보험자가 아닌경우 청약,시작일,납입주기,플랜콤포넌트 비활성화 처리
    var cbITvalue = cmb_InsurTermPaymTerm.getValue();
    var exArr; // = cmb_InsurTermPaymTerm.getValue().split("/");  //wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sPaymTermCd = ""; // = exArr[1];
    
    if (!util.isNull(cbITvalue)) {
    	exArr = cbITvalue.split("/");
    	if (exArr.length >= 2) {
    		sPaymTermCd = exArr[1];
    	}
    }

    if (nRow == 0) {
        //cal_sSsrtDate.Enable = true;
        //cal_sInsurStrtdate.Enable = true;
        //cmb_PaymCycl.Enable = true;
        cmb_Plan.setDisabled(false);
        cmb_InsurTermPaymTerm.setDisabled(false);
        if (sPaymTermCd == "000") {
            cmb_PaymCycl.setDisabled(true);
        } else {
            cmb_PaymCycl.setDisabled(false);
        }
    } else {
        //cal_sSsrtDate.Enable = false;
        //cal_sInsurStrtdate.Enable = false;
        cmb_PaymCycl.setDisabled(true);
        cmb_Plan.setDisabled(true);
        cmb_InsurTermPaymTerm.setDisabled(true); //일괄적용을 한경우 버튼 비활성화 처리
        //if(AllCalcPremFlag){
        //	btn_AllCalPrem.Enable = false;
        //}				
    }
};




//---------------------------------------------------------------------------
// function 명 : chk_sPsnGroupFlgcd_OnClick()
// 내용        : 단체취급체크시 화면처리
//---------------------------------------------------------------------------
scwin.chk_sPsnGroupFlgcd_OnClick = function(strValue) { //완료
    if ((Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "20" && strValue == "0") || 
        (Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "10" && strValue == "1")) {
        scwin.fn_setRule(parent.edt_sGdcd.getValue());
    }
    if (strValue == "1") {
        btn_chk_sPsnGroupFlgcd.show();
        Ds_LTIDA00.setCellData(0, "sPsnGroupFlgcd", "20");
    } else {
        btn_chk_sPsnGroupFlgcd.hide();
        Ds_LTIDA00.setCellData(0, "sPsnGroupFlgcd", "10");
        wconv.clear(Ds_LTIEA10);
    }
};


//---------------------------------------------------------------------------
// function 명 : setRule()
// 내용        : 상품선택시 납입주기, 플랜사항조회
//---------------------------------------------------------------------------
scwin.fn_setRule = function(prodCd) { //완료

    nMaxPrem = "";
    Ds_LTIDA00.setCellData(0, "sGdCd", prodCd); //상품코드세팅
    Ds_LTIDA00.setCellData(0, "sGnrzCd", parent.edt_sGnrzCd.getValue()); //종형코드세팅
    if (Ds_Pibo.getCellData(0, "sel") != "1") {
        //해당 피보험자로 선택 시킨 후 조회
        scwin.Grd_Pibo_OnCellPosChanged(0, 0, 0, -1, "Y"); //사용자호출 Y
    }
    sGdCd = prodCd;

    if (!util.isNull(sGdCd)) {
    
    	wconv.clear(DS_TrtyCmpsContAmtLimitInfo);
    
    	//납입주기조회
        wconv.clear(DsWs_PaymCycl);
        //플랜사항조회
        wconv.clear(DsWs_Plan);
        //특약사항조회
        wconv.clear(DsWs_Trty);
        wconv.clear(Ds_Trty_Backup); //특약 백업용 초기화		
        wconv.clear(DsWs_PrdAttr); //상품속성 초기화
        wconv.clear(DsWs_BascTrty); //대표특약 초기화
        wconv.clear(DsWs_AnntOpnAgeCd); // 연금개시나이 초기화
        wconv.clear(DsWs_AnntPymTermCd); // 연금지급기간 초기화
        wconv.clear(DsWs_AnntPymTypeCd); // 연금지급형태 초기화
        wconv.clear(DsWs_AnntPymCyclCd); // 연금지급주기 초기화
	
     	var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB022Task", "getAnntCommCode", "", "");
		transObj.setUrl("/contract/CBSC075MController.do");
		transObj.setId("DOBJ_Rule");
		transObj.setParam("gUserIP", util.getGdsValue("gUserIP")); // 테스트용
		transObj.setParam("sFlagCd", "1");
		transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); // 상품코드
		transObj.setParam("sStndDate", cal_sSsrtDate.getValue()); // 청약일
		transObj.setParam("sPlanCd", sPlanCd); // 플랜코드
		transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); // 종형코드
		transObj.setParam("sResno", Ds_Pibo.getCellData(0, "sInrpsCd")); // 주민번호 
		//gfn_SetParam(MethodObj, "sDrivFlagCd", "1");//Ds_Pibo.getCellData(0, "sDrveFlagCd"));	// 주민번호
		transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(0, "sDrveFlagCd")); // 운전용도 
		if (util.getBoolean(chk_sPsnGroupFlgcd.getValue()) == true) {
			transObj.setParam("sPlanPsnGroupCd", "2");
		} else {
			transObj.setParam("sPlanPsnGroupCd", "1");
		}
		if (util.isNull(Ds_LTIDA00.getCellData(0, "sDoer"))) {
			//gfn_SetParam(MethodObj, "sDoer", util.getGdsValue("gDoer"));//취급자
            //gfn_SetParam(MethodObj, "sDoerUser", util.getGdsValue("gDoerUser"));//사용인
            transObj.setParam("sDoer", parent.edt_sDoer.getValue()); //취급자
            transObj.setParam("sDoerUser", parent.edt_sDoerUser.getValue()); //사용인
            transObj.setParam("sChnlCd", parent.sSaleChnl);
		} else {
			//gfn_SetParam(MethodObj, "sDoer", Ds_LTIDA00.getCellData(0,"sDoer"));//취급자
            //gfn_SetParam(MethodObj, "sDoerUser", Ds_LTIDA00.getCellData(0,"sDoerUser"));//사용인
            transObj.setParam("sDoer", parent.edt_sDoer.getValue()); //취급자
			transObj.setParam("sDoerUser", parent.edt_sDoerUser.getValue()); //사용인
			transObj.setParam("sChnlCd", Ds_LTIDA00.getCellData(0, "sSaleChnl"));
		}

		transObj.setXPath("//*/WARNING");
		transObj.addXPath("//hashtable/data[@hashkey='LTIDA00']/LTIDA00");   
		transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='paymCyclCdList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='MinsrReln']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='prdAttrList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='applPlanList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='multi']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='InsAmt']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='com_PaymTermCd']/vector/data/com_PaymTermCd");
		transObj.addXPath("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='BascList']/vector/data/LTIBA01");
		transObj.addXPath("//hashtable/data[@hashkey='AnntyOpnAgeList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='AnntyPymCyclList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='AnntyPymTypeList']/vector/data/multi");
		transObj.addXPath("//hashtable/data[@hashkey='lTIDA15List']/vector/data/LTIDA1511");
		
		transObj.setXPathDs();
		transObj.sync();
		transObj.send();
		//util.interfaceKey(_tranSync.result.serviceDs);

		util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");

	    if (DsWs_Warning.getRowCount() > 0) {
			wprom.alert(DsWs_Warning.getCellData(0, "msg"));
	    	return;
	    }
		
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='LTIDA00']/LTIDA00"), "DsWs_LTIDA00", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi"), "DsWs_InsurTermPaymTerm", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='paymCyclCdList']/vector/data/multi"), "DsWs_PaymCycl", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='MinsrReln']/vector/data/multi"), "DsWs_MinsrReln", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='prdAttrList']/vector/data/multi"), "DsWs_PrdAttr", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='applPlanList']/vector/data/multi"), "DsWs_Plan", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='multi']/vector/data/multi"), "DsWs_Trty", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsAmt']/vector/data/multi"), "Dsws_InsAmt", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='com_PaymTermCd']/vector/data/com_PaymTermCd"), "DsWs_Napgi", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi"), "DsWs_TrtyTerm", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='BascList']/vector/data/LTIBA01"), "DsWs_BascTrty", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyOpnAgeList']/vector/data/multi"), "DsWs_AnntOpnAgeCd", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi"), "DsWs_AnntPymTermCd", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyPymCyclList']/vector/data/multi"), "DsWs_AnntPymCyclCd", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyPymTypeList']/vector/data/multi"), "DsWs_AnntPymTypeCd", "Y");
		util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='lTIDA15List']/vector/data/LTIDA15"), "DsWs_LTIDA15", "Y");


        if (DsWs_PaymCycl.getRowCount() == 0) {
            wprom.alert("납입주기 조회건이 없습니다.");
        } else {
            //납입주기 선택옵션추가
            var insRow = util.insertRow(DsWs_PaymCycl, 0);
            DsWs_PaymCycl.setCellData(0, "sGdCd", "");
            DsWs_PaymCycl.setCellData(0, "sPaymCyclCd", "");
            DsWs_PaymCycl.setCellData(0, "sPaymCyclName", "- 선택 -");
            util.setCompBindRefresh("DsWs_PaymCycl");
            //cmb_PaymCycl.BindDataset = "Ds_LTIDA00";
            cmb_PaymCycl.setRef("data:Ds_LTIDA00.sPaymCyclCd");
            if (wconv.length(Ds_LTIDA00.getCellData(0, "sPaymCyclCd")) == 0) {
				cmb_PaymCycl.setSelectedIndex(1);
            }
        }
        
        if (DsWs_Trty.getRowCount() == 0) {
			wprom.alert("특약사항 조회건이 없습니다.");
		} else {
			/*  sInrpsCdOld 변수 미사용 확인 필요(k)
			sInrpsCdOld = []; //변경전 피보험자주민번호 보관
            //플랜 첫번째 세팅
            cmb_Plan.setSelectedIndex(0);
            for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
                Ds_Pibo.setCellData(i, "sApplPlanCd", cmb_Plan.getValue());
                Ds_Pibo.setCellData(i, "sApplPlanName", cmb_Plan.getValue()); //ldh
                //장기보험고도화 - 피보험자변경 여부 체크를 위한 주민번호 세팅
                sInrpsCdOld.push[Ds_Pibo.getCellData(i, "sInrpsCd")];
            }
            */
            
            // 보기납기 첫번째 세팅
            cmb_InsurTermPaymTerm.setSelectedIndex(0);
            // 일시납 납입기간에 따른 납입주기 세팅
            scwin.lfn_PaymCyclSet();
            
            //wconv.copy(Ds_Trty, "DsWs_Trty");
            wconv.clear(Ds_Trty);
            util.jSonDsCreate(DsWs_Trty.getAllJSON(), "Ds_Trty");
            util.setCompBindRefresh("Ds_Trty");

            // 테이블 필드도 추가한다.	
            scwin.lfn_TrtyDataSetSet();
            
            var inColInfo = [];
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sApplPlanCd"))) {
    			inColInfo.push(["sApplPlanCd","sApplPlanCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sApplPlanName"))) {
    			inColInfo.push(["sApplPlanName","sApplPlanName","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sFrstSaleChnlCd"))) {
    			inColInfo.push(["sFrstSaleChnlCd","sFrstSaleChnlCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sSaleChnl"))) {
    			inColInfo.push(["sSaleChnl","sSaleChnl","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sSaleChnlDtal"))) {
    			inColInfo.push(["sSaleChnlDtal","sSaleChnlDtal","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sGdTypeFlgCd"))) {
    			inColInfo.push(["sGdTypeFlgCd","sGdTypeFlgCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sInsType"))) {
    			inColInfo.push(["sInsType","sInsType","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sBunsMetdDocuClsfCd"))) {
    			inColInfo.push(["sBunsMetdDocuClsfCd","sBunsMetdDocuClsfCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sApplDclrRato"))) {
    			inColInfo.push(["sApplDclrRato","sApplDclrRato","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sGdFlgcd"))) {
    			inColInfo.push(["sGdFlgcd","sGdFlgcd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sDvdnFlagCd"))) {
    			inColInfo.push(["sDvdnFlagCd","sDvdnFlagCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sPpayAvaYn"))) {
    			inColInfo.push(["sPpayAvaYn","sPpayAvaYn","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sHsecFlagCd"))) {
    			inColInfo.push(["sHsecFlagCd","sHsecFlagCd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sPsnGroupFlgcd"))) {
    			inColInfo.push(["sPsnGroupFlgcd","sPsnGroupFlgcd","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sGroupCrAdmNo"))) {
    			inColInfo.push(["sGroupCrAdmNo","sGroupCrAdmNo","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("sBsmnRgstNo"))) {
    			inColInfo.push(["sBsmnRgstNo","sBsmnRgstNo","text"]);
    		};
    		if (util.isNull(Ds_LTIDA00.getColumnIndex("nMinPremRate"))) {
    			inColInfo.push(["nMinPremRate","nMinPremRate","text"]);
    		};
    		if (inColInfo.length > 0) {
    			util.insertColumn(Ds_LTIDA00, inColInfo);
    			util.setCompBindRefresh("Ds_LTIDA00");
    		}
            
            // 보험기간,가입금액 초기값 세팅
            scwin.lfn_InsurTermInit();

            // 피보험자 추가시 특약샛트를 넣어주기 위해 필요
            //wconv.copy(Ds_Trty_Set, "Ds_Trty");
            util.jSonDsCreate(Ds_Trty.getAllJSON(), "Ds_Trty_Set");
			util.setCompBindRefresh("Ds_Trty_Set");
			util.setRowPosition(Ds_Trty_Set, 0);

            // 특약중 화면출력특약만 화면에 보여줌
            var funcFilter = function(cellData, tmpParam, rowIdx) {
				if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
					return true;
				}
				return false;
			}
			Ds_Trty.clearFilter();
			Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
			var funcFilter = function(cellData, tmpParam, rowIdx) {
				if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
					return true;
				}
				return false;
			}
			Ds_Trty_Backup.clearFilter();
			Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
            //wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >== 0");
            //wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >== 0");
		}
		
		// 장기보험고도화-상품별 처리
        scwin.lfn_GdsDlng();
        if (parent.sSimpleYn != "Y") {
            if (DsWs_PrdAttr.getCellData(0, "GroupHndlGdYn") == "Y") {
                //chk_sPsnGroupFlgcd.show();
                //btn_chk_sPsnGroupFlgcd.show();
                chk_sPsnGroupFlgcd_group.show();
            } else {
                //chk_sPsnGroupFlgcd.hide();
                //btn_chk_sPsnGroupFlgcd.hide();
                chk_sPsnGroupFlgcd_group.hide();
            }
        }
		
		// 플랜에 따른 영업보험료변경가능여부가 N인경우 영업보험료 비활성화처리
        if (DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "sPremAmtChgYn") == "N") {
            medt_nBussPrem.setDisabled(true);
        } else {
            medt_nBussPrem.setDisabled(false);
        }

        // 특약데이터셋 변경시 이벤트처리를 위해 이벤트 정의함
        //eval(Ds_Trty_ID).OnColumnChanged = "lfn_Trty_OnColumnChanged";
        util.setBind(Ds_Trty, "oncelldatachange", "scwin.lfn_Trty_OnColumnChanged");
        modifyFlag = false; //화면값중 기존값에서 변경된 경우 체크
        // 특약관계체크
        scwin.lfn_TrtyList_Relation_Check();

		// 합계보험료쪽 INITIALIZE
        scwin.lfn_init_Prem();
        Ds_LTIDA00.setCellData(0, "sTaxPrfrYn", "N"); //세금우대사항 setting
        // 피보험자 추가버튼 활성화
        scwin.lfn_setBtnAddPibo(DsWs_PrdAttr);
        for (var i = 1; i < Ds_Pibo.getRowCount(); i++) {
            scwin.lfn_searchPiboTrty(cmb_Plan, i);
        }

        // 당사 자동차가입현황 버튼 활성화
        if (DsWs_PrdAttr.getCellData(0, "DrvrGdYn") == "Y") {
            Btn_carList.setDisabled(false);
        }


		// 세금우대 상품 버튼 활성화
        /*
		if (parent.sSimpleYn != "Y" && DsWs_PrdAttr.getCellData(0,"TaxPrfrGdYn") == "Y") {
			Tab_Req.Tab_Step2.cmb_sTaxPrfrYn.Enable = false;
			
			// 장기보험고도화 연금저축 세팅 추가
			if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {	// 업무보고서분류코드-7:연금
				Tab_Req.Tab_Step2.cmb_sTaxPrfrYn.Value = "C";	// C-36-연금저축
			}
		}
		*/
		
		// 세만기 표시 
        if (DsWs_Plan.getCellData(0, "sRenwlAvaYn") == "Y") {
        	/*
            Static29.hide();
            edt_insuredPaym.hide();
            Sta_Title1.show();
            edt_RenwlAva.show();
            Sta_Title1.Left = 584;
            edt_RenwlAva.Left = 693;
            */
            //$("#Static29").text("");
            Sta_Title1.show();
            //edt_RenwlAva.show(); // 갱신종료연령
        } else {
        	/*
            Static29.show();
            edt_insuredPaym.show();
            Sta_Title1.hide();
            edt_RenwlAva.hide();
            Sta_Title1.Left = 816;
            edt_RenwlAva.Left = 925;
            */
            //$("#Static29").text("보기/납기");
            Sta_Title1.hide();
            //edt_RenwlAva.hide(); // 갱신종료연령
        }
        parent.scwin.lfn_ThcpCarInsCrst(DsWs_PrdAttr);
    }
    
};



//---------------------------------------------------------------------------
// function 명 : lfn_backup_Pibo
// 내용        : 피보험자 백업
//---------------------------------------------------------------------------
scwin.lfn_backup_Pibo = function() { //완료
    wconv.clear(Ds_Pibo_BackUp);
    Ds_Pibo_BackUp.setJSON(Ds_Pibo.getAllJSON());
    for (var i = 0; i < Ds_Pibo_BackUp.getRowCount(); i++) {
        Ds_Pibo_BackUp.setCellData(i, "hasPronCmpsTrty", "N");
        Ds_Pibo_BackUp.setCellData(i, "hasFxamtCmps",    "N");
        Ds_Pibo_BackUp.setCellData(i, "MediFlag",        "N");
        Ds_Pibo_BackUp.setCellData(i, "fixFlag",         "N");
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_PaymCyclSet
// 내용        : 일시납 납입기간에 따른 납입주기 세팅
//---------------------------------------------------------------------------
scwin.lfn_PaymCyclSet = function() { //완료
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/");
    //var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];
    //일사납일겨우 납입주기를 일시납으로 변경
    if (sPaymTermCd == "000") {
        cmb_PaymCycl.setValue("99");
        cmb_PaymCycl.setDisabled(true);
        //wconv.filter(DsWs_PaymCycl, ("ToNumber(sPaymCyclCd) < 100"));
        var funcFilter = function(cellData, tmpParam, rowIdx) {
    		return ((Number(DsWs_PaymCycl.getCellData(rowIdx, "sPaymCyclCd")) < 100) ? true : false);
    	}
    	DsWs_PaymCycl.clearFilter();
    	DsWs_PaymCycl.setColumnFilter({"type":"func", "colIndex":"sPaymCyclCd", "key":funcFilter, "condition":"and"});
    } else {
        if (wconv.length(Ds_LTIDA00.getCellData(0, "sPaymCyclCd")) == 0 || Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "99") {
            cmb_PaymCycl.setSelectedIndex(1);
        }
        cmb_PaymCycl.setDisabled(false);
        //wconv.filter(DsWs_PaymCycl, ("ToNumber(sPaymCyclCd) < 99"));
        var funcFilter = function(cellData, tmpParam, rowIdx) {
    		return ((Number(DsWs_PaymCycl.getCellData(rowIdx, "sPaymCyclCd")) < 99) ? true : false);
    	}
    	DsWs_PaymCycl.clearFilter();
    	DsWs_PaymCycl.setColumnFilter({"type":"func", "colIndex":"sPaymCyclCd", "key":funcFilter, "condition":"and"});
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_InsurTermInit
// 내용        : 보험기간,가입금액 초기값 세팅
//---------------------------------------------------------------------------
scwin.lfn_InsurTermInit = function() { //완료
    /*
    	if (Ds_Trty.GetRowCount() > 0) {
    		//보험기간종료일자 setting
    		cal_sInsurEndDate.Value = lfn_endDate(cal_sInsurStrtdate.Value, Ds_Trty.getCellData(0, "sInsurTermCd"), Ds_Pibo.getCellData(0,"nInrpsAge"));

    		//보험기간/납입기간 세팅
    		Ds_LTIDA00.SetColumn(0, "sInsurTermCd", Ds_Trty.getCellData(0, "sInsurTermCd"));	//보험기간
    		Ds_LTIDA00.SetColumn(0, "sPaymTermCd", Ds_Trty.getCellData(0, "sPaymTermCd"));	//납입기간
    		Ds_LTIDA00.SetColumn(0, "sInsurTermPaymTermName",  grd_sTrty.GetCellText("Body", 0, 3)+"/"+grd_sTrty.GetCellText("Body", 0, 4));//보기납기
    	} 
    */
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/");
    var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];

    //보험기간종료일자 setting
    cal_sInsurEndDate.setValue(scwin.lfn_endDate(cal_sInsurStrtdate.getValue(), sInsurTermCd, Ds_Pibo.getCellData(0, "nInrpsAge")));

    //보험기간/납입기간 세팅
    Ds_LTIDA00.setCellData(0, "sInsurTermCd", sInsurTermCd); //보험기간
    Ds_LTIDA00.setCellData(0, "sPaymTermCd", sPaymTermCd); //납입기간
    Ds_LTIDA00.setCellData(0, "sInsurTermPaymTermName", cmb_InsurTermPaymTerm.getValue()); // 보기납기
    scwin.lfn_TrtyInsAmtInit();
};

//---------------------------------------------------------------------------
// function 명 : lfn_endDate()
// 내용        : 개시일, 보험기간, 연령을 입력받아 종료일구하기
//---------------------------------------------------------------------------
scwin.lfn_endDate = function(startDate, sInsurTermCd, age) { //완료
    var insurTermCd_Gubun = wconv.substr(sInsurTermCd, 0, 1);
    var insurTermCd_Value = wconv.substr(sInsurTermCd, 1, 3);
    var endDate;
    var month;
    switch (insurTermCd_Gubun) {
        case "1":
            month = (parseInt(insurTermCd_Value) * 12);
            endDate = wconv.addMonth(startDate, month);
            break;
        case "2":
            month = (((parseInt(insurTermCd_Value) - parseInt(age))) * 12);
            endDate = wconv.addMonth(startDate, month);
            break;
        case "9":
            endDate = "99991231";
            break;
        default:
            break;
    }
    return endDate;
};

//---------------------------------------------------------------------------
// function 명 : lfn_TrtyInsAmtInit
// 내용        : 가입금액 초기값 세팅
//---------------------------------------------------------------------------
scwin.lfn_TrtyInsAmtInit = function(paramComp) { //완료
	var obj = {"getID" : function() {return ""}};
	if (!util.isNull(paramComp)) {
		obj = paramComp;
	}

	//보험기간 콤보 초기값세팅
    for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
        //가입금액 초기값세팅
        if ((obj.getID() == "cmb_Plan") || (wconv.length(util.getCellDataF(Ds_Trty, i, "nTrtyInsAmt")) == 0) || (obj.getID() == "redraw")) {
            for (var j = 0; j < Dsws_InsAmt.getRowCount(); j++) {
                if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == Dsws_InsAmt.getCellData(j, "sTrtyCd")) {
                    util.setCellDataF(Ds_Trty, i, "nTrtyInsAmt", Dsws_InsAmt.getCellData(j, "sCd"));
                    break;
                }
            }
        } else if (!util.isNull(paramComp)) {
            for (var j = 0; j < Dsws_InsAmt.getRowCount(); j++) {
                if ((wconv.length(util.getCellDataF(Ds_Trty, i, "nTrtyInsAmt")) == 0)) {
                    if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == Dsws_InsAmt.getCellData(j, "sTrtyCd")) {
                        util.setCellDataF(Ds_Trty, i, "nTrtyInsAmt", Dsws_InsAmt.getCellData(j, "sCd"));
                        break;
                    }
                }
            }
        }
    }

};

//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_Check
// 내용        : 특약간 관계 체크
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_Check = function(obj, nRow, sPkgCd, sExcluGroupCd1, sExcluGroupCd2, TrtyHnglAbbName, all, sRelTrtyCd, chk) { //완료
    //obj.FireEvent = false; //이벤트 발생이 안되도록 셋팅
    var dsListEvArray = util.getDataListEvent(obj);
	util.removeAllDataListEvent(obj);
    //trace(obj.ID+"==="+nRow+"==="+sPkgCd+"==="+sExcluGroupCd1+"==="+sExcluGroupCd2);
    //패키지체크
    scwin.lfn_Trty_Relation_Pkg(obj, sPkgCd, chk);

    //베타그룹체크
    scwin.lfn_Trty_Relation_sExcluGroupCd(nRow, all);

    //특약간 종속 체크
    scwin.lfn_Trty_Relation_Subo(obj, sRelTrtyCd, chk);

    //피보험자중 1명만 가입가능 특약체크
    scwin.lfn_Trty_Relation_OnlyOne(obj, nRow, "1");
    scwin.lfn_Trty_Drv_chk();
    //obj.FireEvent = true;
    util.setDataListEvent(obj, dsListEvArray);
};

//---------------------------------------------------------------------------
// function 명 : ds_Trty_OnColumnChanged()
// 내용        : 특약그리드 값 변경시 처리
//---------------------------------------------------------------------------
//scwin.ds_Trty_OnColumnChanged = function(obj, nRow, strColumnID, varOldValue, varNewValue, nPivotIndex) {
scwin.ds_Trty_OnColumnChanged = function(info) { //완료
	//rowIndex: 0, colID: "sel", oldValue: "", newValue: "1"
    switch (info.colID) {
        case "sInsurTermCd":
            //보험기간별 납입기간 조회
            scwin.lfn_PaymTerm();
            //보험기간종료일자 setting
            cal_sInsurEndDate.setValue(scwin.lfn_endDate(cal_sInsurStrtdate.getValue(), Ds_Trty.getCellData(info.rowIndex, "sInsurTermCd"), Ds_Pibo.getCellData(0, "sInrpsCd")));
            //ds_Trty.SetColumn(nRow, "sPaymTermCd", DsWs_PaymTerm.getCellData(0, "sPaymTermCd"));
            break;
        default:
            break;
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_Trty_OnColumnChanged
// 내용        : 특약그리드 값 변경시 처리
//---------------------------------------------------------------------------
var trtyCheckFlag = false;

//setColumn처리시 다시 반복해서 이벤트가 발생하므로 제어가 필요함
//scwin.lfn_Trty_OnColumnChanged = function(obj, nRow, strColumnID, varOldValue, varNewValue, nPivotIndex) {
scwin.lfn_Trty_OnColumnChanged = function(info) { //완료
	////rowIndex: 0, colID: "sel", oldValue: "", newValue: "1"
	var strColumnID = info.colID;
	var nRow = info.rowIndex;
	var varOldValue = info.oldValue;
	var varNewValue = info.newValue;
	var obj = Ds_Trty;
	
    switch (strColumnID) {
        case "chk":
            var sRelTrtyCd;
            //종속 특약셋팅.
            //Ds_Trty.FireEvent = false;
            var dsListEvArray = util.getDataListEvent(Ds_Trty);
			util.removeAllDataListEvent(Ds_Trty);
            //체크 해제시 해당row 초기화(보험료)
            //if (Ds_Trty.getCellData(nRow,"chk") == "0" && !trtyCheckFlag){
            //trtyCheckFlag = true;
            if (Ds_Trty.getCellData(nRow, "chk") == "0") {
                Ds_Trty.setCellData(nRow, "nGrntPrem", ""); //보장보험료
                Ds_Trty.setCellData(nRow, "nExptGrntBussPrem", ""); //예상보장영업보험료
                //trace("0일경우="+Ds_Trty.getCellData(nRow,"chk"));		
                sRelTrtyCd = Ds_Trty.getCellData(nRow, "sSubTrtyCd");

                //특약간 관계 체크
                scwin.lfn_Trty_Relation_Check(obj, nRow, Ds_Trty.getCellData(nRow, "sPkgCd"), Ds_Trty.getCellData(nRow, "sExcluGroupCd1"), Ds_Trty.getCellData(nRow, "sExcluGroupCd2"), Ds_Trty.getCellData(nRow, "TrtyHnglAbbName"), "", sRelTrtyCd, false);
            } else if (Ds_Trty.getCellData(nRow, "chk") == "1") {
                trtyCheckFlag = false;
                sRelTrtyCd = Ds_Trty.getCellData(nRow, "sMainTrtyCd");

                //특약간 관계 체크
                scwin.lfn_Trty_Relation_Check(obj, nRow, Ds_Trty.getCellData(nRow, "sPkgCd"), Ds_Trty.getCellData(nRow, "sExcluGroupCd1"), Ds_Trty.getCellData(nRow, "sExcluGroupCd2"), Ds_Trty.getCellData(nRow, "TrtyHnglAbbName"), "", sRelTrtyCd, true);

				//기존에 특약보험료가 존재하면 다시 원복한다.
                for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
                    if (util.getCellDataF(Ds_Trty, i, "chk") == "1" && util.getCellDataF(Ds_Trty, i, "nGrntPrem") == "") {
                        util.setCellDataF(Ds_Trty, i, "nGrntPrem", util.getCellDataF(Ds_Trty_Backup, i, "nGrntPrem")); //보장보험료
                        util.setCellDataF(Ds_Trty, i, "nExptGrntBussPrem", util.getCellDataF(Ds_Trty_Backup, i, "nExptGrntBussPrem")); //예상보장영업보험료
                    }
                }
            }
            //Ds_Trty.FireEvent = true;
            util.setDataListEvent(Ds_Trty, dsListEvArray);
            break;
        case "sPaymTermCd":
            if (DsWs_PaymTerm.getRowCount() == 0) {
                wprom.alert("보험기간을 선택하세요.");
            }
            //보험기간/납입기간 세팅
            if (nRow == 0) {
                Ds_LTIDA00.setCellData(0, "sInsurTermCd", Ds_Trty.getCellData(nRow, "sInsurTermCd")); //보험기간
                Ds_LTIDA00.setCellData(0, "sPaymTermCd", Ds_Trty.getCellData(nRow, "sPaymTermCd")); //납입기간
                Ds_LTIDA00.setCellData(0, "sInsurTermPaymTermName", grd_sTrty.getCellDisplayData("Body", nRow, 3) + "/" + grd_sTrty.getCellDisplayData("Body", nRow, 4)); //보기납기
            }
            break;
        default:
            break;
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_Subo
// 내용        :  특약간 종속 특약 체크
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_Subo = function(obj, sRelTrtyCd, chk) { //완료
    //특약간 종속 특약 체크
    for (var i = 0; i < obj.getRowCount(); i++) {
        if (obj.getCellData(i, "sTrtyCd") == sRelTrtyCd) {
            if (chk) {
                obj.setCellData(i, "chk", "1");
            } else {
                obj.setCellData(i, "chk", "0");
                obj.setCellData(i, "nGrntPrem", ""); //보장보험료
                obj.setCellData(i, "nExptGrntBussPrem", ""); //예상보장영업보험료				
            }
        }
    }
};

/*-----------------------------------
// function 명 : lfn_PaymTerm
// 내용        : 보험기간별 납입기간 조회
-----------------------------------*/
scwin.lfn_PaymTerm = function(obj, nRow, strColumnID) { //완료
    if (Ds_Pibo.getRowCount() == 0) {
        wprom.alert("피보험자를 입력하세요");
        //Ds_Trty.FireEvent = false; //이벤트 발생이 안되도록 셋팅
        var dsListEvArray = util.getDataListEvent(Ds_Trty);
		util.removeAllDataListEvent(Ds_Trty);
        Ds_Trty.setCellData(nRow, "sInsurTermCd", "");
        //Ds_Trty.FireEvent = true;
        util.setDataListEvent(Ds_Trty, dsListEvArray);
        return false;
    }
    wconv.clear(DsWs_PaymTerm);
    
    wconv.clear(Ds_Single);
    wconv.clear(Ds_InPayTerm);
    util.appendRow(Ds_Single);
    Ds_Single.setCellData(0, "sGdCd", sGdCd);
    Ds_Single.setCellData(0, "sStndDate", cal_sSsrtDate.getValue());
    Ds_Single.setCellData(0, "sResno", Ds_Pibo.getCellData(0, "sInrpsCd"));
    
    for (var i = 0; i < Ds_Trty.getRowcount(); i++) {
        if (Ds_Trty.getCellData(i, "chk") == true && Ds_Trty.getCellData(i, "sInsurTermCd") != "") {
            util.appendRow(Ds_InPayTerm);
            wconv.mi_copyRow("Ds_Trty", i, Ds_InPayTerm, Ds_InPayTerm.currow);
            Ds_InPayTerm.setCellData(Ds_InPayTerm.currow, "sStandardDate", cal_sSsrtDate.getValue());
        }
    }
    if (Ds_InPayTerm.getRowCount() == 0) {
        wprom.alert("특약사항을 선택하세요");
        return false;
    }

    var transObj = new callService("com.inswave.longterm.prd.rle.task.BCA730Task", "getPaymTermRule");
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("getPaymTermRule");
	transObj.setParam("sInrpsCd", Ds_Pibo.getCellData(info.rowIndex, "sInrpsCd"));
	transObj.setParam("sJobCd", info.newValue);
	transObj.setXPath("//*/WARNING");
	transObj.addXPath("//hashtable/data[@hashkey='multi']/vector/data/multi");
	/*
    //trace("\n---------------------------------------------------------------");
    //trace(Ds_single.SaveXML());
    //trace("\n---------------------------------------------------------------");
    //trace(Ds_InPayTerm.SaveXML());
    */
    transObj.addSingleData("single", "single", "Ds_Single");
    transObj.addVectorData("multi", "multi", "Ds_InPayTerm");
    transObj.setHashTable();
    transObj.sync();
	transObj.send();
	
    //trace("DOBJ_PaymTerm=="+replace(gfn_XmlEncoder(DOBJ_PaymTerm.Value), "><", ">\n<"));
    //trace("\n=====================1. DsWs_PaymTerm(call 후)===================================");
    //trace(DsWs_PaymTerm.SaveXML());
    
    util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");
    
    if (DsWs_Warning.getRowCount() != 0) {
        wprom.alert(DsWs_Warning.getCellData(0, "msg"));
        return;
    } else {
    	util.jSonDsCreate(_tranSync.getDsJson("multi"), "DsWs_PaymTerm", "Y");
        if (DsWs_PaymTerm.getRowCount() == 0) {
            wprom.alert("납입기간이 없습니다.");
        }
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_setBtnAddPibo
// 내용        : 피보험자 추가/삭제버튼 활성화
//---------------------------------------------------------------------------
scwin.lfn_setBtnAddPibo = function(dsPrdAttr) { //완료
    //최대피보험목적수가 > 0 일때 버튼 활성화
    if (parseInt(dsPrdAttr.getCellData(0, "MaxInsrdObjctCt")) > 1) {
        btnAddPibo.show();
        btnDelPibo.show();
        //grd_sTrty.SetCellProp("Body",3,"Edit","Combo"); //나중에 개별 수정 필요시(20120713)
        //grd_sTrty.SetCellProp("Body",4,"Edit","Combo"); //나중에 개별 수정 필요시(20120713)
        //Grd_Pibo.SetCellProp("Body", 7, "Edit", "Combo"); //피보험자 주피보험자와 관계
        Grd_Pibo.setColumnReadOnly(7, false);
    } else {
        btnAddPibo.hide();
        btnDelPibo.hide();
        /*
        grd_sTrty.SetCellProp("Body", 3, "Edit", "None");
        grd_sTrty.SetCellProp("Body", 4, "Edit", "None");
        Grd_Pibo.SetCellProp("Body", 7, "Edit", "None"); //피보험자 주피보험자와 관계
        */
        Grd_Pibo.setColumnReadOnly(3, true);
        Grd_Pibo.setColumnReadOnly(4, true);
        Grd_Pibo.setColumnReadOnly(7, true);
        for (var k = Ds_Pibo.getRowCount() - 1; k >= 1; k--) {
            scwin.lfn_deleteEtc(k, "Y");
            util.deleteRow(Ds_Pibo, k); // Dataset에 빈 Record한줄 추가
            util.deleteRow(Ds_Pibo_BackUp, k);
        }
    }
};




//---------------------------------------------------------------------------
// function 명 : Grd_PiboLIst_OnCellClick(obj,nRow,nCell,nX,nY,nPivotIndex)
// 내용        : 그리드에서 클릭시 처리
//---------------------------------------------------------------------------
var nPiboCell = 0;
var nPiboRow = 0;
scwin.Grd_PiboLIst_OnCellClick = function(nRow,nCell) { //완료
	console.log("Grd_PiboLIst_OnCellClick ==== nRow : " + nRow + " , nCell : " + nCell);

	var promise = Promise.resolve();
    //trace("Grd_PiboLIst_OnCellClick");
    switch (parseInt(nCell)) {
        case 0:
            runOnCellPosChanged = false;
            if (Ds_Pibo.getCellData(nRow, "sel") != "1") {
                runOnCellPosChanged = true;
                scwin.Grd_Pibo_OnCellPosChanged(nRow, 0, nRow, 0, "Y"); //사용자호출 Y
            }
            break;
        case 2:
            nInrpsAgeOld = Ds_Pibo.getCellData(nRow, "nInrpsAge");
            break;
        case 3:
            //trace("nPiboRow:" + nPiboRow);
            //trace("nRow:" + nRow);
            //trace("nPiboCell:" + nPiboCell);
            //trace("nCell:" + nCell);
            nInrpsAgeOld = Ds_Pibo.getCellData(nRow, "nInrpsAge");
            break;
        case 4:
            //trace("nPiboRow4:" + nPiboRow);
            //trace("nRow4:" + nRow);
            //trace("nPiboCell4:" + nPiboCell);
            //trace("nCell4:" + nCell);
            nInrpsAgeOld = Ds_Pibo.getCellData(nRow, "nInrpsAge");
            runOnCellPosChanged = true;
            //CellClick 과 PosChanged 동시에 발생을 막기 위해
            if (nPiboRow == nRow && nPiboCell == nCell) {
                scwin.Grd_Pibo_OnCellPosChanged(nRow, nCell, nRow, 2, "Y"); //사용자호출 Y
            }
            break;
        case 9:
            promise = promise.then(function(rtnVal) {
                //직업 찾기
                return scwin.lfn_searchJobCd(nRow);
            });
            promise = promise.then(function(rtnVal) {
                runOnCellPosChanged = false;
            });
        default:
            break;
    }
    promise = promise.then(function(rtnVal) {
        nPiboCell = nCell;
        nPiboRow = nRow;
    });
    promise = promise.then(function(rtnVal) {
    	//OnCellClick => OnCellPosChanged 호출처리 
        scwin.Grd_Pibo_OnCellPosChanged_ReCall();
    });
    return promise;
};

//OnCellClick => OnCellPosChanged 마이
//OnCellPosChanged => OnCellClick 신규 변경을 위한 변수 선언
//Grd_Pibo.setFocusedCell  설정시 반드시 Grd_Pibo_OnCellPosChanged_EventYn = "Y"; 설정 후 사용할것
/*
EX)
Grd_Pibo_OnCellPosChanged_EventYn = "Y";
Grd_Pibo.setFocusedCell(Ds_Pibo.getRowPosition(), 2, true);
*/
var Grd_Pibo_OnCellPosChanged_EventYn = ""; //OnCellPosChanged 이벤트만 발생 setFocusedCell Cell 포시젼을 코딩으로 이동시
var Grd_Pibo_OnCellPosChanged_Param = {};
var Grd_Pibo_OnCellPosChanged_EventChk = ""; //OnCellPosChanged 발생 하고 넘어온경우 Grd_Pibo_OnCellPosChanged_ReCall 실행
var Grd_Pibo_Tab_Key = "";

scwin.Grd_Pibo_OnCellPosChanged_ReCall = function() { //완료
	//======OnCellClick 발생 후 마지막에 호출한다. [START]====================
	if (Grd_Pibo_OnCellPosChanged_EventChk != "Y") { //OnCellPosChanged 이벤트 발생 한경우 실행
		Grd_Pibo_OnCellPosChanged_EventChk = "";
		return;
	}
	scwin.Grd_Pibo_OnCellPosChanged(
		Grd_Pibo_OnCellPosChanged_Param.row,
		Grd_Pibo_OnCellPosChanged_Param.col,
		Grd_Pibo_OnCellPosChanged_Param.oldRow,
		Grd_Pibo_OnCellPosChanged_Param.oldCol
	);
	Grd_Pibo_OnCellPosChanged_EventChk = "";
	//======OnCellClick 발생 후 마지막에 호출한다. [END]====================
	return;
}

scwin.Grd_Pibo_KeyDown = function(e) { //완료
	//TabKey
	if (e.key == "Tab") {
		//TabKey 클릭시 로포지션 발행 한경우 실행해준다.
		Grd_Pibo_Tab_Key = "Y";
		setTimeout(function(){Grd_Pibo_Tab_Key=""}, 500); //Tab클릭후 OnCellPosChanged 이벤트가 먹지 않은경우 초기화한다.
	}
	if (e.ctrlKey == true && e.key == "v") {
		//간편산출 주민번호 복사시에 기존 데이터 삭제후 복사 처리.
		//Ctrl+v(붙여넣기)시에 기존 데이터 삭제후 처리.
		if ((Grd_Pibo.getFocusedColumnIndex() == 2) && ((parent.sSimpleYn == "Y"))) {
	        //if (bCtrl == 1 && nChar == 86) {
	            Ds_Pibo.setCellData(Ds_Pibo.getRowPosition(), "sInrpsCd", "");
			//}
	    }	    
	}
};


// 간편설계시 주민번호 뒷자리를 모두 "000000"로 셋팅
//scwin.Grd_Pibo_OnChar = function(obj, strPreText, nChar, strPostText, nLLParam, nHLParam, nRow, nCell, nPivotIndex) {
scwin.Grd_Pibo_OnChar = function(e) {

	if ((Grd_Pibo.getFocusedColumnIndex() == 2) && ((parent.sSimpleYn == "Y"))) {
		var nValue = wconv.trim(e.newValue).replace("-","");
		if (nValue.length >= 7) {
			var dsListEvArray = util.getDataListEvent(Ds_Pibo);
			util.removeAllDataListEvent(Ds_Pibo);
			Grd_Pibo.setFocusedCell(e.rowIndex, 3, false);
			Grd_Pibo.setFocusedCell(e.rowIndex, 2, false);
			util.setDataListEvent(Ds_Pibo, dsListEvArray);

			Ds_Pibo.setCellData(e.rowIndex, "sInrpsCd", wconv.left(nValue,7) + "000000");
			scwin.lfn_Edt_Mask_OnKillFocus(e.rowIndex);

			//그리드 OnCellPosChanged Event를 발생한다.
    		Grd_Pibo_OnCellPosChanged_EventYn = "Y";
    		Grd_Pibo.setFocusedCell(e.rowIndex, 5, true);
		}
	}
	
	return "";

    //trace(length(replace(replace(strPostText,"_",""),"-","")) + ":" + strPostText + ":" + strPreText);
    //trace(length(replace(replace(strPostText,"_",""),"-","")) + ":" + parent.sSimpleYn );
    if (nCell == 2 &&  parent.sSimpleYn == "Y" && wconv.length(replace(replace(strPostText, "_", ""), "-", "")) >= 7) {
        //trace("in");
        Ds_Pibo.setCellData(nRow, "sInrpsCd", wconv.left(replace(strPostText, "-", ""), 7) + "000000");

        /*if(length(replace(replace(strPreText,"_",""),"-","")) == 13){
        	//Ds_Pibo.SetColumn(nRow,"sInrpsCd",left(replace(Ds_Pibo.GetColumn(nRow,"sInrpsCd"),"-",""),7)+"111111");
        	strPostText = left(replace(Ds_Pibo.GetColumn(nRow,"sInrpsCd"),"-",""),7)+"111111";
        }else{
        	Ds_Pibo.SetColumn(nRow,"sInrpsCd",left(replace(strPostText,"-",""),7)+"111111");
        }
        */
        //trace(Ds_Pibo.getColumn(nRow,"sInrpsCd"));
        Grd_Pibo.Redraw = true;
        Grd_Pibo.wconv.moveToNextCell();
    }
};


scwin.Grd_Pibo_OnCellPosChanged = function(nRow,nCell,nOldRow,nOldCell,userCall) { //완료

	var userCallYn = userCall; //N 정상호출, Y 사용자호출
	if (util.isNull(userCall)) { //사용자 호출이 아닌 정상 호출의 경우
		userCallYn = "N";
	}
	if (userCallYn == "N") { //정상적으로 발생한 이벤트의 경우 OnCellClick 을 먼저 발생한후 나중에 실행한다.
		//===================OnCellPosChanged => OnCellClick 순서변경을 위한 [START]===================
		//OnCellClick 이벤트 발생시 다시 호출하기 위한 Param 정보 임시 보관
		Grd_Pibo_OnCellPosChanged_Param = {
			"row" : nRow, "col" : nCell, "oldRow" : nOldRow, "oldCol" : nOldCell
		}
		//OnCellPosChanged 이벤트만 발생 setFocusedCell Cell 포시젼을 코딩으로 이동시
		if (Grd_Pibo_OnCellPosChanged_EventYn == "Y") {
			//Event 발생 상태값 초기화
			Grd_Pibo_OnCellPosChanged_EventYn = "";
			Grd_Pibo_OnCellPosChanged_EventChk = "";
		} else if (Grd_Pibo_Tab_Key == "Y") {
			//TabKey를 누른경우
			Grd_Pibo_Tab_Key = "";
		} else {
			//그외 정상적인 이벤트 의경우 OnCellPosChanged => OnCellClick 순서변경
			if (Grd_Pibo_OnCellPosChanged_EventChk == "") { //초기 리턴후 Grd_Pibo_OnCellPosChanged_ReCall 호출을 통해 실행된다.
				Grd_Pibo_OnCellPosChanged_EventChk = "Y"; //OnCellPosChanged 정상 이벤트 발생 Y
				return;
			} else {
				Grd_Pibo_OnCellPosChanged_EventChk = "";
			}
		}
		//===================OnCellPosChanged => OnCellClick 순서변경을 위한 [END]===================
	}

	console.log("Grd_Pibo_OnCellPosChanged ==== nRow : " + nRow + ", nCell : " + nCell + ", nOldRow : " + nOldRow + ", nOldCell : " + nOldCell + ",userCall : " + userCall);

    //trace("Grd_Pibo_OnCellPosChanged:" + nCell) ;
    //trace("runOnCellPosChanged ===> " + runOnCellPosChanged);
    nPiboCell = nCell;
    nPiboRow = nRow;
    if (runOnCellPosChanged == false) {
        return;
    }
    if (nCell == 3) {
		//IVR 화면 오픈 
		//scwin.Btn_IVR_OnClick(obj, nRow);
		return;
    }
    
    //주민번호 선택
    if (nOldCell == 2 || nCell == 4) {
        //trace("##### C010_Div1 > Grd_Pibo_OnCellPosChanged > nOldCell-" + nOldCell + " / nCell-" + nCell +" / pibo-" +Ds_Pibo.getColumn(nOldRow, "sInrpsCd") + " / check-"+ lfn_ChkPersonID(Ds_Pibo.getColumn(nOldRow, "sInrpsCd")));
        if (Ds_Pibo.getCellData(nOldRow, "sInrpsCd").length > 0 && scwin.lfn_ChkPersonID(Ds_Pibo.getCellData(nOldRow, "sInrpsCd"))) {
            //보험나이계산
            Ds_Pibo.setCellData(nOldRow, "nInrpsAge", gfn_getInsAge(Ds_Pibo.getCellData(nOldRow, "sInrpsCd"), cal_sSsrtDate.getValue()));
        } else {
            //Ds_Pibo.FireEvent = false;
            var dsListEvArray = util.getDataListEvent(Ds_Pibo);
			util.removeAllDataListEvent(Ds_Pibo);

            Ds_Pibo.row = nOldRow;
            if (parent.sSimpleYn != "Y") {
                if (nCell > 3) {
                    wprom.alert("주민번호를 정확히 입력해 주세요."); //Ds_Pibo.setColumn(nOldRow, "nInrpsAge", "");
                    //Grd_Pibo.MoveToPrevCell();
                    var focusFunction = function() {
				    	//그리드 OnCellPosChanged Event를 발생한다.
				    	Grd_Pibo_OnCellPosChanged_EventYn = "Y";
				    	Grd_Pibo.setFocusedCell(Ds_Pibo.getRowPosition(), 2, true);
				    }
				    setTimeout(focusFunction, 100);
                } else if (nCell == 0) {
                    //Grd_Pibo.wconv.moveToNextCell();
                    //Grd_Pibo.wconv.moveToNextCell();
                } else if (nCell == 1) {
                    wprom.alert("주민번호를 정확히 입력해 주세요"); //Ds_Pibo.setColumn(nOldRow, "nInrpsAge", "");
                    //Grd_Pibo.MoveToNextCell();
                    var focusFunction = function() {
				    	//그리드 OnCellPosChanged Event를 발생한다.
				    	Grd_Pibo_OnCellPosChanged_EventYn = "Y";
				    	Grd_Pibo.setFocusedCell(Ds_Pibo.getRowPosition(), 2, true);
				    }
				    setTimeout(focusFunction, 100);
                }
                if (scwin.lfn_simpleChkPersonID(Ds_Pibo.getCellData(nOldRow, "sInrpsCd")) == false) {
                    Ds_Pibo.setCellData(nOldRow, "nInrpsAge", "");
                    //Grd_Pibo.wconv.moveToNextCell();
                    return;
                }
            }

            //Ds_Pibo.FireEvent = true; //return;
            util.setDataListEvent(Ds_Pibo, dsListEvArray);
        }
    }

    if (nCell == 0) {
        //alert(Ds_Pibo.getColumn(nRow, "sel"));
        if (cal_sSsrtDate.getValue().length == 0) {
            wprom.alert("청약일을 선택하세요");
            return;
        }
        if (Ds_Pibo.getCellData(nOldRow, "sInrpsCd").length == 0) {
            wprom.alert("피보험자주민번호를 입력하세요");
            if (nCell == 4) {
                //Grd_Pibo.wconv.moveToPrevCell();
            }
            return;
        }
        if (Ds_Trty.getRowCount() > 0) {
            chkMedical = false;
            validFlag = scwin.Trty_ValidationCheck(Ds_Trty);
            chkMedical = true;
            if (validFlag == true) {
                return;
            }
        }

        //현재 선택된 체크박스를 제외한 체크박스는 값을 0으로 바꾼다.
        for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
            if (i == nRow) {
                Ds_Pibo.setCellData(i, "sel", "1");
            } else {
                Ds_Pibo.setCellData(i, "sel", "0");
            }
        }

        //피보험자에 해당하는 특약사항을 조회한다.
		scwin.lfn_searchPiboTrty(nRow);
		runOnCellPosChanged = false; // 재실행 방지
    }
    
    if (nCell == 4 && nOldCell == 2) {
        //Grd_Pibo.SetCellPos(3);
        //Grd_Pibo_OnKillFocus(obj);
        //고객화면 오픈
        scwin.lfn_searchCust(nRow, nCell, 0, 0);
    }

};

//그리드 Div 에 설정, 그외 상위 Div Onclick에추가
//주의) 다른 컴포넌트 click 이벤트 발생 후 scwin.Div_OnClick_Event 실행 됨.
//setFocusedCell 그리드 포커스 코딩에서 줄경우 값을 세팅해준다.
//Ex)
//Div_OnClik_ID = "grid_Div";
//Grd_Pibo.setFocusedCell(Tab_Step1.Ds_Pibo.getRowPosition(), 2, true);
/*
var Div_OnClik_ID = "";
scwin.Div_OnClick_Event = function() { //완료
	var DivId = this.id;
	console.log("Div_OnClick_Event : " + DivId);
	if (Div_OnClik_ID != DivId) {
		if (Div_OnClik_ID == "grid_Div") {
			//Grd_Pibo_OnKillFocus 호출
			scwin.Grd_Pibo_OnKillFocus();
		}
	}
	Div_OnClik_ID = DivId;
}
//Anchor Tag Div Onclick 발생하지 않나 Event 추가
scwin.Div_OnClick_Event_AnchorAdd = function() { //완료
	var allAnchor = $("a");
	for (var i = 0; i < allAnchor.length; i++) {
		if (allAnchor[i].href == "javascript:void(null);") {
			//console.log("allanchor ID " + allAnchor[i].id);
			allAnchor.bind("click", scwin.Div_OnClick_Event);
		}
	}
} 
scwin.Div_OnClick_Event_AnchorAdd();
*/

//---------------------------------------------------------------------------
// function 명 : Grd_Pibo_OnKillFocus
// 내용        : 피보험자그리드 Losing Focus시 처리
//---------------------------------------------------------------------------
scwin.Grd_Pibo_OnKillFocus = function(info) {

	console.log("Grd_Pibo_OnKillFocus====");

	if(Grd_Pibo.getColumnID(info.colIndex) != "sInrpsCd"){
		return;
	}

    //trace("cmb_Plan.Value ===> " + cmb_Plan.Value);
    // 간편설계 피보험자 변경시
    if (parent.sSimpleYn == "Y" && wconv.length(cmb_Plan.getValue()) > 0) {
        // Dataset의 Event를 발생하지 않음
        //Ds_Pibo.FireEvent = false;
        var dsListEvArray = util.getDataListEvent(Ds_Pibo);
		util.removeAllDataListEvent(Ds_Pibo);

        runOnCellPosChanged = false;

        // 초기화
        scwin.lfn_ClearTrty(0);

        // 피보험자에 해당하는 특약사항 조회
        scwin.lfn_searchPiboTrty("", 0);

        // 피보험자 나이 재계산
        nInrpsAgeNew = gfn_getInsAge(Ds_Pibo.getCellData(0, "sInrpsCd"), cal_sSsrtDate.getValue());
        nInrpsAgeOld = Ds_Pibo.getCellData(0, "nInrpsAge");

        // 피보험자 재계산한 나이 세팅
        if (nInrpsAgeOld != nInrpsAgeNew) {
            Ds_Pibo.setCellData(0, "nInrpsAge", nInrpsAgeNew);
        }

        // Dataset의Event를 발생
        //Ds_Pibo.FireEvent = true;
        util.setDataListEvent(Ds_Pibo, dsListEvArray);
    } else {
        //for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        	var i = info.rowIndex;
            if (wconv.length(Ds_Pibo_BackUp.getCellData(i, "sInrpsCd")) > 0 && 
            		Ds_Pibo.getCellData(i, "sInrpsCd") != Ds_Pibo_BackUp.getCellData(i, "sInrpsCd")) {
                //Ds_Pibo.FireEvent = false; //이벤트 발생이 안되도록 셋팅
                var dsListEvArray = util.getDataListEvent(Ds_Pibo);
				util.removeAllDataListEvent(Ds_Pibo);
		
                runOnCellPosChanged = false;

                //피보험자에 종속되어있는 데이타삭제(타보험, 질의서, 부담보)
                scwin.lfn_deleteEtc(i, "N");
                var sInrpsdCd = Ds_Pibo.getCellData(i, "sInrpsCd");
                var sApplPlanCd = Ds_Pibo.getCellData(i, "sApplPlanCd");
                util.removeRow(Ds_Pibo, i);
                util.removeRow(Ds_Pibo_BackUp, i);
                scwin.lfn_addRow();
                util.setRowPosition(Ds_Pibo, i);

                //eval(Ds_Pibo.ID).OnColumnChanged = "";
                Ds_Pibo.setCellData(i, "sInrpsCd", sInrpsdCd);
                Ds_Pibo.setCellData(i, "sApplPlanCd", sApplPlanCd);
                nInrpsAgeNew = gfn_getInsAge(Ds_Pibo.getCellData(i, "sInrpsCd"), cal_sSsrtDate.getValue());
                if (nInrpsAgeOld != nInrpsAgeNew) {
                    //Newage와 oldage가 다른 때만 초기화
                    scwin.lfn_ClearTrty(i);
                }
                if (parent.sSimpleYn == "Y") {
                    if (Ds_Pibo_getCellData(i, "sInrpsCd").length() > 0) {
                        if (scwin.lfn_ChkPersonID(Ds_Pibo.getCellData(i, "sInrpsCd"))) {
                            //보험나이계산
                            Ds_Pibo.setCellData(i, "nInrpsAge", gfn_getInsAge(Ds_Pibo.getCellData(i, "sInrpsCd"), cal_sSsrtDate.getValue()));
                        } else {
                        	util.setRowPosition(Ds_Pibo, i);
                            Ds_Pibo.setCellData(i, "sInrpsName", Ds_Pibo.getCellData(i, "sInrpsName"));
                            wprom.alert("주민번호를 정확히 입력해 주세요.");
                            //Grd_Pibo.wconv.moveToPrevCell();
                            //Grd_Pibo.wconv.moveToPrevCell();
                        }
                    }
                    scwin.lfn_backup_Pibo();
                }


                //고객화면 오픈
                //lfn_searchCust(obj,1,2,"","","");
                //Ds_Pibo.FireEvent = true; //이벤트 발생이 안되도록 셋팅
                util.setDataListEvent(Ds_Pibo, dsListEvArray);
            }
        //}
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_deleteEtc
// 내용        : 피보험자에 종속되어있는 데이타삭제(타보험, 질의서, 부담보)
//---------------------------------------------------------------------------
scwin.lfn_deleteEtc = function(nSeq, delLTIDA01YN) { //완료
	var MethodObj = new callService("com.inswave.longterm.ssr.pln.task.DBB030Task", "delete_PiboDetail", "", "");
	MethodObj.setId("delete_PiboDetail");
	MethodObj.setParam("sPlanNo", parent.medt_PlanNo.Value);
	MethodObj.setParam("sPsnGroupFlgcd", parent.Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd")); //개인단체구분코드
	MethodObj.setParam("sPsnPrprtGroupFlgcd", "1"); //인물단체구분코드(인) 
	MethodObj.setParam("nPsnPrprtGroupSeqno", nSeq + 1); //일련번호 
	//	 gfn_SetParam(MethodObj, "sDriveYn",Ds_Pibo.getCellData(0, "sDrveFlagCd"));//운전용도
	MethodObj.setParam("sInrpsCd", Ds_Pibo.getCellData(nSeq, "sInrpsCd")); //피보험자코드
	//		gfn_SetParam(MethodObj, "sInrpsName",Ds_Pibo.getCellData(0, "sInrpsName"));//성명
    //		gfn_SetParam(MethodObj, "sSsrtDate", parent.Ds_LTIDA00.getCellData(0, "sSsrtDate"));//청약일자
	MethodObj.setParam("sCrChngNo", "0"); //변경seq
	MethodObj.setParam("nInrpsSeqno", nSeq + 1); //변경seq
	MethodObj.setParam("delLTIDA01YN", delLTIDA01YN); //피보험자 테이블 삭제 여부   
    //설계상태를 지움. 산출을 다시 시키기 위해
    if (delLTIDA01YN == "Y") {
        Ds_LTIDA00.setCellData(0, "sPlanProgRankCd", "10"); //설계진행단계코드(보험료산출(인))
        MethodObj.setParam("sPlanProgRankCd", "10");
    }
	MethodObj.setUrl("/contract/CBSC075MController.do");
	MethodObj.setXPath("//WARNING");
	MethodObj.sync();
	MethodObj.send();
	util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");
    if (DsWs_Warning.getRowCount() > 0) {
        wprom.alert(DsWs_Warning.getCellData(0, "msg"));
        return;
    }
    Ds_LTIDA00.setCellData(0, "sTaxPrfrYn", "N"); //세금우대사항 setting	
};

/*-----------------------------------
// function 명 : lfn_searchJobCd
// 내용        : 피보험자의 직업 찾기
-----------------------------------*/
scwin.lfn_searchJobCd = function(nRow) { //완료
    
    if (wconv.length(Ds_Pibo.getCellData(nRow, "nInrpsAge")) <= 0) {
        wprom.alert("주민번호를 정확히 입력해 주세요.");
        //Grd_Pibo.wconv.moveToPrevCell();
        //Grd_Pibo.wconv.moveToPrevCell();
        return;
    }

    var promise = Promise.resolve();
    
    //var arg = "flag=" + obj.getID();
    promise = promise.then(function(rtnVal) {
        var indata = new Object();
    	var popInfo = {
			"width"     : 845,
			"height"    : 565,  
			"indata"    : indata,
			"title"     : "직업코드 조회",
			"callback"  : ""
		};
        return wprom.popupOpen("/ui/cbso/CBSO021P.xml", popInfo);//직업코드 조회   
    });
    
    promise = promise.then(function(result) {
        /*wprom.popupOpen(가이드참조)*/
        if (wconv.length(result) != 0) {
            var jobretArr = wconv.split(result, "^", true);
            Ds_Pibo.setCellData(nRow, "sJobCd", jobretArr[1]); //직업코드 
            Ds_Pibo.setCellData(nRow, "sJobName", jobretArr[0]); //직업명
            Ds_Pibo.setCellData(nRow, "sJobGradCd", jobretArr[2]); //직업급수코드 
            Ds_Pibo.setCellData(nRow, "sDrveFlagCd", jobretArr[3]); //운전용도코드 
            /*		
        		//장기보험고도화 - 피보험자정보 변경체크를 위한 값 저장
        		if(sInrpsCdOld.length > nRow && sInrpsCdOld[nRow] != Ds_Pibo.getCellData(nRow,"sInrpsCd")){
        			sInrpsCdOld[nRow] = Ds_Pibo.getCellData(nRow,"sInrpsCd");
        			sInrpsInfoChg = true;
        		}
        	*/
            if (wconv.length(parent.edt_sGdCdNm.getValue()) > 0) {
                if (Ds_Pibo_BackUp.getCellData(nRow, "sInrpsCd") != Ds_Pibo.getCellData(nRow, "sInrpsCd") ||
                	Ds_Pibo_BackUp.getCellData(nRow, "sDrveFlagCd") != Ds_Pibo.getCellData(nRow, "sDrveFlagCd")) {
                    if (!util.isNull(parent.edt_sGdcd.getValue())) {
                        //fn_setRule();
                        //피보험자별 특약을 조회하기 위해 먼저 셋팅
                        //Ds_Pibo.SetColumn(nRow, "sInrpsName", Ds_long_mPlr.getCellData(0,"sName"));//성명
                        //해당 피보험자로 선택 시킨 후 피보험자특약 조회
                        scwin.Grd_Pibo_OnCellPosChanged(nRow, 0, nRow, -1, "Y"); //사용자호출 Y //lfn_searchPiboTrty("", nRow);
                    }
                }
            }
            Ds_Pibo_BackUp.setCellData(nRow, "sJobCd", jobretArr[1]);
            Ds_Pibo_BackUp.setCellData(nRow, "sDrveFlagCd", jobretArr[3]);
        }
    });
    return promise;
};


	
//---------------------------------------------------------------------------
// function 명 : lfn_ChkPersonID
// 내용        : 주민번호 체크
//---------------------------------------------------------------------------
scwin.lfn_ChkPersonID = function(sPersonCd) { //완료
    if (parent.sSimpleYn == "Y") {
        return scwin.lfn_simpleChkPersonID(sPersonCd);
    } else {
        return checkPersonID(sPersonCd);
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_simpleChkPersonID
// 내용        : 주민번호 날자만 체크
//---------------------------------------------------------------------------
scwin.lfn_simpleChkPersonID = function(sPersonCd) { //완료
    var yy = "";

    // 나이 (-) 체크
    if (wconv.charAt(sPersonCd, 6) == "1" || wconv.charAt(sPersonCd, 6) == "2" || wconv.charAt(sPersonCd, 6) == "5" || wconv.charAt(sPersonCd, 6) == "6") {
        yy = "19";
    } else if (wconv.charAt(sPersonCd, 6) == "9" || wconv.charAt(sPersonCd, 6) == "0") {
        yy = "18";
    } else {
        yy = "20";
    }
    if (wconv.toNumber(wconv.substr(wconv.today(), 0, 4)) - wconv.toNumber(yy + wconv.substr(sPersonCd, 0, 2)) < 0) {
        return false;
    }

    //날짜 체크
    if (!wconv.isDate(yy + wconv.substr(sPersonCd, 0, 6))) {
        return false;
    }
    return true;
};

//---------------------------------------------------------------------------
// function 명 : cal_sSsrtDate_onchange
// 내용        : 상위 청약일자 동일하게 세팅
//---------------------------------------------------------------------------
scwin.cal_sSsrtDate_onchange = function() { //완료
	parent.cal_sSsrtDate.setValue(cal_sSsrtDate.getValue());
};



/*-----------------------------------
// function 명 : lfn_searchPiboTrty
// 내용        : 피보험자에 해당하는 특약정보를 조회한다.
-----------------------------------*/
scwin.lfn_searchPiboTrty = function(paramComp, nRow) {  //완료
	var obj = {"getID" : function() {return ""}};
	if (!util.isNull(paramComp)) {
		obj = paramComp;
	}

    //고객찾기를 하지 않으면 조회를 하지 않는다
    if (wconv.length(wconv.trim(Ds_Pibo.getCellData(nRow, "sInrpsName"))) <= 0) {
        scwin.lfn_changeTrty();
        return;
    }

	wconv.clear(DsWs_InsurTerm);
    wconv.clear(DsWs_PaymTerm);
    wconv.clear(DsWs_Trty);
    wconv.clear(DsWs_AnntOpnAgeCd); // 연금개시나이 초기화
    wconv.clear(DsWs_AnntPymTermCd); // 연금지급기간 초기화
    wconv.clear(DsWs_InsurTermPaymTerm); // 만기/납기

	var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB331Task", "getAnntPiboTrty", "", "");
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("getAnntPiboTrty");
	transObj.setParam("sPlanNo", parent.medt_PlanNo.getValue()); //설계번호
	transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); //상품코드
	transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); //종형코드
	transObj.setParam("sStndDate", Ds_LTIDA00.getCellData(0, "sSsrtDate")); //청약일
	if (wconv.length(Ds_Pibo.getCellData(nRow, "sApplPlanCd")) == 0) {
        transObj.setParam("sPlanCd", cmb_Plan.getValue()); //플랜코드
        transObj.setParam("sPlanName", cmb_Plan.getValue()); //플랜명
    } else {
        transObj.setParam("sPlanCd", Ds_Pibo.getCellData(nRow, "sApplPlanCd")); //플랜코드
        transObj.setParam("sPlanName", Ds_Pibo.getCellData(nRow, "sApplPlanName")); //플랜명 
    }
	transObj.setParam("sPsnGroupFlgcd", Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd")); //개인단체구분코드
	transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(nRow, "sDrveFlagCd")); //운전용도 
	transObj.setParam("sResno", Ds_Pibo.getCellData(nRow, "sInrpsCd")); //피보험자주민번호
	transObj.setParam("sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); // 업무보고서분규코드
	transObj.setParam("sAnntPymTermCd", Ds_LTIDA00.getCellData(0, "sAnntPymTermCd")); // 연금지급기간
    //N1502-00095(모집인별 마이플랜 조회 위해 추가	)
    /*
    if( Ds_LTIDA00.getCellData(0,"sDoer") == NULL || Ds_LTIDA00.getCellData(0,"sDoer") == "" ) {
    	gfn_SetParam(MethodObj, "sDoer", gDoer);//취급자
    	gfn_SetParam(MethodObj, "sDoerUser", gDoerUser);//사용인
    }
    else{
    	gfn_SetParam(MethodObj, "sDoer", Ds_LTIDA00.getCellData(0,"sDoer"));//취급자
    	gfn_SetParam(MethodObj, "sDoerUser", Ds_LTIDA00.getCellData(0,"sDoerUser"));//사용인
    }//END
    */
    transObj.setParam("sDoer", parent.edt_sDoer.getValue()); //취급자
    transObj.setParam("sDoerUser", parent.edt_sDoerUser.getValue()); //사용인
	
	//피보험자 추가일때는 특약DB조회를 하지 않기 위해
    if (Ds_Trty.getRowCount() > 0) {
        transObj.setParam("nPsnPrprtGroupSeqno", Ds_Pibo.getCellData(nRow, "nInrpsSeqno")); //일련번호
    }

    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sInsurTermCd = util.nvl(exArr[0],"");
    var sPaymTermCd = util.nvl(exArr[1],"");

    //trace("sInsurTermCd:"+sInsurTermCd);
    //trace("sPaymTermCd:"+sPaymTermCd);
    transObj.setParam("sInsurTermCd", sInsurTermCd); //보험기간
    transObj.setParam("sPaymTermCd", sPaymTermCd); //납입기간	
	
	transObj.setXPath("//*/WARNING");
	transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='AnntyOpnAgeList']/vector/data/multi");    // 연금개시나이
	transObj.addXPath("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi");   // 연금지급기간
	transObj.addXPath("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi");	// 만기/납기
	//특약 xpath 변경
	transObj.addXPath("//hashtable/data[@hashkey='multi']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");

	transObj.setXPathDs();
	transObj.sync();
	
	//특약중 화면출력특약만 화면에 보여줌
    //Ds_Trty.FireEvent = false;
	
	/*
	wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nRow, "nInrpsSeqno") + "'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nRow, "nInrpsSeqno") + "'");
	*/
    var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nRow, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
    Ds_Trty.clearFilter();
	Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

	var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nRow, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
    Ds_Trty_Backup.clearFilter();
	Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

	transObj.send();
	//util.interfaceKey(_tranSync.result.serviceDs);
	
	util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");
	
	if (DsWs_Warning.getRowCount() != 0) {
        wprom.alert(DsWs_Warning.getCellData(0, "msg"));
        return;
    }

	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi"), "DsWs_TrtyTerm");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyOpnAgeList']/vector/data/multi"), "DsWs_AnntOpnAgeCd");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi"), "DsWs_AnntPymTermCd");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi"), "DsWs_InsurTermPaymTerm");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='multi']/vector/data/multi"), "DsWs_Trty");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm");
	
	util.setCompBindRefresh("DsWs_InsurTerm");
	util.setCompBindRefresh("DsWs_TrtyTerm");
	util.setCompBindRefresh("DsWs_AnntOpnAgeCd");
	util.setCompBindRefresh("DsWs_AnntPymTermCd");
	util.setCompBindRefresh("DsWs_InsurTermPaymTerm");
	util.setCompBindRefresh("DsWs_Trty");
	util.setCompBindRefresh("DsWs_PaymTerm");
	

	//trace("보험기간2=="+DsWs_InsurTerm.SaveXML());	
    //trace("납입기간2=="+DsWs_PaymTerm.SaveXML());	
    //trace("특약2=="+DsWs_Trty.SaveXML());	
    //플랜세팅
    //if(nRow == 0 && length(Ds_Pibo.getCellData(nRow, "sApplPlanCd")) > 0){
    //	cmb_Plan.Value = Ds_Pibo.getCellData(nRow, "sApplPlanCd");
    //}
    //보기납기 세팅
    //if(length(Ds_LTIDA00.getCellData(0, "sInsurTermCd")) > 0 && length(Ds_LTIDA00.getCellData(0, "sPaymTermCd")) > 0){
    //	cmb_InsurTermPaymTerm.Value = Ds_LTIDA00.getCellData(0, "sInsurTermCd")+"/"+Ds_LTIDA00.getCellData(0, "sPaymTermCd");			
    //}
    // 보기납기 첫번째 세팅
    cmb_InsurTermPaymTerm.setSelectedIndex(0);
    //Ds_Trty.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);
	
	//플랜선택시에는 특약만추가 함.
    if (obj.getID() == "cmb_Plan") {
        //wconv.copy(Ds_Trty_Basic, Ds_Trty);
        //wconv.filter(Ds_Trty_Basic, "chk=='" + "1" + "'");
        util.jSonDsCreate(Ds_Trty.getAllJSON(), "Ds_Trty_Basic");
        util.setCompBindRefresh("Ds_Trty_Basic");
        Ds_Trty_Basic.clearFilter();
        Ds_Trty_Basic.setColumnFilter( {type:'row', colIndex:'chk', key:"1", condition:'and'});
        scwin.lfn_trtyAddRow(obj, Ds_Pibo.getCellData(nRow, "nInrpsSeqno"));
        scwin.lfn_TrtyInsAmtInit(obj);
        //특약관계체크
        scwin.lfn_TrtyList_Relation_Check(nRow);
    } else {
    	//요청인 경우 처리
        if (Number(Ds_LTIDA00.getCellData(0, "sPlanProgRankCd")) == 52) {
        	//피보험자 추가일때만 특약 추가
            if (Ds_Trty.getRowCount() > 0) {
                scwin.lfn_changeTrty();
            } else {
                //특약세팅
                scwin.lfn_trtyAddRow(obj, Ds_Pibo.getCellData(nRow, "nInrpsSeqno")); //lfn_TrtyDataSetSet();
                //특약데이터 변경여부를 위해 백업데이터셋을 만든다.
                //Ds_Trty_Backup.Copy("Ds_Trty");
                //Ds_Trty_Backup.Filter("pos(sScrnIndcYn, 'Y') >= 0");
            }
        } else {
        	//일시납 납입기간에 따른 납입주기 세팅
            scwin.lfn_PaymCyclSet();
            //피보험자 추가일때만 특약 추가
            if (Ds_Trty.getRowCount() > 0) {
                scwin.lfn_changeTrty();
                scwin.lfn_Trty_Age_Limit();
            } else {
                //플랜,납입주기,납만 화면 활성화/비활성화
                scwin.lfn_PlanEnable(nRow);
                //Ds_Trty.FireEvent = false;
                var dsListEvArray = util.getDataListEvent(Ds_Trty);
				util.removeAllDataListEvent(Ds_Trty);
                //특약세팅
                scwin.lfn_trtyAddRow(obj, Ds_Pibo.getCellData(nRow, "nInrpsSeqno"));
                //lfn_TrtyDataSetSet();
                //특약데이터 변경여부를 위해 백업데이터셋을 만든다.
                //Ds_Trty_Backup.Copy("Ds_Trty");
                //Ds_Trty_Backup.Filter("pos(sScrnIndcYn, 'Y') >= 0");
                //보험기간,가입금액 초기값 세팅
                scwin.lfn_InsurTermInit();
                //Ds_Trty.FireEvent = true;
                util.setDataListEvent(Ds_Trty, dsListEvArray);

                //특약관계체크
                scwin.lfn_TrtyList_Relation_Check();
            }
        }
        
        //피보험자 추가일때만 특약 추가
        if (Ds_Trty.getRowCount() <= 0) {
            for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
                //2011.05.13 정액담보가입 또는 의료비가입시 사전조회 활성화
                if (Ds_Trty.getCellData(i, "PronCmpsTrtyYn") == "Y" || Ds_Trty.getCellData(i, "FxamtCmpsFlag") == "Y") {
                    btn_Medical.setDisabled(false); //사전조회버튼 활성화
                }


                //2011.05.13 실손담보가입시 가입확인(사전조회시 사용)
                if (Ds_Trty.getCellData(i, "PronCmpsTrtyYn") == "Y") {
                    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasPronCmpsTrty", "Y"); //실손가입 확인
                }


                //2011.05.13 정액담보가입시 가입확인(사전조회시 사용)
                if (Ds_Trty.getCellData(i, "FxamtCmpsFlag") == "Y") {
                    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasFxamtCmps", "Y"); //사전조회버튼 활성화
                }
            }
        }
    }
    
    //wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nRow, "nInrpsSeqno") + "'");
    //wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(nRow, "nInrpsSeqno") + "'");
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty.clearFilter();
    Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty_Backup.clearFilter();
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

    //Ds_Trty.FireEvent = true;
	util.setDataListEvent(Ds_Trty, dsListEvArray);
	
	//피보험자 체크박스 플래그 초기화
    //piboCheckFlag = false;
    // 연금개시나이
    if (DsWs_AnntOpnAgeCd.getRowCount() == 0) {
        wprom.alert("연금개시나이 조회건이 없습니다.");
    } else {
        var insRow = util.insertRow(DsWs_AnntOpnAgeCd, 0);
        /*수작업 변환 개발자 가이드(테스트 중)
        dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
        DsWs_AnntOpnAgeCd.setCellData(0, "sAnntOpnAgeCd", "");
        DsWs_AnntOpnAgeCd.setCellData(0, "sAnntOpnAgeCdName", "- 선택 -");
        cmb_AnntOpnAgeCd.setSelectedIndex(1);
    }


    // 연금지급기간
    if (DsWs_AnntPymTermCd.getRowCount() == 0) {
        wprom.alert("연금지급기간 조회건이 없습니다.");
    } else {
        var insRow = util.insertRow(DsWs_AnntPymTermCd, 0);
        /*수작업 변환 개발자 가이드(테스트 중)
        dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
        DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCd", "");
        DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCdName", "- 선택 -");
        cmb_AnntPymTermCd.setSelectedIndex(1);
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_searchCust
// 내용        : 고객팝업호출
//---------------------------------------------------------------------------
scwin.lfn_searchCust = function(nRow, nCell, nX, nY) { //완료
    //대리점일때
    if (parent.sAgncYn == "Y") {
        if (wconv.length(Ds_Pibo.getCellData(nRow, "nInrpsAge")) <= 0) {
            return;
        }
    }

    //휴면계약 존재여부 확인
    var rtnValue = gfn_checkDmcyInsurByCustNo("DsWs_Dmcy", wconv.trim(Ds_Pibo.getCellData(nRow, "sInrpsCd")));
    if (rtnValue != "") {
        wprom.alert(rtnValue);
    }
    
    var result;
    var parentInfo = "";
    //Ds_long_mPlr.removeAll();
    wconv.clear(Ds_long_mPlr);
    if (Ds_Pibo.getRowCount() > 0 && wconv.length(Ds_Pibo.getCellData(nRow, "sAddrFlgcd")) > 0 &&
    	Ds_Pibo.getCellData(nRow, "sInrpsCd") == Ds_Pibo_BackUp.getCellData(nRow, "sInrpsCd") &&
    	wconv.length(Ds_Pibo_BackUp.getCellData(nRow, "sInrpsCd")) > 0) {
        parentInfo += Ds_Pibo.getCellData(nRow, "sInrpsCstId") + "^"; //고객ID
        parentInfo += Ds_Pibo.getCellData(nRow, "sInrpsCd") + "^"; //주민번호
        parentInfo += "0^"; //순번
        parentInfo += Ds_Pibo.getCellData(nRow, "sInrpsFlagCd") + "^"; //고객유형 내국인
        parentInfo += Ds_Pibo.getCellData(nRow, "sAddrFlgcd") + "^"; //주소구분코드 자택
        parentInfo += Ds_Pibo.getCellData(nRow, "nAddrChngSeq") + "^"; //주소변경회차
        parentInfo += Ds_Pibo.getCellData(nRow, "nTelnoChngSeq") + "^"; //전화회차
        parentInfo += Ds_Pibo.getCellData(nRow, "sMailRvadAddrFlagCd") + "^"; //발송지주소구분
        parentInfo += Ds_Pibo.getCellData(nRow, "sMailRvadAddrFlagCd") + "^"; //발송지회차
        parentInfo += "Ds_long_mPlr"; //데이터셋명 
        //parentInfo += " screenId=long"; //스크린id   
        //parentInfo += " sStandDate=" + Ds_LTIDA00.getCellData(0, "sInsurStrtdate"); //직업찾기 기준일자 적용 2014.04.01 제도개정
    } else {
        parentInfo += "^"; //고객ID
        parentInfo += Ds_Pibo.getCellData(nRow, "sInrpsCd") + "^"; //주민번호
        parentInfo += "0^"; //순번
        parentInfo += Ds_Pibo.getCellData(nRow, "sInrpsFlagCd") + "^"; //고객유형 내국인
        parentInfo += "^"; //주소구분코드 자택
        parentInfo += "^"; //주소변경회차
        parentInfo += "^"; //전화회차
        parentInfo += "^"; //발송지주소구분
        parentInfo += "^"; //발송지회차
        parentInfo += "Ds_long_mPlr"; //데이터셋명 
        //parentInfo += " screenId=long"; //스크린id
        //parentInfo += " sStandDate=" + Ds_LTIDA00.getCellData(0, "sInsurStrtdate"); //직업찾기 기준일자 적용 2014.04.01 제도개정
    }
    
    //고객화면 오픈  
    //대면/비대면체크  0 :  대면 , 1 : 비대면
    if (util.getGdsValue("gUseCustType") == "0") {
    	var indata = new Object();
   		indata.parentInfo = parentInfo;
   		indata.screenId = "long";
   		indata.sStandDate = parent.cal_sSsrtDate.getValue();//Ds_LTIDA00.getCellData(0, "sInsurStrtdate");
   		indata.fAgntFlagPop = "";
   		indata.sPlanNo = parent.medt_PlanNo.getValue();
   		indata.sHandlerID = parent.scwin.lfn_GetDoerUser();
   		//MS 임시테스트 처리 S
   		//indata.sScanObjtYn = Ds_LTIDA00.getCellData(0, "sScanObjtYn");
   		indata.sScanObjtYn = "Y";
   		/*MS 임시테스트 처리 E*/
   		var popInfo = {"width":800,
   	                   "height":580,
   	                   "indata":indata,
   	                   "callback"  : "scwin.lfn_custConfirm",
					   "title"     : "개인고객 등록"
   	                  };
   	    return wprom.popupOpen("/ui/cbso/CBSO002P.xml", popInfo);//개인고객 등록
    } else {
    	return util.toDoAlert("lfn_searchCust");
        //open("cst_cst::A035_Pop.xml", "parentInfo=" + parentInfo, 820, 612, "TaskBar=true Resize=true");
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_custConfirm
// 내용        : 고객팝업에서 확인버튼 클릭 후 처리
//---------------------------------------------------------------------------
scwin.lfn_custConfirm = function(rtnValue) { //완료

	if (util.isNull(rtnValue)) {
		return;
	}
	
	if (typeof rtnValue.Ds_long_mPlr != "object") {
		return;
	}
	
	wconv.clear(Ds_long_mPlr);
	//Ds_long_mPlr.setJSON(result.Ds_long_mPlr);	
	util.jSonDsCreate(rtnValue.Ds_long_mPlr, "Ds_long_mPlr");
	util.setCompBindRefresh("Ds_long_mPlr");
	util.setRowPosition(Ds_long_mPlr, 0);

    var nRow = wconv.findRow(Ds_Pibo, "sInrpsCd", Ds_long_mPlr.getCellData(0, "sCustNo"));

    //2014.12.04 By SDJ(N1411-00267)
    if (nRow < 0) {
        nRow = wconv.findRow(Ds_Pibo, "sel", "1"); //현재 선택된 피보험자
    }

	if(mfn_IsEmpty(parent.medt_PlanNo.getValue())){
	
		if((Ds_Pibo.getCellData(0, "sDrveFlagCd") != "") && (Ds_Pibo.getCellData(0, "sDrveFlagCd") != null)){	
		}else{	
			util.insertColumn(Ds_Pibo, [["sDrveFlagCd","sDrveFlagCd","text"]]);
			Ds_Pibo.setCellData(0, "sDrveFlagCd", "1");
		}
	}

    //END (N1411-00267)
    if (util.isNull(cmb_Plan.getValue())) {
		scwin.fn_setRule(parent.edt_sGdCd.getValue());
        /*
		//장기보험고도화 - 상품정보 재조회시 피보험자변경 flag 취소
		sInrpsInfoChg = false;
		*/
    } else {
        if (Ds_Pibo_BackUp.getCellData(nRow, "sInrpsCd") != Ds_Pibo.getCellData(nRow, "sInrpsCd") ||
        	Ds_Pibo_BackUp.getCellData(nRow, "sDrveFlagCd") != Ds_Pibo.getCellData(nRow, "sDrveFlagCd")) {
            if (!util.isNull(parent.edt_sGdCd.getValue())) {
                //fn_setRule();
                /*			
                //장기보험고도화 - 피보험자정보 변경시 연금개시나이 및 플랜 재조회
                sInrpsInfoChg = true;
                */
                //장기보험고도화 - 피보험자 변경시 연금개시나이 재조회를 위해 이벤트 발생시킴
                runOnCellPosChanged = true;

                //피보험자별 특약을 조회하기 위해 먼저 셋팅
                Ds_Pibo.setCellData(nRow, "sInrpsName", Ds_long_mPlr.getCellData(0, "sName")); //성명
                //Ds_Pibo.SetColumn(nRow, "sDrveFlagCd", Ds_long_mPlr.getCellData(0,"sDrvCls"));//운전용도
                //해당 피보험자로 선택 시킨 후 피보험자특약 조회
                scwin.Grd_Pibo_OnCellPosChanged(nRow, 0, nRow, -1, "Y"); //사용자호출 Y //lfn_searchPiboTrty("", nRow); 
            }
        }
    }

    if (Ds_long_mPlr.getRowCount() > 0) {

        //wconv.trace("5140054=" + wconv.saveXml(Ds_long_mPlr));
        Ds_Pibo.setCellData(nRow, "sInrpsCd", Ds_long_mPlr.getCellData(0, "sCustNo")); //주민번호
        Ds_Pibo.setCellData(nRow, "sInrpsFlagCd", Ds_long_mPlr.getCellData(0, "sCustType")); //구분코드
        Ds_Pibo.setCellData(nRow, "sInrpsName", Ds_long_mPlr.getCellData(0, "sName")); //성명
        Ds_Pibo.setCellData(nRow, "sJobCd", Ds_long_mPlr.getCellData(0, "sJobCode")); //직업코드
        Ds_Pibo.setCellData(nRow, "sJobName", Ds_long_mPlr.getCellData(0, "sJobName")); //직업명
        Ds_Pibo.setCellData(nRow, "sJobGradCd", Ds_long_mPlr.getCellData(0, "sJobCls")); //직업급수
        //Ds_Pibo.SetColumn(nRow, "sDrveFlagCd", Ds_long_mPlr.getCellData(0,"sDrvCls"));//운전용도
        Ds_Pibo.setCellData(nRow, "sInrpsSexFlag", scwin.lfn_getSex(Ds_Pibo.getCellData(nRow, "sInrpsCd"))); //피보험자성별구분           
        Ds_Pibo.setCellData(nRow, "sInrpsCstId", Ds_long_mPlr.getCellData(0, "sCstId")); //피보험자고객ID             
        Ds_Pibo.setCellData(nRow, "nCstChngSeqno", Ds_long_mPlr.getCellData(0, "nSeqNo")); //고객변경일련번호         
        Ds_Pibo.setCellData(nRow, "sCstFlgcd", Ds_long_mPlr.getCellData(0, "sCustType")); //고객구분코드             
        Ds_Pibo.setCellData(nRow, "sAddrFlgcd", "1"); //주소구분코드   1 자택 2 직장          
        Ds_Pibo.setCellData(nRow, "nAddrChngSeq", Ds_long_mPlr.getCellData(0, "nHomAdrsChangeNo")); //주소변경회차             
        Ds_Pibo.setCellData(nRow, "nTelnoChngSeq", Ds_long_mPlr.getCellData(0, "nTelChangeNo")); //전화번호변경회차         
        //보험나이계산
        Ds_Pibo.setCellData(nRow, "nInrpsAge", gfn_getInsAge(Ds_Pibo.getCellData(nRow, "sInrpsCd"), cal_sSsrtDate.getValue())); //나이

        nInrpsAgeNew = Ds_Pibo.getCellData(nRow, "nInrpsAge");

        //trace("nInrpsAgeOld:" + nInrpsAgeOld);
        //trace("nInrpsAgeNew:" + nInrpsAgeNew);
        //주민번호, 운전용도backup
        Ds_Pibo_BackUp.setCellData(nRow, "sInrpsCd", Ds_Pibo.getCellData(nRow, "sInrpsCd"));
        Ds_Pibo_BackUp.setCellData(nRow, "sDrveFlagCd", Ds_Pibo.getCellData(nRow, "sDrveFlagCd"));
        //운전용도 셋팅
        //Grd_Pibo.SetCellProp("body", 11, "edit", "combo"); //ldh
        Grd_Pibo.setColumnReadOnly(11, false);
        
        //첫번째 피보험자로 계약자 셋팅
        // 장기보험고도화 - 연금저축의 경우 계피 동일 처리
        if (nRow == 0) {
            if (parent.medt_PlanNo.getValue() == "" || parent.Ds_LTIDA03.getRowCount() == 0 ||
            	Ds_Pibo.getCellData(nRow, "sInrpsCd") == parent.Ds_LTIDA03.getCellData(0, "sCrtorCd") ||
            	DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {
                // 업무보고서분류코드-7:연금
                //계약자사항 setting;
                //parent.Ds_LTIDA03.SetColumn(0, "sPlanNo", parent.Ds_LTIDA00.getCellData(0, "sPlanNo"));	      //설계번호
                if (parent.Ds_LTIDA03.getRowCount() == 0) {
                    util.appendRow(parent.Ds_LTIDA03);
                    parent.Ds_LTIDA03.setCellData(0, "sEnntmPftbpFlagCd", ""); //만기시수익자구분코드     
                    parent.Ds_LTIDA03.setCellData(0, "sEndPftbpRelnCd", ""); //만기수익자관계코드       
                    parent.Ds_LTIDA03.setCellData(0, "sEndPftbpCd", ""); //만기수익자코드           
                    parent.Ds_LTIDA03.setCellData(0, "sEndPftbpName", ""); //만기수익자명             
                    parent.Ds_LTIDA03.setCellData(0, "sEndPftbpCntad", ""); //만기수익자연락처         
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntFlagCd", ""); //지정대리인구분코드       
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntRelnCd", ""); //지정대리인관계코드       
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntCd", ""); //지정대리인코드           
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntName", ""); //지정대리인명             
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntCntad", ""); //지정대리인연락처 		 
                    parent.Ds_LTIDA03.setCellData(0, "sEnntmPftbpYn", "N"); //만기수익자입력상태
                    parent.Ds_LTIDA03.setCellData(0, "sAsmtAgntYn", "N"); //지정대리인입력상태		
                    parent.Ds_LTIDA00.setCellData(0, "sTaxPrfrYn", "N");
                }
                parent.Ds_LTIDA03.setCellData(0, "nCrChngNo", "0"); //계약변경번호             
                parent.Ds_LTIDA03.setCellData(0, "sCrtorFlgcd", Ds_long_mPlr.getCellData(0, "sCustType")); //계약자구분코드           
                parent.Ds_LTIDA03.setCellData(0, "sCrtorCd", Ds_long_mPlr.getCellData(0, "sCustNo")); //계약자코드               
                parent.Ds_LTIDA03.setCellData(0, "sCrtorName", Ds_long_mPlr.getCellData(0, "sName")); //계약자명                 
                parent.Ds_LTIDA03.setCellData(0, "nCrtorAge", gfn_getInsAge(parent.Ds_LTIDA03.getCellData(0, "sCrtorCd"), Ds_LTIDA00.getCellData(0, "sSsrtDate"))); //계약자연령
                parent.Ds_LTIDA03.setCellData(0, "sCrtorSexFlag", scwin.lfn_getSex(parent.Ds_LTIDA03.getCellData(0, "sCrtorCd"))); //계약자성별구분           
                parent.Ds_LTIDA03.setCellData(0, "sCrtorCstId", Ds_long_mPlr.getCellData(0, "sCstId")); //계약자고객ID             
                parent.Ds_LTIDA03.setCellData(0, "nCstChngSeqno", Ds_long_mPlr.getCellData(0, "nSeqNo")); //고객변경일련번호         
                parent.Ds_LTIDA03.setCellData(0, "sCstFlgcd", Ds_long_mPlr.getCellData(0, "sCustType")); //고객구분코드             
                parent.Ds_LTIDA03.setCellData(0, "sAddrFlgcd", "1"); //주소구분코드   1 자택 2 직장          
                parent.Ds_LTIDA03.setCellData(0, "nAddrChngSeq", Ds_long_mPlr.getCellData(0, "nHomAdrsChangeNo")); //주소변경회차             
                parent.Ds_LTIDA03.setCellData(0, "nTelnoChngSeq", Ds_long_mPlr.getCellData(0, "nTelChangeNo")); //전화번호변경회차         
                parent.Ds_LTIDA03.setCellData(0, "sMailRvadAddrFlagCd", Ds_long_mPlr.getCellData(0, "sDMAdrsTyp")); //우편물수령처주소구분코드 
                parent.Ds_LTIDA03.setCellData(0, "nMailRvadChngSeq", Ds_long_mPlr.getCellData(0, "nAdrsChangeNo")); //우편물수령처변경회차     
                parent.Ds_LTIDA03.setCellData(0, "sZip1", wconv.substr(Ds_long_mPlr.getCellData(0, "sHomZco"), 0, 3)); //우편번호
                parent.Ds_LTIDA03.setCellData(0, "sZip2", wconv.substr(Ds_long_mPlr.getCellData(0, "sHomZco"), 3, 3)); //우편번호
                parent.Ds_LTIDA03.setCellData(0, "sFax1", Ds_long_mPlr.getCellData(0, "sFax1")); //fax번호
                parent.Ds_LTIDA03.setCellData(0, "sFax2", Ds_long_mPlr.getCellData(0, "sFax2")); //fax번호
                parent.Ds_LTIDA03.setCellData(0, "sFax3", Ds_long_mPlr.getCellData(0, "sFax3")); //fax번호
                parent.Ds_LTIDA03.setCellData(0, "sEmail1", Ds_long_mPlr.getCellData(0, "sEmail1")); //이메일
                parent.Ds_LTIDA03.setCellData(0, "RvadAddr", Ds_long_mPlr.getCellData(0, "sAdrs1") + " " + Ds_long_mPlr.getCellData(0, "sAdrs2")); //우편물수령처주소
                parent.Ds_LTIDA03.setCellData(0, "sAdrs1", Ds_long_mPlr.getCellData(0, "sHomAdr1")); //집주소
                parent.Ds_LTIDA03.setCellData(0, "sAdrsAdd", Ds_long_mPlr.getCellData(0, "sHomAdr2")); //집주소
                parent.Ds_LTIDA03.setCellData(0, "sHomeTel1", Ds_long_mPlr.getCellData(0, "sHomeTel1")); //집전화번호
                parent.Ds_LTIDA03.setCellData(0, "sHomeTel2", Ds_long_mPlr.getCellData(0, "sHomeTel2")); //집전화번호
                parent.Ds_LTIDA03.setCellData(0, "sHomeTel3", Ds_long_mPlr.getCellData(0, "sHomeTel3")); //집전화번호
                parent.Ds_LTIDA03.setCellData(0, "sOfficeTel1", Ds_long_mPlr.getCellData(0, "sOfficeTel1")); //사무실전화번호
                parent.Ds_LTIDA03.setCellData(0, "sOfficeTel2", Ds_long_mPlr.getCellData(0, "sOfficeTel2")); //사무실전화번호
                parent.Ds_LTIDA03.setCellData(0, "sOfficeTel3", Ds_long_mPlr.getCellData(0, "sOfficeTel3")); //사무실전화번호
                parent.Ds_LTIDA03.setCellData(0, "sCellPhone1", Ds_long_mPlr.getCellData(0, "sCellPhone1")); //핸드폰번호
                parent.Ds_LTIDA03.setCellData(0, "sCellPhone2", Ds_long_mPlr.getCellData(0, "sCellPhone2")); //핸드폰번호
                parent.Ds_LTIDA03.setCellData(0, "sCellPhone3", Ds_long_mPlr.getCellData(0, "sCellPhone3")); //핸드폰번호
                //			if (length(parent.medt_PlanNo.Value) > 0){
                //				fn_calPrem();
                //			}			
            }


            // 피보험자가 변경되었을때 기 보험종목이 선택되었다면 특약 셋팅 초기화 처리.(예외처리 : 피보험자의 나이가 같은 경우는 초기화 제외)
            if ((wconv.length(parent.edt_sGdCd.getValue()) > 0) && (nInrpsAgeOld != nInrpsAgeNew)) {
                scwin.lfn_PlanChanged("", "", "", "");
                scwin.lfn_TrtyInsAmtInit(cmb_Plan);
                scwin.lfn_PaymCyclSet();
            }
        }
    }
};




//---------------------------------------------------------------------------
// function 명 : lfn_TrtyDataSetSet
// 내용        : 특약 데이터셋에 copy를 할경우 정의된 컬럼이 삭제되어서 추가해줌
//---------------------------------------------------------------------------
scwin.lfn_TrtyDataSetSet = function() { //완료
	var inColInfo = [];
    if (util.isNull(Ds_Trty.getColumnIndex("sBascSlctFlagCd"))) {
    	inColInfo.push(["sBascSlctFlagCd","sBascSlctFlagCd","text"]);
    };
    if (util.isNull(Ds_Trty.getColumnIndex("sTrtyName"))) {
    	inColInfo.push(["sTrtyName","sTrtyName","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sPlanNo"))) {
    	inColInfo.push(["sPlanNo","sPlanNo","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sPsnPrprtGroupFlgcd"))) {
    	inColInfo.push(["sPsnPrprtGroupFlgcd","sPsnPrprtGroupFlgcd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nPsnPrprtGroupSeqno"))) {
    	inColInfo.push(["nPsnPrprtGroupSeqno","nPsnPrprtGroupSeqno","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nCrChngNo"))) {
    	inColInfo.push(["nCrChngNo","nCrChngNo","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nTrtyOrdr"))) {
    	inColInfo.push(["nTrtyOrdr","nTrtyOrdr","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sScrnIndcYn"))) {
    	inColInfo.push(["sScrnIndcYn","sScrnIndcYn","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sGdCd"))) {
    	inColInfo.push(["sGdCd","sGdCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sGnrzCd"))) {
    	inColInfo.push(["sGnrzCd","sGnrzCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sAutoRenwlAvaYn"))) {
    	inColInfo.push(["sAutoRenwlAvaYn","sAutoRenwlAvaYn","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sAutoRenwlCyclCd"))) {
    	inColInfo.push(["sAutoRenwlCyclCd","sAutoRenwlCyclCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nSelfChamt"))) {
    	inColInfo.push(["nSelfChamt","nSelfChamt","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sGrntAccuFlagCd"))) {
    	inColInfo.push(["sGrntAccuFlagCd","sGrntAccuFlagCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nAccuPrem"))) {
    	inColInfo.push(["nAccuPrem","nAccuPrem","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nExptGrntBussPrem"))) {
    	inColInfo.push(["nExptGrntBussPrem","nExptGrntBussPrem","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nRiskPrem"))) {
    	inColInfo.push(["nRiskPrem","nRiskPrem","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nTrtyPrem"))) {
    	inColInfo.push(["nTrtyPrem","nTrtyPrem","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nRenwlSeq"))) {
    	inColInfo.push(["nRenwlSeq","nRenwlSeq","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sRenwlYn"))) {
    	inColInfo.push(["sRenwlYn","sRenwlYn","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nRealPaymTerm"))) {
    	inColInfo.push(["nRealPaymTerm","nRealPaymTerm","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nRealInsurTerm"))) {
    	inColInfo.push(["nRealInsurTerm","nRealInsurTerm","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nPaymAge"))) {
    	inColInfo.push(["nPaymAge","nPaymAge","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("nEndAge"))) {
    	inColInfo.push(["nEndAge","nEndAge","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sTrtyStatCd"))) {
    	inColInfo.push(["sTrtyStatCd","sTrtyStatCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sInsurStrtdate"))) {
    	inColInfo.push(["sInsurStrtdate","sInsurStrtdate","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sInsurEndDate"))) {
    	inColInfo.push(["sInsurEndDate","sInsurEndDate","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sCnclExtnEndDate"))) {
    	inColInfo.push(["sCnclExtnEndDate","sCnclExtnEndDate","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("TrtyFlagCd"))) {
    	inColInfo.push(["TrtyFlagCd","TrtyFlagCd","text"]);
    }
    if (util.isNull(Ds_Trty.getColumnIndex("sResvAmtKey"))) {
    	inColInfo.push(["sResvAmtKey","sResvAmtKey","text"]);
    }
    if (inColInfo.length > 0) {
    	util.insertColumn(Ds_Trty, inColInfo);
    	util.setCompBindRefresh("Ds_Trty");
    }
    
    var inColInfo = [];
    if (util.isNull(Ds_Pibo.getColumnIndex("sPmmiInsurFlagCd"))) {
    	inColInfo.push(["sPmmiInsurFlagCd","sPmmiInsurFlagCd","text"]);
    }
    if (util.isNull(Ds_Pibo.getColumnIndex("sPsnInfoOferAgreYn"))) {
    	inColInfo.push(["sPsnInfoOferAgreYn","sPsnInfoOferAgreYn","text"]);
    }
    if (util.isNull(Ds_Pibo.getColumnIndex("sMNumCrInsAgreYn"))) {
    	inColInfo.push(["sMNumCrInsAgreYn","sMNumCrInsAgreYn","text"]);
    }
    if (inColInfo.length > 0) {
    	util.insertColumn(Ds_Pibo, inColInfo);
    	util.setCompBindRefresh("Ds_Pibo");
    }
};



/*-----------------------------------
// function 명 : lfn_GdsDlng
// 내용        : 상품별 처리
-----------------------------------*/
scwin.lfn_GdsDlng = function() { //완료

    //trace("#####	C10_Div1.lfn_GdsDlng	DsWs_PrdAttr.getCellData(0, BunsMetdDocuClsfCd) ===> " + DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd"));
    // 연금상품 판단
    if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {
        // 업무보고서분류코드-7:연금
        // 연금상품일때
        cmb_AnntOpnAgeCd.setDisabled(false); // 연금개시나이
        cmb_AnntPymTermCd.setDisabled(false); // 연금지급기간
        cmb_AnntPymTypeCd.setDisabled(false); // 연금지급형태
        cmb_AnntPymCyclCd.setDisabled(false); // 연금지급주기
        // 연금개시나이
        if (DsWs_AnntOpnAgeCd.getRowCount() == 0) {
            wprom.alert("연금개시나이 조회건이 없습니다.");
        } else {
            var insRow = util.insertRow(DsWs_AnntOpnAgeCd, 0);
            /*수작업 변환 개발자 가이드(테스트 중)
            dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
            DsWs_AnntOpnAgeCd.setCellData(0, "sAnntOpnAgeCd", "");
            DsWs_AnntOpnAgeCd.setCellData(0, "sAnntOpnAgeCdName", "- 선택 -");

            //			div_Annty.cmb_AnntOpnAgeCd.BindDataset = "Ds_LTIDA00";
            //			if (length(Ds_LTIDA00.getCellData(0, "sAnntOpnAgeCd")) == 0) {
            cmb_AnntOpnAgeCd.setSelectedIndex(1);
            //			}
        }


        // 연금지급기간
        if (DsWs_AnntPymTermCd.getRowCount() == 0) {
            wprom.alert("연금지급기간 조회건이 없습니다.");
        } else {
            var insRow = util.insertRow(DsWs_AnntPymTermCd, 0);
            /*수작업 변환 개발자 가이드(테스트 중)
            dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
            DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCd", "");
            DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCdName", "- 선택 -");

            //			div_Annty.cmb_AnntPymTermCd.BindDataset = "Ds_LTIDA00";
            //			if (length(Ds_LTIDA00.getCellData(0, "sAnntPymTermCd")) == 0) {
            cmb_AnntPymTermCd.setSelectedIndex(1); //			}
        }


        // 연금지급형태
        if (DsWs_AnntPymTypeCd.getRowCount() == 0) {
            wprom.alert("연금지급형태 조회건이 없습니다.");
        } else {
            var insRow = util.insertRow(DsWs_AnntPymTypeCd, 0);
            /*수작업 변환 개발자 가이드(테스트 중)
            dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
            DsWs_AnntPymTypeCd.setCellData(0, "sAnntPymTypeCd", "");
            DsWs_AnntPymTypeCd.setCellData(0, "sAnntPymTypeCdName", "- 선택 -");

            //			div_Annty.cmb_AnntPymTypeCd.BindDataset = "Ds_LTIDA00";
            //			if (length(Ds_LTIDA00.getCellData(0, "sAnntPymTypeCd")) == 0) {
            cmb_AnntPymTypeCd.setSelectedIndex(1); //			}
        }


        // 연금지급주기
        if (DsWs_AnntOpnAgeCd.getRowCount() == 0) {
            wprom.alert("연금지급주기 조회건이 없습니다.");
        } else {
            var insRow = util.insertRow(DsWs_AnntPymCyclCd, 0);
            /*수작업 변환 개발자 가이드(테스트 중)
            dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
            DsWs_AnntPymCyclCd.setCellData(0, "sAnntPymCyclCd", "");
            DsWs_AnntPymCyclCd.setCellData(0, "sAnntPymCyclCdName", "- 선택 -");

            //			div_Annty.cmb_AnntPymCyclCd.BindDataset = "Ds_LTIDA00";
            //			if (length(Ds_LTIDA00.getCellData(0, "sAnntPymCyclCd")) == 0) {
            cmb_AnntPymCyclCd.setSelectedIndex(1); //			}
        }
    } else {
        // 연금상품 아닐때
        cmb_AnntOpnAgeCd.setDisabled(true); // 연금개시나이
        cmb_AnntPymTermCd.setDisabled(true); // 연금지급기간
        cmb_AnntPymTypeCd.setDisabled(true); // 연금지급형태
        cmb_AnntPymCyclCd.setDisabled(true); // 연금지급주기
    }
};




/*-----------------------------------
// function 명 : lfn_TrtyList_Relation_Check
// 내용        : 특약전체 관계체크
-----------------------------------*/
scwin.lfn_TrtyList_Relation_Check = function(nRow) { //완료

    //Ds_Trty.FireEvent = false; //이벤트 발생이 안되도록 셋팅
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);
    
    for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
        //베타그룹체크
        scwin.lfn_Trty_Relation_sExcluGroupCd(i, "all");
    }
    scwin.lfn_Trty_Drv_chk(nRow);
    
    //Ds_Trty.FireEvent = true;
    util.setDataListEvent(Ds_Trty, dsListEvArray);
};


//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_sExcluGroupCd
// 내용        : 특약간 관계 체크(베타그룹체크)
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_sExcluGroupCd = function(nRow, all) { //완료
    //베타그룹체크1
    for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
        if (Ds_Trty.getCellData(i, "chk") != "1") {
            continue;
        }

        //그룹코드가 없으면 체크필요없음
        if (wconv.length(Ds_Trty.getCellData(i, "sGroupCd")) <= 0) {
            continue;
        }
        var sGroupCd = Ds_Trty.getCellData(i, "sGroupCd");
        var sExcluGroupCd1 = Ds_Trty.getCellData(nRow, "sExcluGroupCd1");
        var sExcluGroupCd2 = Ds_Trty.getCellData(nRow, "sExcluGroupCd2");
        var sExcluGroupCd3 = Ds_Trty.getCellData(nRow, "sExcluGroupCd3");
        var sExcluGroupCd4 = Ds_Trty.getCellData(nRow, "sExcluGroupCd4");
        var sExcluGroupCd5 = Ds_Trty.getCellData(nRow, "sExcluGroupCd5");
        var sExcluGroupCd6 = Ds_Trty.getCellData(nRow, "sExcluGroupCd6");
        var sExcluGroupCd7 = Ds_Trty.getCellData(nRow, "sExcluGroupCd7");
        var sExcluGroupCd8 = Ds_Trty.getCellData(nRow, "sExcluGroupCd8");
        var sExcluGroupCd9 = Ds_Trty.getCellData(nRow, "sExcluGroupCd9");
        var sExcluGroupCd10 = Ds_Trty.getCellData(nRow, "sExcluGroupCd10");
        var sExcluGroupCd11 = Ds_Trty.getCellData(nRow, "sExcluGroupCd11");
        var TrtyHnglAbbName = Ds_Trty.getCellData(nRow, "TrtyHnglAbbName");

        //베타그룹값과 같은 그룹코드값을 찾는다.		
        if (sGroupCd == sExcluGroupCd1 || sGroupCd == sExcluGroupCd2 || sGroupCd == sExcluGroupCd3 ||
            sGroupCd == sExcluGroupCd4 || sGroupCd == sExcluGroupCd5 || sGroupCd == sExcluGroupCd6 || 
            sGroupCd == sExcluGroupCd7 || sGroupCd == sExcluGroupCd8 || sGroupCd == sExcluGroupCd9 || 
            sGroupCd == sExcluGroupCd10 || sGroupCd == sExcluGroupCd11) {
            if (wconv.length(all) == 0) {
                wprom.alert("'" + Ds_Trty.getCellData(i, "TrtyHnglAbbName") + "' 특약과 '" + TrtyHnglAbbName + "' 특약은 동시가입이 불가합니다.");
            }
            Ds_Trty.setCellData(nRow, "chk", "0");
            scwin.lfn_Trty_Relation_Pkg(Ds_Trty, Ds_Trty.getCellData(nRow, "sPkgCd"), false);
            break;
        }
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_Pkg
// 내용        : 특약간 관계 체크(패키지체크)
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_Pkg = function(obj, sPkgCd, chk) { //완료
    //패키지체크
    for (var i = 0; i < obj.getRowCount(); i++) {
        //패키지값과 같은 그룹코드값을 찾는다.		
        if (wconv.length(obj.getCellData(i, "sPkgCd")) > 0 && wconv.length(sPkgCd) > 0 && (obj.getCellData(i, "sPkgCd") == sPkgCd)) {
            //trace("sPkgCd=="+obj.getCellData(i,"sPkgCd")+"==sPkgCd=="+sPkgCd+"==sTrtyCd=="+obj.getCellData(i, "sTrtyCd"));		
            //체크인경우
            if (chk) {
                obj.setCellData(i, "chk", "1");
            } else {
                obj.setCellData(i, "chk", "0");
                //보험료 초기화
                obj.setCellData(i, "nGrntPrem", ""); //보장보험료
                obj.setCellData(i, "nExptGrntBussPrem", ""); //예상보장영업보험료				
            }
        }
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Drv_chk
// 내용        : 운전용도 체크
//---------------------------------------------------------------------------
scwin.lfn_Trty_Drv_chk = function(nRow) { //완료
    var sDrveFlagCd = "";
    if (nRow >= 0) {
        sDrveFlagCd = Ds_Pibo.getCellData(nRow, "sDrveFlagCd"); //운전용도
    } else {
        sDrveFlagCd = Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sDrveFlagCd"); //운전용도
    }

    //trace("sDrveFlagCd:" + sDrveFlagCd);
    if (sDrveFlagCd == "2") {
        for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
            if (Ds_Trty.getCellData(i, "BussInsAvaYn") != "Y") {
                Ds_Trty.setCellData(i, "chk", "0");
            }
        }
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_init_Prem
// 내용        : 합계보험료column초기화
//---------------------------------------------------------------------------
scwin.lfn_init_Prem = function() { //완료
    //사전조회사항초기화
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "MediFlag", "N");
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "fixFlag", "N");
    btn_Medical.setDisabled(true);
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasPronCmpsTrty", "N"); //실손가입 확인
    Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "hasFxamtCmps", "N");
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        Ds_Pibo.setCellData(i, "sPsnInfoOferAgreYn", "N");
        Ds_Pibo.setCellData(i, "sMNumCrInsAgreYn", "N");
    }
    Ds_LTIDA00.setCellData(0, "nGrntPrem", 0); //보장보험료
    Ds_LTIDA00.setCellData(0, "nAccuPrem", 0); //적립보험료
    Ds_LTIDA00.setCellData(0, "nDcPrem", 0); //할인보험료
    Ds_LTIDA00.setCellData(0, "nApplPrem", 0); //적용보험료
    Ds_LTIDA00.setCellData(0, "nMinPrem", 0); //최소보험료
    Ds_LTIDA00.setCellData(0, "nMaxPrem", 0); //최대보험료
    Ds_LTIDA00.setCellData(0, "nBussPrem", 0); //영업보험료
    Ds_LTIDA00.setCellData(0, "nExptEndRetrnAmt", 0); //예상환급금
    Ds_LTIDA00.setCellData(0, "nExptEndRtnrt", 0); //예상환급율
    //피보험자에 종속되어있는 데이타삭제(타보험, 질의서, 부담보)
    scwin.lfn_deleteEtc(wconv.findRow(Ds_Pibo, "sel", "1"), "N");

    //플랜에 따른 영업보험료변경가능여부가 N인경우 영업보험료 비활성화처리
    if (DsWs_Plan.getCellData(0, "sPremAmtChgYn") == "N") {
        medt_nBussPrem.setDisabled(true);
    } else {
        medt_nBussPrem.setDisabled(false);
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_getSex
// 내용        : 성별을 체크한다.
//---------------------------------------------------------------------------
scwin.lfn_getSex = function(val) { //완료
    if ("1357".indexOf(wconv.substr(val, 6, 1)) >= 0) {
        return "1";
    } else if ("2468".indexOf(wconv.substr(val, 6, 1)) >= 0) {
        return "2";
    } else {
        return "";
    }
};



/*-----------------------------------
// function 명 : lfn_PlanChanged
// 내용        : 플랜변경조회
-----------------------------------*/
scwin.lfn_PlanChanged_viewChange = function(info) { //완료
	scwin.lfn_PlanChanged("", "", info.oldValue, info.newValue);
}
scwin.lfn_PlanChanged = function(strCode, strText, nOldIndex, nNewIndex) { //완료

    if (wconv.length(wconv.trim(Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsName"))) <= 0) {
        cmb_Plan.setSelectedIndex(nOldIndex);
        wprom.alert("고객등록을 먼저 해주세요.");
        return;
    }
    //Ds_Pibo.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Pibo);
	util.removeAllDataListEvent(Ds_Pibo);

    scmb_plan = true; //plan변경 flag.
    
    for (var i = 0; i < Ds_Pibo.getTotalRow(); i++) {
        util.setCellDataF(Ds_Pibo, i, "sApplPlanCd", cmb_Plan.getValue());
        util.setCellDataF(Ds_Pibo, i, "sApplPlanName", cmb_Plan.getValue());
    }

    //trace("nNewIndex==="+nNewIndex);
    //nMinPrem = DsWs_Plan.getCellData(nNewIndex,"");
    wconv.clear(DsWs_InsurTerm);
    wconv.clear(DsWs_PaymTerm);
    wconv.clear(DsWs_Trty);
    wconv.clear(DsWs_InsurTermPaymTerm);
    wconv.clear(Dsws_InsAmt);
    wconv.clear(Ds_Trty_Backup); //특약 백업용 초기화
    wconv.clear(DsWs_TrtyTerm);
    
    var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB331Task", "getAnntPlanTrty", "", "");
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("getAnntPlanTrty");
	transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); //상품코드
	transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); //종형코드
	transObj.setParam("sStndDate", Ds_LTIDA00.getCellData(0, "sSsrtDate")); //청약일
	transObj.setParam("sPlanCd", cmb_Plan.getValue()); //플랜코드
	transObj.setParam("sPlanName", cmb_Plan.getText()); //플랜명
	transObj.setParam("sResno", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsCd")); //피보험자주민번호	
	transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sDrveFlagCd")); //주민번호 
	transObj.setParam("sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); // 업무보고서분규코드
	transObj.setParam("sAnntOpnAgeCd", Ds_LTIDA00.getCellData(0, "sAnntOpnAgeCd")); // 연금개시나이
	transObj.setParam("sAnntPymTermCd", Ds_LTIDA00.getCellData(0, "sAnntPymTermCd")); // 연금지급기간
	/*if( Ds_LTIDA00.getCellData(0,"sDoer") == NULL || Ds_LTIDA00.getCellData(0,"sDoer") == "" ) {
    	gfn_SetParam(MethodObj, "sDoer", gDoer);//취급자
    	gfn_SetParam(MethodObj, "sDoerUser", gDoerUser);//사용인
    }
    else{
    	gfn_SetParam(MethodObj, "sDoer", Ds_LTIDA00.getCellData(0,"sDoer"));//취급자
    	gfn_SetParam(MethodObj, "sDoerUser", Ds_LTIDA00.getCellData(0,"sDoerUser"));//사용인
    }*/
	transObj.setParam("sDoer", parent.edt_sDoer.getValue()); //취급자
	transObj.setParam("sDoerUser", parent.edt_sDoerUser.getValue()); //사용인

	transObj.setXPath("//*/WARNING");
	transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='multi']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi");
	transObj.addXPath("//hashtable/data[@hashkey='InsAmt']/vector/data/multi");    
	transObj.addXPath("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi");
	/*
    gfn_SetParam(MethodObj, 
    gfn_SetParam(MethodObj, 
    DsWs_Warning.DataObject = "DOBJ_PlanTrty";
    DsWs_InsurTerm.DataObject = "DOBJ_PlanTrty";
    DsWs_Trty.DataObject = "DOBJ_PlanTrty";
    DsWs_PaymTerm.DataObject = "DOBJ_PlanTrty";
    DsWs_InsurTermPaymTerm.DataObject = "DOBJ_PlanTrty";
    Dsws_InsAmt.DataObject = "DOBJ_PlanTrty";
    DsWs_TrtyTerm.DataObject = "DOBJ_PlanTrty";
    DsWs_AnntOpnAgeCd.DataObject = "DOBJ_Rule"; //연금개시나이 재계산되는걸 막기 위해
    //특약 xpath 변경
    DsWs_Trty.XPath = "//hashtable/data[@hashkey='multi']/vector/data/multi";
    //DsWs_PaymTerm.XPath = "//hashtable/data[@hashkey='PaymTerm']/vector/data/multi";
    */
    transObj.setXPathDs();
    transObj.sync();
	transObj.send();
	
    util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");

    if (DsWs_Warning.getRowCount() != 0) {
        wprom.alert(DsWs_Warning.getCellData(0, "msg"));
        return;
    } else {
    
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm", "Y");
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='multi']/vector/data/multi"), "DsWs_Trty", "Y");
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm", "Y");
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi"), "DsWs_InsurTermPaymTerm", "Y");
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsAmt']/vector/data/multi"), "Dsws_InsAmt", "Y");
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi"), "DsWs_TrtyTerm", "Y");
    	
    
        //trace("보험기간=="+DsWs_InsurTerm.SaveXML());	
        //trace("특약=="+DsWs_Trty.SaveXML());	
        //보기납기 첫번째 세팅
        cmb_InsurTermPaymTerm.setSelectedIndex(0);
        //lfn_InsurTermPaymTermChanged(obj,cmb_InsurTermPaymTerm.Value,cmb_InsurTermPaymTerm.Value,0,0);
        //Ds_Trty.FireEvent = false;
        var dsListEvArray1 = util.getDataListEvent(Ds_Trty);
		util.removeAllDataListEvent(Ds_Trty);

        // 특약세팅
        //wconv.copy(Ds_Trty, "DsWs_Trty");
		util.jSonDsCreate(DsWs_Trty.getAllJSON(), "Ds_Trty", "Y");

        //trace("Ds_Trty:" + Ds_Trty.SaveXML()); 
        scwin.lfn_TrtyDataSetSet();

        // 특약중 화면출력특약만 화면에 보여줌
        //wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >== 0");
        //wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >== 0");
        var funcFilter = function(cellData, tmpParam, rowIdx) {
			if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
				return true;
			}
			return false;
		}
		Ds_Trty.clearFilter();
	    Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
	    var funcFilter = function(cellData, tmpParam, rowIdx) {
			if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
				return true;
			}
			return false;
		}
		Ds_Trty_Backup.clearFilter();
	    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

        // 보험기간,가입금액 초기값 세팅
        scwin.lfn_InsurTermInit();
        //Ds_Trty.FireEvent = true;
        util.setDataListEvent(Ds_Trty, dsListEvArray1);

        // 플랜에 따른 영업보험료변경가능여부가 N인경우 영업보험료 비활성화처리
        if (DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "sPremAmtChgYn") == "N") {
            medt_nBussPrem.setDisabled(true);
        } else {
            medt_nBussPrem.setDisabled(false);
        }

        // 특약관계체크
        scwin.lfn_TrtyList_Relation_Check();
    }


    //trace("Ds_Trty:"+Ds_Trty.SaveXml());
    // 피보험자가 여러명일때 나머지 피보험자의 특약도 조회
    for (var i = 1; i < Ds_Pibo.getTotalRow(); i++) {
        //scwin.lfn_searchPiboTrty(obj, i);
        scwin.lfn_searchPiboTrty(cmb_Plan, i);
    }
    /*
    wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='1'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='1'");
    */
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == "1") {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty.clearFilter();
    Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == "1") {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty_Backup.clearFilter();
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
    
	//Ds_Pibo.FireEvent = true;
	util.setDataListEvent(Ds_Pibo, dsListEvArray);

    // 포커스 이동
    btn_CalcPrem.focus(); // 보험료계산
    //medt_nBussPrem.SetFocus();	// 영업보험료
};
	
	

//---------------------------------------------------------------------------
// function 명 : lfn_ClearTrty
// 내용        : 해당 피보험자의 특약을 데이터셋에서 삭제
//---------------------------------------------------------------------------
scwin.lfn_ClearTrty = function(nRow) {  //완료
    //grd_sTrty.Redraw = false;
    //Ds_Trty.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);

    Ds_Trty.removeColumnFilterAll();
    Ds_Trty_Backup.removeColumnFilterAll();
    for (var k = Ds_Trty.getRowCount() - 1; k >= 0; k--) {
        if (Ds_Trty.getCellData(k, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nRow, "nInrpsSeqno")) {
            util.removeRow(Ds_Trty, k);
            util.removeRow(Ds_Trty_Backup, k);
        }
    }

    var nFindRow = wconv.findRow(Ds_Pibo, "sel", "1");
    /*
    wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "nInrpsSeqno") + "'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "nInrpsSeqno") + "'");
    */
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty.clearFilter();
    Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
    
    var funcFilter = function(cellData, tmpParam, rowIdx) {
		if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRow, "nInrpsSeqno")) {
				return true;
			} else {
				return false;
			}
		}
		return false;
	}
	Ds_Trty_Backup.clearFilter();
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

    //Ds_Trty.FireEvent = true;
    util.setDataListEvent(Ds_Trty, dsListEvArray);
    //grd_sTrty.Redraw = true;
};


/*-----------------------------------
// function 명 : lfn_trtyAddRow
// 내용        : 조회된 특약을 Ds_Tyty에 추가함.
-----------------------------------*/
scwin.lfn_trtyAddRow = function(paramComp, nPsnPrprtGroupSeqno) { //완료

	var obj = {"getID" : function() {return ""}};
	if (!util.isNull(paramComp)) {
		obj = paramComp;
	}

    //trace("DsWs_Trty cnt:" + DsWs_Trty.GetRowCount());
    //grd_sTrty.Redraw = false;
    var nRowPos = Ds_Trty.getRowCount();
    //var jCnt = DsWs_BascTrty.GetRowCount();
    var jCnt = Ds_Trty_Basic.getRowCount();
    for (var i = 0; i < DsWs_Trty.getRowCount(); i++) {
        util.appendRow(Ds_Trty);
        wconv.mi_copyRow("DsWs_Trty", i, Ds_Trty, nRowPos);
        Ds_Trty.setCellData(nRowPos, "nPsnPrprtGroupSeqno", nPsnPrprtGroupSeqno);
        if (obj.getID() == "cmb_Plan") {
            if ((cmb_Plan.getValue()+"").indexOf("자유") >= 0) {
                for (var j = 0; j < jCnt; j++) {
                    if (Ds_Trty.getCellData(nRowPos, "TrtyCd") == Ds_Trty_Basic.getCellData(j, "TrtyCd")) {
                        Ds_Trty.setCellData(nRowPos, "chk", "1");
                        break;
                    } else {
                        Ds_Trty.setCellData(nRowPos, "chk", 0);
                    }
                }
            } else {
                Ds_Trty.setCellData(nRowPos, "chk", "1");
            }
            Ds_Trty.setCellData(nRowPos, "nTrtyPrem", "");
            Ds_Trty.setCellData(nRowPos, "nExptGrntBussPrem", "");
            Ds_Trty.setCellData(nRowPos, "nGrntPrem", "");

            //2011.05.13 실손담보가입시 가입확인(사전조회시 사용)
            if (Ds_Trty.getCellData(nRowPos, "PronCmpsTrtyYn") == "Y") {
                Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "nInrpsSeqno", nPsnPrprtGroupSeqno), "hasPronCmpsTrty", "Y"); //실손가입 확인
            }


            //2011.05.13 정액담보가입시 가입확인(사전조회시 사용)
            if (Ds_Trty.getCellData(nRowPos, "FxamtCmpsFlag") == "Y") {
                Ds_Pibo_BackUp.setCellData(wconv.findRow(Ds_Pibo, "nInrpsSeqno", nPsnPrprtGroupSeqno), "hasFxamtCmps", "Y"); //사전조회버튼 활성화
            }
        }
        nRowPos++;
    }
    //grd_sTrty.Redraw = true;
};


//특약 연령에 따른 보기납기 처리
scwin.lfn_Trty_Age_Limit = function() { //완료
    //Ds_Trty.FireEvent = false; //이벤트 발생이 안되도록 셋팅
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);

    for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
        if (Ds_Trty.getCellData(i, "InrtmPytrMdfcYn") == "Y") {
            Ds_Trty.setCellData(i, "sInsurTermCd", DsWs_Trty.getCellData(wconv.findRow(DsWs_Trty, "sTrtyCd", Ds_Trty.getCellData(i, "sTrtyCd")), "sInsurTermCd"));
            Ds_Trty.setCellData(i, "sPaymTermCd", DsWs_Trty.getCellData(wconv.findRow(DsWs_Trty, "sTrtyCd", Ds_Trty.getCellData(i, "sTrtyCd")), "sPaymTermCd"));
        }
    }
    
    //Ds_Trty.FireEvent = true; //이벤트 발생이 안되도록 셋팅
    util.setDataListEvent(Ds_Trty, dsListEvArray);
};


//---------------------------------------------------------------------------
// function 명 : btn_CalcPrem_OnClick
// 내용        : 보험료계산 버튼클릭시 처리
//---------------------------------------------------------------------------
scwin.btn_CalcPrem_OnClick_Async = function() { //완료
	util.eventAsyncCall(this, scwin.btn_CalcPrem_OnClick, arguments);
}

scwin.btn_CalcPrem_OnClick = function() { //완료

    scmb_plan = false; //플랜변경 확인 
    CalcPremFlag = false; // 보험료 계산 플래그 

    //간편설계는 가입설계 동의 여부 체크 제외
    if (parent.sSimpleYn != "Y") {
        //가입설계 동의 여부 체크 
        for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
            if (scwin.lfn_getCUSAA42Info(Ds_Pibo.getCellData(i, "sInrpsCd")) == "Y") {
                wprom.alert(Ds_Pibo.getCellData(i, "sInrpsName") + "님의 가입설계 동의여부를 확인하세요");
                return;
            }
        }
    }


    /*피보험자 상령일 체크*/
    var insurAgeChk = false;
    var msg = "";
    var sToday = wconv.substr(gfn_GetSysTime(), 0, 8);
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        console.log("상령일 : " + Ds_Pibo.getCellData(i, "nInrpsAge") + " | " + gfn_getInsAge(Ds_Pibo.getCellData(i, "sInrpsCd"), wconv.addDateSimple(sToday, 10)) + " | " + wconv.addDateSimple(sToday, 10) + " | " + Ds_Pibo.getCellData(i, "sInrpsCd"));
        if (Ds_Pibo.getCellData(i, "nInrpsAge") != gfn_getInsAge(Ds_Pibo.getCellData(i, "sInrpsCd"), wconv.addDateSimple(sToday, 10))) {
            insurAgeChk = true;
            if (msg == "") {
                msg = Ds_Pibo.getCellData(i, "sInrpsName");
            } else {
                msg = msg + "," + Ds_Pibo.getCellData(i, "sInrpsName");
            }
        }
    }
    if (insurAgeChk == true) {
        wprom.alert("10일이내 보험나이(상령일)이 변경되는 피보험자가 있습니다.(" + msg + ")");
    }



	//동일피보험자 청약이력확인
    wconv.clear(DsWs_SsrtCarr);
	var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB330Task", "getSsrtCarrCnfm", "", "");
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("DOBJ_Search");
	transObj.setParam("sSsrtDate", Ds_LTIDA00.getCellData(0, "sSsrtDate"));
	transObj.setParam("sInrpsCd", Ds_Pibo.getCellData(0, "sInrpsCd"));
	transObj.setParam("sDoer", parent.edt_sDoer.getValue()); //취급자
	transObj.setParam("sDoerUser", parent.edt_sDoerUser.getValue()); //사용인
	transObj.setXPath("//*/WARNING");
	transObj.addXPath("//*/CUSAA42");
	transObj.addXPath("//vector/data/LTIEA01Job");
	transObj.addXPath("//vector/data/LTIEA01Carr");
	transObj.sync();
	transObj.send();
	//util.interfaceKey(_tranSync.result.serviceDs);

	//util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");
	util.jSonDsCreate(_tranSync.getDsJson("CUSAA42"), "DsWs_Search42", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Job"), "DsWs_PvcrJob", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Carr"), "DsWs_SsrtCarr", "Y");

    if (wconv.substr(Ds_Pibo.getCellData(0, "sInrpsCd"), 7, 6) != "000000") {
        if (DsWs_SsrtCarr.getRowCount() > 0) {
            wprom.alert("최근 1개월 내에 동일한 피보험자로 다른 모집인의 청약이 있습니다.");
        }
    }

    //피보험자중 1명만 가입가능 특약체크
    if (!scwin.lfn_Trty_Relation_OnlyOne({}, -1, "all"))
        return;

    //패키지 특약 가입 체크 //funcldh
    if (scwin.lfn_Trty_Relation_PkgErr({}))
        return;

    //보험료계산
    scwin.fn_calPrem();

    //대면일 경우 보험료 계산후 다음 메세지 팝업.
    if (util.getGdsValue("gFaceSalesYN") == "Y" && parent.sSimpleYn == "Y" && CalcPremFlag) {
        wprom.alert("간편설계로서 인수심사결과에 따라 청약내용 달라질 수 있습니다");
    }

    //세금우대 처리시 보험료 계산하면 초기화
    if (parent.sSimpleYn != "Y") {
        parent.scwin.lfn_Tab_Step2_init();
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_getCUSAA42Info()
// 내용        : 가입설계 동의여부 확인 
//---------------------------------------------------------------------------
scwin.lfn_getCUSAA42Info = function(insrdID) { //완료
    //신용정보 동의 23조 동의여부 확인	 
    wconv.clear(DsWs_Search42);
    var RejectYN = "";
    // 가입설계 동의 여부 체크 
    //var transObj = new callService("com.inswave.customer.task.CustTask", "getCUSAA42Info", 0, 0);
    var transObj = new callService("com.inswave.customer.task.CustTask", "getHandlerCUSAA42Info", 0, 0);
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("DOBJ_Search");
	transObj.setParam("sCustNo", insrdID);
	transObj.setParam("sProductType", "3");

	var sHandlerID = parent.scwin.lfn_GetDoerUser();
	if (wconv.trim(sHandlerID) == "") {
		sHandlerID = util.getGdsValue("gUserID");
	}
	transObj.setParam("sHandlerID", sHandlerID);
	
	transObj.setXPath("//*/WARNING");
	transObj.addXPath("//*/CUSAA42");
	transObj.addXPath("//vector/data/LTIEA01Job");
	transObj.addXPath("//vector/data/LTIEA01Carr");
	transObj.sync();
	transObj.send();
	//util.interfaceKey(_tranSync.result.serviceDs);

	//util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");
	util.jSonDsCreate(_tranSync.getDsJson("CUSAA42"), "DsWs_Search42", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Job"), "DsWs_PvcrJob", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Carr"), "DsWs_SsrtCarr", "Y");

	if (DsWs_Search42.getCellData(0, "result") > 0) {
        if (DsWs_Search42.getCellData(0, "sAgmReq") == "Y") {
            RejectYN = "Y"; //유효일자가 지난경우 다시 받기. 해당 칼럼이 다 체크해줌
        }
    } else {
        RejectYN = "Y"; //가입동의 거부
    }
    return RejectYN;
};

//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_OnlyOne
// 내용        : 특약간 관계 체크(피보험자 중복 가입 체크)
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_OnlyOne = function(obj, nRow, all) { //완료
    var sInrpsDoubInsImprYn = "";
    var sTrtyCd = "";
    var sTrtyName = "";

	if (all == "all") {
        nRow = wconv.findRowF(Ds_Trty, "InrpsDoubInsImprYn", "Y");
        sInrpsDoubInsImprYn = util.getCellDataF(Ds_Trty, nRow, "InrpsDoubInsImprYn");
        sTrtyCd = util.getCellDataF(Ds_Trty, nRow, "sTrtyCd");
        sTrtyName = util.getCellDataF(Ds_Trty, nRow, "TrtyHnglAbbName");
    } else {
        sInrpsDoubInsImprYn = obj.getCellData(nRow, "InrpsDoubInsImprYn");
        sTrtyCd = obj.getCellData(nRow, "sTrtyCd");
        sTrtyName = obj.getCellData(nRow, "TrtyHnglAbbName");
    }
    
    var nInsuCnt = 0;
    
    if (sInrpsDoubInsImprYn == "Y") {
        for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
            if (util.getCellDataF(Ds_Trty, i, "chk") != "1") {
                continue;
            }
            if (sTrtyCd == util.getCellDataF(Ds_Trty, i, "sTrtyCd")) {
                nInsuCnt++;
            }
        }
    }
    if (nInsuCnt > 1) {
        wprom.alert("'" + sTrtyName + "' 특약은 피보험자별 중복가입이 불가합니다.");
        if (all == "all") {
            return false;
        } else {
            obj.setCellData(nRow, "chk", "0");
        }
    }
    return true;
};


//---------------------------------------------------------------------------
// function 명 : lfn_Trty_Relation_PkgErr
// 내용        : 특약간 관계 체크(패키지체크)
//---------------------------------------------------------------------------
scwin.lfn_Trty_Relation_PkgErr = function(obj) { //완료
    var sPkgFlag = ""; //기본 패키지 체크 구분
    var sBascPkgCd = ""; //기본 패키지 코드 
    var sPkgName = ""; //패키지 명칭
    
    //패키지체크
    for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
        //기본 패키지 체크여부와 패키지 코드값을 찾는다.		
        if (wconv.length(util.getCellDataF(Ds_Trty, i, "sPkgCd")) > 0) {
            if (util.getCellDataF(Ds_Trty, i, "BascSlctFlagCd") == "1") {
                if (util.getCellDataF(Ds_Trty, i, "chk") != "1") {
                    sPkgFlag = "1";
                    sBascPkgCd = util.getCellDataF(Ds_Trty, i, "sPkgCd");
                    break;
                }
            }
        }
    }
    if (sPkgFlag == "1") {
        //패키지체크(기본패키지의 명칭 확인)
        for (var j = 0; j < Ds_Trty.getRowCount(); j++) {
            //패키지값과 같은 그룹코드값을 찾는다.		
            if (wconv.length(Ds_Trty.getCellData(j, "sPkgCd")) > 0 && Ds_Trty.getCellData(j, "sPkgCd") == sBascPkgCd) {
                sPkgName = sPkgName + Ds_Trty.getCellData(j, "TrtyHnglAbbName") + ",";
            }
        }
        wprom.alert("기본패키지 특약(" + wconv.substr(sPkgName, 0, wconv.length(sPkgName) - 1) + ")은 선택 필수입니다");
        return true;
    }
    
    return false;
};


//---------------------------------------------------------------------------
// function 명 : fn_calPrem
// 내용        : 보험료계산
//---------------------------------------------------------------------------
scwin.fn_calPrem = function(obj) { //완료
    
    //trace("계약자사항(전)==> " + parent.Ds_LTIDA03.SaveXML());
    // 연금저축가능여부(연금저축한도체크여부) 초기화 - 장기보험고도화
    sAnntSvAvaYn = false;
    
    btn_Medical.setDisabled(true);
    except = "calPrem";

	/*
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        if (Ds_Pibo.getCellData(i, "sDrveFlagCd") == "2") {
            wprom.alert("영업용운전자는 가입금지입니다");
            return;
        }
    }
    */

    // 보험중에 복사 제외 (LDH 2012.5.21)
    if ((wconv.findRow(Ds_Trty, "TrtyCd", "22011801") != "-1") && 
    	(Ds_Trty.getCellData(wconv.findRow(Ds_Trty, "TrtyCd", "22011801"), "nTrtyInsAmt") == 3000000) && 
    	(Ds_Trty.getCellData(wconv.findRow(Ds_Trty, "TrtyCd", "22011801"), "chk") == "1")) {
        if (obj == "copy") {
            wprom.alert("복사할수 없는 특약(" + Ds_Trty.getCellData(wconv.findRow(Ds_Trty, "TrtyCd", "22011801"), "TrtyHnglAbbName") + ")이 있습니다");
        } else {
            wprom.alert("보험료 계산 문제 특약(" + Ds_Trty.getCellData(wconv.findRow(Ds_Trty, "TrtyCd", "22011801"), "TrtyHnglAbbName") + ")이 있습니다");
        }
        return;
    }


    // 청약진행중인 가입설계 보험료 계산 불가 처리.
    if (parent.sSimpleYn == "Y" && (obj != "copy") && wconv.length(parent.medt_PlanNo.getValue()) > 0) {
        parent.scwin.lfn_ProgRankCd();
        if (wconv.length(parent.sSimpleProg) > 0) {
            wprom.alert("청약진행중인 가입설계입니다 \n간편산출을 할수 없습니다.");
            return;
        }
    }

    util.insertColumn(Ds_LTIDA00, [["nMinPremRate", "nMinPremRate", "text"]]);
    util.setCompBindRefresh("Ds_LTIDA00");
    
    Ds_LTIDA00.setCellData(0, "gUserID", util.getGdsValue("gUserID"));
    Ds_LTIDA00.setCellData(0, "gUserIP", util.getGdsValue("gUserIP"));
    Ds_LTIDA00.setCellData(0, "sSaleChnl", parent.sSaleChnl); //판매채널구분코드
    Ds_LTIDA00.setCellData(0, "sSaleChnlDtal", parent.sSaleChnlDtal); //판매채널상세코드
    /*
    if( Ds_LTIDA00.getCellData(0,"sDoer") == NULL || Ds_LTIDA00.getCellData(0,"sDoer") == "") {
    	Ds_LTIDA00.SetColumn(0, "sDoer", gDoer);//취급자
    }
    if( Ds_LTIDA00.getCellData(0,"sDoerUser") == NULL || Ds_LTIDA00.getCellData(0,"sDoerUser") == "") {
    	Ds_LTIDA00.SetColumn(0, "sDoerUser", gDoerUser);//최초취급자사용인	
    }*/
    Ds_LTIDA00.setCellData(0, "sDoer", parent.edt_sDoer.getValue()); //취급자
    Ds_LTIDA00.setCellData(0, "sDoerUser", parent.edt_sDoerUser.getValue()); //최초취급자사용인	
    Ds_LTIDA00.setCellData(0, "sPlanNo", parent.medt_PlanNo.getValue()); //설계번호
    Ds_LTIDA00.setCellData(0, "sApplPlanCd", cmb_Plan.getValue()); //플랜코드(화면에서 선택된 플랜을 가져감)
    Ds_LTIDA00.setCellData(0, "sApplPlanName", cmb_Plan.getValue()); //플랜명
    Ds_LTIDA00.setCellData(0, "sGdCd", parent.edt_sGdCd.getValue()); //상품코드
    Ds_LTIDA00.setCellData(0, "sGnrzCd", parent.edt_sGnrzCd.getValue()); //종형코드
    Ds_LTIDA00.setCellData(0, "sPlanProgRankCd", "20"); //설계진행단계코드(보험료산출(인))
    Ds_LTIDA00.setCellData(0, "sPsnPrprtGroupFlgcd", "1"); //인물단체구분코드(인)
    Ds_LTIDA00.setCellData(0, "sGdTypeFlgCd", DsWs_PrdAttr.getCellData(0, "GdTypeFlagCd")); //상품유형구분
    Ds_LTIDA00.setCellData(0, "sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); //사업실적표분류코드
    Ds_LTIDA00.setCellData(0, "sApplDclrRato", DsWs_PrdAttr.getCellData(0, "ApplDclrRato")); //적용공시이율
    Ds_LTIDA00.setCellData(0, "sGdFlgcd", DsWs_PrdAttr.getCellData(0, "GdFlgcd"));
    Ds_LTIDA00.setCellData(0, "sDvdnFlagCd", DsWs_PrdAttr.getCellData(0, "DvdnFlagCd")); //배당구분코드
    Ds_LTIDA00.setCellData(0, "sPpayAvaYn", DsWs_PrdAttr.getCellData(0, "PpayAvaYn")); //선납가능여부
    Ds_LTIDA00.setCellData(0, "sHsecFlagCd", DsWs_PrdAttr.getCellData(0, "HsecFlagCd")); //가계구분코드
    Ds_LTIDA00.setCellData(0, "sGroupCrAdmNo", Ds_LTIEA10.getCellData(0, "sGroupCrAdmNo")); //단체관리번호
    Ds_LTIDA00.setCellData(0, "sBsmnRgstNo", Ds_LTIEA10.getCellData(0, "sGroupCd")); //단체코드	
    Ds_LTIDA00.setCellData(0, "sTaxPrfrGdYn", DsWs_PrdAttr.getCellData(0, "TaxPrfrGdYn")); //세금우대상품여부
    Ds_LTIDA00.setCellData(0, "sPlanProgRankName", "");
    Ds_LTIDA00.setCellData(0, "nMaxPrem", nMaxPrem);
    Ds_LTIDA00.setCellData(0, "nInrpsPsct", Ds_Pibo.getRowCount()); //피보험자인원수
    
    //간편산출인 경우 간편 산출 구분자 셋팅.	
    if (parent.sSimpleYn == "Y") {
        util.insertColumn(Ds_LTIDA00, [["sSimpleYn","sSimpleYn","text"]]);
        util.setCompBindRefresh("Ds_LTIDA00");
        
        Ds_LTIDA00.setCellData(0, "sSimpleYn", "Y");
        for (var k = 0; Ds_Pibo.getRowCount() > k; k++) {
            //간편산출에서 직업코드가 없는 경우 
            if (wconv.length(Ds_Pibo.getCellData(k, "sJobCd")) < 1) {
                Ds_Pibo.setCellData(k, "sJobCd", "000000"); // 간편산출의 경우 강제 셋팅(000000) 
            }

            //간편설계에서 주민번호가 들어오는 경우  주민번호 0 처리 N1405-00243
            if (wconv.right(Ds_Pibo.getCellData(k, "sInrpsCd"), 6) != "000000") {
                Ds_Pibo.setCellData(k, "sInrpsCd", wconv.left(Ds_Pibo.getCellData(k, "sInrpsCd"), 7) + "000000");
            }
        }
    }
    if (parent.medt_PlanNo.getValue() == "") {
        Ds_LTIDA00.setCellData(0, "sCrNo", ""); //계약번호
        Ds_LTIDA00.setCellData(0, "sCmMetd", ""); //입금방법
    }
    if (util.getBoolean(chk_sPsnGroupFlgcd.getValue()) == true) {
        Ds_LTIDA00.setCellData(0, "sPsnGroupFlgcd", "20");
        Ds_LTIDA00.setCellData(0, "sGroupCrAdmNo", Ds_LTIEA10.getCellData(0, "sGroupCrAdmNo")); //단체계약관리번호
        Ds_LTIDA00.setCellData(0, "sBsmnRgstNo", Ds_LTIEA10.getCellData(0, "sBsmnRgstNo")); //사업자번호
        Ds_LTIDA00.setCellData(0, "sInsType", "40"); //가입유형
    } else {
        Ds_LTIDA00.setCellData(0, "sPsnGroupFlgcd", "10");
        Ds_LTIDA00.setCellData(0, "sInsType", "10"); //가입유형
    }

    //Ds_LTIDA00.SetColumn(0, "nBussPrem", DsWs_Plan.getCellData(cmb_Plan.Index, "nBussPrem"));//플랜에서 나온 영업보험료
    Ds_LTIDA00.setCellData(0, "sScanObjtYn", ((util.getGdsValue("gFaceSalesYN") == "Y") ? util.getGdsValue("gFaceSalesYN") : "N") ); //대면일때 스캔대상 = Y
    parent.sScanObjtYn = ((util.getGdsValue("gFaceSalesYN") == "Y") ? util.getGdsValue("gFaceSalesYN") : "N");

    //밸리데이션 체크
    if (obj != "copy") {
        if (scwin.lfn_ValidationCheck("all")) {
            return false;
        }
    }

    //로딩처리
    //scwin.lfn_ShowWaitImage(true);
    //Idle();
    
    //SOBJ_Save.WSDL = gds.gWsdlBasis;
    //var MethodObj = SOBJ_Save.CreateMethodObj("perform");
    
    
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        //설계번호 셋팅
        Ds_Pibo.setCellData(i, "sPlanNo", Ds_LTIDA00.getCellData(0, "sPlanNo"));

        //피보험자에 플랜세팅
        Ds_Pibo.setCellData(i, "sApplPlanCd", cmb_Plan.getValue());
        Ds_Pibo.setCellData(i, "sApplPlanName", cmb_Plan.getValue());

        //피보험자 일련번호
        Ds_Pibo.setCellData(i, "nInrpsSeqno", i + 1);
        
        //피보험자 운전용도
		Ds_Pibo.setCellData(i, "sPiboDrivCd", Ds_Pibo.getCellData(0, "sDrveFlagCd"));
    }
	Ds_LTIDA00.setCellData(0,"sDrivFlagCd", Ds_Pibo.getCellData(0, "sDrveFlagCd"));

    //체크된 특약만 보관
    scwin.lfn_make_Ds_Trty_Save();

	var MethodObj = new callService("com.inswave.longterm.ssr.pln.task.DBB010Task", "setBasicPibo", "", "");
	MethodObj.setId("setBasicPibo");
	//계약기본사항을 담는다	
    MethodObj.addSingleData("LTIDA00", "LTIDA00", Ds_LTIDA00.getID()); // 계약기본사항정보
    MethodObj.addSingleData("LTIEA10", "LTIEA10", Ds_LTIEA10.getID()); // 단체취급정보
    util.dataListCloneCopy(parent.Ds_LTIDA03, "__Ds_LTIDA03__TMP"); //부모창 DataList 전달을 위해 임시로 복제한다.
    //MethodObj.addSingleData("LTIDA03", "LTIDA03", parent.Ds_LTIDA03); // 계약자정보(추가)
    MethodObj.addSingleData("LTIDA03", "LTIDA03", "__Ds_LTIDA03__TMP"); // 계약자정보(추가)
    MethodObj.addVectorData("vLTIDA01", "LTIDA01", Ds_Pibo.getID()); //피보험자사항
    MethodObj.addVectorData("vLTIDA02", "LTIDA02", Ds_Trty_Save.getID()); //특약사항정보담음
    
    //복사건일때 과거번호, 과거청약일을 가지고감(질의서, 전산심사테이블 복사를위해)
    //과거증번
    /*
    addDataTagByHashkey("oldPlanNo");
    addBaseInfoColumn("oldPlanNo", oldPlanNo);
    addDataCloseTag();
    */
    util.jSonDsCreate([{"oldPlanNo":""}], "DsListoldPlanNoTMP");
	DsListoldPlanNoTMP.setCellData(0, "oldPlanNo", oldPlanNo);
	MethodObj.addSingleData("oldPlanNo", "oldPlanNo", "DsListoldPlanNoTMP:A", "type02");
    //과거청약일
    /*
    addDataTagByHashkey("oldSsrtDate");
    addBaseInfoColumn("oldSsrtDate", oldSsrtDate);
    addDataCloseTag();
	*/
	util.jSonDsCreate([{"oldSsrtDate":""}], "DsListoldSsrtDateTMP");
	DsListoldSsrtDateTMP.setCellData(0, "oldSsrtDate", oldSsrtDate);
	MethodObj.addSingleData("oldSsrtDate", "oldSsrtDate", "DsListoldSsrtDateTMP:A", "type02");
	/*
	//플랜에서 나온 영업보험료
    addDataTagByHashkey("nBussPrem");
    addBaseInfoColumn("nBussPrem", DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "nBussPrem"));
    addDataCloseTag();
	*/
	util.jSonDsCreate([{"nBussPrem":""}], "DsListnBussPremTMP");
	DsListnBussPremTMP.setCellData(0, "nBussPrem", DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "nBussPrem"));
	MethodObj.addSingleData("nBussPrem", "nBussPrem", "DsListnBussPremTMP:A", "type02");
	
	MethodObj.setHashTable();

	wconv.clear(DsWs_LTIDA00);
    wconv.clear(DsWs_Pibo);
    wconv.clear(DsWs_Trty);
    wconv.clear(Ds_Trty_Backup); //특약 백업용
    
    MethodObj.setUrl("/contract/CBSC075MController.do");
	MethodObj.setXPath("//hashtable/data[@hashkey='LTIDA00']/LTIDA00");//기본사항
	MethodObj.addXPath("//hashtable/data[@hashkey='vLTIDA01']/vector/data/LTIDA01");//피보험자 xpath 변경 
	MethodObj.addXPath("//hashtable/data[@hashkey='vLTIDA02']/vector/data/LTIDA02");//특약 xpath 변경
	MethodObj.addXPath("//hashtable/data[@hashkey='vLTIDA15']/vector/data/LTIDA15");//인수제한사항 xpath변경
	MethodObj.addXPath("//hashtable/data[@hashkey='LTIEA10']/LTIEA10");//단체사항
	//MethodObj.addXPath("//hashtable/data[@hashkey='LTIDA03']/LTIDA03");//계약자사항
	MethodObj.addXPath("//WARNING");

	MethodObj.setXPathDs();
	MethodObj.sync();
	MethodObj.send();
	
	util.jSonDsCreate(_tranSync.getDsJson("//WARNING"), "DsWs_Warning");

	if (DsWs_Warning.getRowCount() != 0){
		alert(DsWs_Warning.getCellData(0, "msg"));
		//로딩처리
        //scwin.lfn_ShowWaitImage(false);
		return;
	}
	
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='LTIDA00']/LTIDA00"), "DsWs_LTIDA00", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='vLTIDA01']/vector/data/LTIDA01"), "DsWs_Pibo", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='vLTIDA02']/vector/data/LTIDA02"), "DsWs_Trty", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='vLTIDA15']/vector/data/LTIDA15"), "DsWs_LTIDA15", "Y");
	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='LTIEA10']/LTIEA10"), "DsWs_LTIEA10", "Y");

    //계약기본정보의 보험료를 세팅
    util.jSonDsCreate(DsWs_LTIDA00.getAllJSON(), "Ds_LTIDA00");
    util.setCompBindRefresh("Ds_LTIDA00");
    //trace("DsWs_LTIDA00=="+DsWs_LTIDA00.SaveXML());			
    //피보험자 그리드로 옮긴다.
    //Ds_Pibo.Copy("DsWs_Pibo");
    //trace("DsWs_Pibo=="+DsWs_Pibo.SaveXML());		
    //단체관리복사
    util.jSonDsCreate(DsWs_LTIEA10.getAllJSON(), "Ds_LTIEA10");
    util.setCompBindRefresh("Ds_LTIEA10");

    //인수제한사항 세팅
    util.jSonDsCreate(DsWs_LTIDA15.getAllJSON(), "Ds_LTIDA15");
    util.setCompBindRefresh("Ds_LTIDA15");

    //trace("DsWs_Pibo:" + DsWs_Pibo.SaveXML());
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        //DsWs_Pibo 해당된 피보험자만 세팅한다.	
        wconv.mi_copyRow(DsWs_Pibo, i, Ds_Pibo, i);
        wconv.mi_copyRow(DsWs_Pibo, i, Ds_Pibo_BackUp, i);
    }

    //특약정보중 체크된것의 특약코드를 찾아서 보험료를 넣어준다.
    if (Ds_Trty.getTotalRow() > 0) {
        for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
            if (util.getCellDataF(Ds_Trty, i, "chk") == "1") {

				var nFondTrtyRow = util.searchRow(DsWs_Trty, "i",
						"DsWs_Trty.getCellData(i, 'sTrtyCd') == '" + util.getCellDataF(Ds_Trty, i, "sTrtyCd") + "' && " +
						"DsWs_Trty.getCellData(i, 'nPsnPrprtGroupSeqno') =='" + util.getCellDataF(Ds_Trty, i, "nPsnPrprtGroupSeqno")+"'"); 
				if (nFondTrtyRow < 0) {
					alert("특약코드가 존재하지 않습니다.");
					return;
				}

                //가입시보장보험료
                util.setCellDataF(Ds_Trty, i, "nGrntPrem", DsWs_Trty.getCellData(nFondTrtyRow, "nGrntPrem"));
                //예상보장영업보험료  
                util.setCellDataF(Ds_Trty, i, "nExptGrntBussPrem", DsWs_Trty.getCellData(nFondTrtyRow, "nExptGrntBussPrem"));

                //저장하면서 추가된 사항 복사한다.
                util.setCellDataF(Ds_Trty, i, "sPlanNo", DsWs_Trty.getCellData(nFondTrtyRow, "sPlanNo")); //설계번호		
                util.setCellDataF(Ds_Trty, i, "sPsnPrprtGroupFlgcd", DsWs_Trty.getCellData(nFondTrtyRow, "sPsnPrprtGroupFlgcd")); //인물단체구분코드
                util.setCellDataF(Ds_Trty, i, "sGdCd", DsWs_Trty.getCellData(nFondTrtyRow, "sGdCd")); //상품코드
                util.setCellDataF(Ds_Trty, i, "nPsnPrprtGroupSeqno", DsWs_Trty.getCellData(nFondTrtyRow, "nPsnPrprtGroupSeqno")); //인물단체일련번호
                util.setCellDataF(Ds_Trty, i, "nCrChngNo", DsWs_Trty.getCellData(nFondTrtyRow, "nCrChngNo")); //계약변경번호
                util.setCellDataF(Ds_Trty, i, "sInsurStrtdate", DsWs_Trty.getCellData(nFondTrtyRow, "sInsurStrtdate")); //보험시작일자
                util.setCellDataF(Ds_Trty, i, "sInsurEndDate", DsWs_Trty.getCellData(nFondTrtyRow, "sInsurEndDate")); //보험종료일자
                util.setCellDataF(Ds_Trty, i, "sTrtyStatCd", DsWs_Trty.getCellData(nFondTrtyRow, "sTrtyStatCd")); //
                util.setCellDataF(Ds_Trty, i, "nTrtyOrdr", DsWs_Trty.getCellData(nFondTrtyRow, "nTrtyOrdr")); //특약순서
                util.setCellDataF(Ds_Trty, i, "sBascSlctFlagCd", DsWs_Trty.getCellData(nFondTrtyRow, "sBascSlctFlagCd")); //기본선택구분코드
                util.setCellDataF(Ds_Trty, i, "sAutoRenwlAvaYn", DsWs_Trty.getCellData(nFondTrtyRow, "sAutoRenwlAvaYn")); //자동갱신가능여부
                util.setCellDataF(Ds_Trty, i, "sGrntAccuFlagCd", DsWs_Trty.getCellData(nFondTrtyRow, "sGrntAccuFlagCd")); //보장적립구분코드
                util.setCellDataF(Ds_Trty, i, "RenwlUseCrFlagCd", DsWs_Trty.getCellData(nFondTrtyRow, "RenwlUseCrFlagCd")); //갱신구분코드
                util.setCellDataF(Ds_Trty, i, "RenwlTrtyCd", DsWs_Trty.getCellData(nFondTrtyRow, "RenwlTrtyCd")); //갱신특약코드
                util.setCellDataF(Ds_Trty, i, "TrtyTypeCd", DsWs_Trty.getCellData(nFondTrtyRow, "TrtyTypeCd")); //특약유형코드
                util.setCellDataF(Ds_Trty, i, "nAccuPrem", DsWs_Trty.getCellData(nFondTrtyRow, "nAccuPrem")); //적립보험료					
                util.setCellDataF(Ds_Trty, i, "nRealInsurTerm", DsWs_Trty.getCellData(nFondTrtyRow, "nRealInsurTerm")); //실보험기간
                util.setCellDataF(Ds_Trty, i, "nRealPaymTerm", DsWs_Trty.getCellData(nFondTrtyRow, "nRealPaymTerm")); //실납입기간
                util.setCellDataF(Ds_Trty, i, "nEndAge", DsWs_Trty.getCellData(nFondTrtyRow, "nEndAge")); //만기연령
                util.setCellDataF(Ds_Trty, i, "nPaymAge", DsWs_Trty.getCellData(nFondTrtyRow, "nPaymAge")); //납입연령					
                util.setCellDataF(Ds_Trty, i, "sGnrzCd", DsWs_Trty.getCellData(nFondTrtyRow, "sGnrzCd")); //종형코드					
                util.setCellDataF(Ds_Trty, i, "nTrtyPrem", DsWs_Trty.getCellData(nFondTrtyRow, "nTrtyPrem")); //특약보험료					
                util.setCellDataF(Ds_Trty, i, "sResvAmtKey", DsWs_Trty.getCellData(nFondTrtyRow, "sResvAmtKey")); //준비금
                
                if (util.getCellDataF(Ds_Trty, i, "sScrnIndcYn") == "N") {
                    util.setCellDataF(Ds_Trty, i, "sPaymTermCd", DsWs_Trty.getCellData(nFondTrtyRow, "sPaymTermCd")); //납입기간코드					
                    util.setCellDataF(Ds_Trty, i, "sInsurTermCd", DsWs_Trty.getCellData(nFondTrtyRow, "sInsurTermCd")); //보험기간코드
                }
            }
        }
    }

	//로딩처리
    //scwin.lfn_ShowWaitImage(false);
    
    //trace("+++--++"+ Ds_Trty.savexml());// 
    if (util.isNull(parent.medt_PlanNo.getValue())) {
        //대리점일때 대리점 이력생성	
        if (util.getGdsValue("gUserDuty") == "30" || util.getGdsValue("gUserDuty") == "33" || util.getGdsValue("gUserDuty") == "35") {
            gfn_insertAgencyHistory("DsWs_AgencyHistory", DsWs_LTIDA00.getCellData(0, "sPlanNo"),
            						Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sMinsrRelnCd", "10"), "sInrpsCd"),
            						parent.edt_sGdCdNm.getValue(), "2"); //sApplyStat 2:보험료산출, 청약복사
        }
        wprom.alert("청약번호 " + DsWs_LTIDA00.getCellData(0, "sPlanNo") + "로 보관되었습니다.");
        parent.medt_PlanNo.setValue(DsWs_LTIDA00.getCellData(0, "sPlanNo"));
    }
    
    
    // 이력저장(산출)
    parent.scwin.saveHistory("2");

    //가입설계서 발행버튼 활성화
    btn_PrintAgmt.setDisabled(false);
    btn_PrintInfo.setDisabled(false);
    //btn_Insu.Color = "";
    $("#btn_Insu a:first-child").css("color","");
    if (Ds_LTIDA15.getRowCount() > 0) {
        //btn_Insu.Color = "red";
        $("#btn_Insu a:first-child").css("color","red");
        if (wconv.findRow(Ds_LTIDA15, "sJugmGradCd", "P") >= 0) {
            wprom.alert("인수금지 대상입니다. 인수제한사유를 확인하세요");
            btn_PrintAgmt.setDisabled(true);
            btn_PrintInfo.setDisabled(true);
        }
    }

    //피보험자정보세팅
    //parent.DsWs_Pibo.copy("DsWs_Pibo");
    /*
    wconv.copy(parent.Ds_Pibo, "Ds_Pibo");    
    Parent_Ds_Trty.copy("Ds_Trty");
    Parent_Ds_LTIDA15.copy("Ds_LTIDA15");
    */
    parent.util.jSonDsCreate(Ds_Pibo.getAllJSON(), "Ds_Pibo", "Y");
    parent.util.jSonDsCreate(Ds_Trty.getAllJSON(), "Ds_Trty", "Y");
    parent.util.jSonDsCreate(Ds_LTIDA15.getAllJSON(), "Ds_LTIDA15", "Y");

    //특약데이터 변경여부를 위해 백업데이터셋을 만든다.
    /*
    wconv.copy(Ds_Trty_Backup, "Ds_Trty");
    wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "nInrpsSeqno") + "'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='" + Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "nInrpsSeqno") + "'");
    */    
    util.jSonDsCreate(Ds_Trty.getAllJSON(), "Ds_Trty_Backup", "Y");

    var nFindRowTmp = wconv.findRow(Ds_Pibo, "sel", "1");
    var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRowTmp, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
	Ds_Trty.clearFilter();
	Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sTrtyCd", "key":funcFilter, "condition":"and"});
	var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(nFindRowTmp, "nInrpsSeqno")) {
    			return true;
    		}
    	}
    	return false;
    }
	Ds_Trty_Backup.clearFilter();
	Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sTrtyCd", "key":funcFilter, "condition":"and"});
    
    modifyFlag = false; //화면값중 기존값에서 변경된 경우 체크
    CalcPremFlag = true;

    //2011.05.13 산출이벤트 추가
    /*
    if(parseInt(sToday) >= 20110519){
    	if (gProjectID == "86" 
    		|| gProjectID == "87" 
    		|| gProjectID == "709" 
    		|| gProjectID == "286"
    		|| gProjectID == "782"){
    		
    		SOBJ_Event.WSDL = gWsdlCustomer;
    		var MethodObj_Event = gfn_CreateMethodObj(SOBJ_Event,"com.inswave.customer.task.EventTask", "putDrvInsEvent", "", "");
    		gfn_SetParam(MethodObj_Event, "sCustNo", Ds_Pibo.getCellData(0,"sInrpsCd"));
    		gfn_SetParam(MethodObj_Event, "sProjectID", gProjectID);
    		var result = gfn_CallService(SOBJ_Event, DOBJ_Event, MethodObj_Event);
    	}
    }
    */
    //보험료 완료시 과거청약번호 clear
    oldPlanNo = "";
    oldSsrtDate = "";
    except = "";

    //trace("계약자사항(후)==> " + parent.Ds_LTIDA03.SaveXML());
    //개인정보 조회 이력 쌓기
    gfn_LogCreditInfoVt(Ds_Pibo, "", "I", "sInrpsCd");
};



/*-----------------------------------
// function 명 : lfn_ValidationCheck
// 내용        : 필수값 입력 여부 체크
-----------------------------------*/
scwin.lfn_ValidationCheck = function(gubun) { //완료
    var validFlag = false;
    //변경여부 초기화
    modifyFlag = false;

    //전체 데이터 체크
    if (gubun == "all") {
        //계약기본사항 밸리데이션체크
        validFlag = scwin.lfn_LTIDA00_ValidationCheck(Ds_LTIDA00);

        //단체관리 체크
        if (!validFlag) {
            //alert("단체관리케드 ==> " + chk_sPsnGroupFlgcd.Value);
            if (chk_sPsnGroupFlgcd.getValue() == "1") {
                validFlag = scwin.lfn_LTIEA10_ValidationCheck(Ds_LTIEA10);
            }


            //피보험자 밸리데이션체크
            if (!validFlag) {
                validFlag = scwin.lfn_Pibo_ValidationCheck(Ds_Pibo);
                //특약사항 밸리데이션체크
                if (!validFlag) {
                    validFlag = scwin.Trty_ValidationCheck(Ds_Trty);
                }
            }
        }
    } else if (gubun == "level1") {
        //계약기본사항 밸리데이션체크
        validFlag = scwin.lfn_LTIDA00_ValidationCheck(Ds_LTIDA00); //계약기본사항,피보험자 체크
    } else if (gubun == "level2") {
        //계약기본사항 밸리데이션체크
        validFlag = scwin.lfn_LTIDA00_ValidationCheck(Ds_LTIDA00);
        //피보험자 밸리데이션체크
        if (!validFlag) {
            validFlag = scwin.lfn_Pibo_ValidationCheck(Ds_Pibo);
        }
    } else if (gubun == "level3") {
        validFlag = scwin.lfn_Pibo_ValidationCheck(Ds_Pibo);

        //특약사항 밸리데이션체크
        if (!validFlag) {
            validFlag = scwin.Trty_ValidationCheck(Ds_Trty);
        }
    }

    return validFlag;
};


/*-----------------------------------
// function 명 : lfn_LTIDA00_ValidationCheck
// 내용        : 기본사항 필수값 입력 여부 체크
-----------------------------------*/
scwin.lfn_LTIDA00_ValidationCheck = function(obj) { //완료
    var validFlag = false;
    if (obj.getRowCount() > 0) {
        //trace(Ds_LTIDA00.savexml());
        for (var i = 0; i < obj.getRowCount(); i++) {
            if (validFlag) {
                break;
            }
            for (var j = 0; j < obj.getColumnCount(); j++) {
                var colID = obj.getColumnID(j);

                //설계번호
                if (colID == "sPlanNo") {
                } else if (colID == "sGdCd") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("상품을  선택하세요");
                        util.focus(parent.btn_sGdCd);
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //청약일자
                } else if (colID == "sSsrtDate") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("청약일자를 입력하세요");
                        util.focus(cal_sSsrtDate);
                        validFlag = true;
                        break;
                    }


                    //trace("gFaceSalesYN = "+gFaceSalesYN);
                    //trace("sPlanProgRankCd = "+Ds_LTIDA00.getCellData(0,"sPlanProgRankCd"));
                    //trace("일자 " + substr(parent.sToday,0,6) + ":" + substr(obj.getCellData(i, colID),0,6));
                    //비대면이고, 청약일이 현재일이 아니면(월)
                    if (parent.sScanObjtYn != "Y" && Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "00" && //완료
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "52" && //인수요청	
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "53" && //진단심사중
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "57" && //인수불가(거절)
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "58" && //parent.sToday != obj.getCellData(i, colID)){
                        //조건부승인
                        //parent.sToday != obj.getCellData(i, colID)){
                        wconv.substr(parent.sToday, 0, 6) != wconv.substr(obj.getCellData(i, colID), 0, 6)) {
                        wprom.alert("복사후 재설계하여 주시기 바랍니다. ");
                        util.focus(cal_sSsrtDate);
                        validFlag = true;
                        break;
                    }


                    //대면이고, 청약월 현재일인지 체크(월)
                    if (parent.sScanObjtYn == "Y" && Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "00" && //완료
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "52" && //인수요청	
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "53" && //진단심사중
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "57" && //인수불가(거절)
                        Ds_LTIDA00.getCellData(0, "sPlanProgRankCd") != "58" && //조건부승인
                        wconv.substr(parent.sToday, 0, 6) != wconv.substr(obj.getCellData(i, colID), 0, 6)) {
                        //substr(parent.sToday,0,6) != substr(obj.getCellData(i, colID),0,4)){ //잠시 테스트를 위해서 해제.(ldh)
                        wprom.alert("복사후 재설계하여 주시기 바랍니다. ");
                        util.focus(cal_sSsrtDate);
                        validFlag = true;
                        break;
                    }

                    //7영업일이 지난건인지 확인.->15일
                    //alert( parent.sToday + ":" + addBizDaysForBank(obj.getCellData(i, colID), 7) + ":" + Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") + ":" + obj.getCellData(i, colID));
                    /*if (parent.sScanObjtYn == "Y" && 
						Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") != "00" && 	//완료
						Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") != "52" &&	//인수요청	
						Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") != "53" &&	//진단심사중
						Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") != "57" &&	//인수불가(거절)
						Ds_LTIDA00.getCellData(0,"sPlanProgRankCd") != "58" &&	//조건부승인
						parent.sToday >= addBizDaysForBank(obj.getCellData(i, colID), 15)){ 
						alert("청약일자로부터 15영업일 이내 입금가능합니다. ");
					    
						cal_sSsrtDate.SetFocus();
						validFlag = true;
						break;
					}*/
                    scwin.lfn_CompChangeCheck(obj, i, colID); //보험시작일자
                } else if (colID == "sInsurStrtdate") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("보험시작일자를 입력하세요");
                        cal_sInsurStrtdate.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //보험종료일자
                } else if (colID == "sInsurEndDate") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("보험종료일자를 입력하세요");
                        cal_sInsurEndDate.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //납입주기코드
                } else if (colID == "sPaymCyclCd") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("납입주기를 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //영업보험료
                } else if (colID == "nBussPrem") {
                    //보험료계산시엔 check하지않는다.
                    if (except != "calPrem") {
                        // 장기보험고도화 - 최소보험료산출전에 0일때 체크
                        if (!medt_nBussPrem.getDisabled() == true && wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMinPrem")) <= 0 
                        		&& wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
                            wprom.alert("영업보험료가 입력되지 않았습니다.");
                            medt_nBussPrem.focus();
                            validFlag = true;
                            break;
                        }
                        if (wconv.toNumber(obj.getCellData(i, colID)) < wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMinPrem")) 
                        		|| wconv.toNumber(obj.getCellData(i, colID)) > wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMaxPrem"))) {
                            if (!medt_nBussPrem.getDisabled() == true) {
                                wprom.alert("영업보험료는 최소/최대보험료 사이값으로 입력해야 합니다..");
                            } else {
                                if (DsWs_PrdAttr.getCellData(0, "GdTypeFlagCd") == "1") {
                                    wprom.alert("자유설계형으로 설계바랍니다.");
                                } else {
                                    wprom.alert("종합형으로 설계바랍니다.");
                                }
                            }
                            medt_nBussPrem.focus();
                            validFlag = true;
                            break;
                        }
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //개인단체구분
                } else if (colID == "sPsnGroupFlgcd") {
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sAnntOpnAgeCd") {
                    // 장기보험고도화 - 연금개시나이
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("연금개시나이를 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sAnntPymTermCd") {
                    // 장기보험고도화 - 연금지급기간
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("연금지급기간을 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sAnntPymTypeCd") {
                    // 장기보험고도화 - 연금지급형태
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("연금지급형태를 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sAnntPymCyclCd") {
                    // 장기보험고도화 - 연금지급주기
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("연금지급주기를 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sInsurTermCd") {
                    // 장기보험고도화 - 보험기간
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("보험기간을 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                } else if (colID == "sPaymTermCd") {
                    // 장기보험고도화 - 납입기간
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("납입기간을 입력하세요");
                        cmb_PaymCycl.focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                }
            }
        }
    }


    //플랜체크
    if (wconv.length(Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sApplPlanCd")) > 0) {
        if (cmb_Plan.getValue() != Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sApplPlanCd")) {
            modifyFlag = true;
        }
    }


    //trace(cmb_Plan.Value+"==="+Ds_Pibo.getColumn(Ds_Pibo.FindRow("sel","1"), "sApplPlanCd")); 
    return validFlag;
};

//**************************************************************************************************
// 해당 일자의 은행영업일을 기준으로 해당 날수만큼 이후의 날짜를 조회한다.
//**************************************************************************************************
scwin.addBizDaysForBank = function(sDate, ndays) { //완료

    wconv.clear(DsWs_BankBizDay);
    
    var transObj = new callService("AccountingCommonTask", "addBizDaysForBank", "", "");
	transObj.setUrl("/contract/CBSC075MController.do");
	transObj.setId("DOBJ_User");
	transObj.setParam("sDate", sDate);
	transObj.setParam("ndays", ndays);
	transObj.setXPath("//*/ACCAB02");
	transObj.addXPath("//*/WARNING");
	//transObj.callBack("scwin.subCallBackfunction");
	transObj.sync();
	transObj.send();

    util.jSonDsCreate(_tranSync.getDsJson("WARNING"), "DsWs_Warning");
	if (DsWs_Warning.getRowCount() != 0) {
		alert(DsWs_Warning.getCellData(0, "msg"));
		return;
	}

	util.jSonDsCreate(_tranSync.getDsJson("ACCAB02"), "DsWs_BankBizDay");

    return DsWs_BankBizDay.getCellData(0, "sResultDate");
};

/*-----------------------------------
// function 명 : lfn_CompChangeCheck
// 내용        : 각 항목 변경여부체크
-----------------------------------*/
scwin.lfn_CompChangeCheck = function(paramComp, i, colID) { //완료
	var obj = {"getID" : function() {return ""}};
	if (!util.isNull(paramComp)) {
		obj = paramComp;
	}
	
    if (obj.getID() == "Ds_Pibo") {
        if (Ds_Pibo.getCellData(i, colID) != Ds_Pibo_BackUp.getCellData(i, colID)) {
            modifyFlag = true;
        }
    } else {
        //변경여부체크
        if (obj.getCellData(i, colID) != obj.getOriginalCellData(i, colID)) {
            modifyFlag = true;
        } else if (wconv.length(obj.getCellData(i, colID)) != wconv.length(obj.getOriginalCellData(i, colID))) {
            modifyFlag = true;
        }
    }
};


/*-----------------------------------
// function 명 : lfn_LTIEA10_ValidationCheck
// 내용        : 단체관리 필수값 입력 여부 체크
-----------------------------------*/
scwin.lfn_LTIEA10_ValidationCheck = function(obj) { //완료
    var validFlag = false;
    if (obj.getRowCount() > 0) {
        for (var i = 0; i < obj.getRowCount(); i++) {
            if (validFlag) {
                break;
            }
            for (var j = 0; j < obj.getColumnCount(); j++) {
                var colID = obj.getColumnID(j);
                //trace("colID==="+colID);
                //단체계약관리번호
                if (colID == "sGroupCrAdmNo") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("단체계약관리을 선택하세요");
                        btn_GroupList.SetFocus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                }
            }
        }
    }
    return validFlag;
};

/*-----------------------------------
// function 명 : lfn_Pibo_ValidationCheck
// 내용        : 피보험자 필수값 입력 여부 체크
-----------------------------------*/
scwin.lfn_Pibo_ValidationCheck = function(obj) { //완료
    var validFlag = false;
    if (obj.getRowCount() > 0) {
        var nMinsrRelnCnt = 0;
        for (var i = 0; i < obj.getRowCount(); i++) {
            if (validFlag) {
                break;
            }
            for (var j = 0; j < obj.getColumnCount(); j++) {
                var colID = obj.getColumnID(j);

                //피보험자코드
                if (colID == "sInrpsCd") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("피보험자코드를 입력하세요");
                        //Object(obj.getCellData(i, colID)).focus();
                        validFlag = true;
                        break;
                    }
                    var oldModiFlag = modifyFlag;
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                    if (oldModiFlag != "1" && modifyFlag == "1") {
                        wprom.alert("피보험자코드가 변경되었습니다.");
                        break;
                    }
                //피보험자명
                } else if (colID == "sInrpsName") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        if (parent.sSimpleYn == "Y") {
                            wprom.alert("피보험자명을 입력하세요");
                        } else {
                            wprom.alert("고객등록을 먼저 해주세요");
                        }
                        //Object(obj.getCellData(i, colID)).focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                //피보험자직업코드
                } else if (colID == "sJobCd") {
                    //trace("obj.getCellData(i, colID)::: " + obj.getCellData(i, colID));
                    if((util.isNull(obj.getCellData(i, colID)) || obj.getCellData(i, colID) == "000000") && parent.sSimpleYn != "Y"){
                        wprom.alert("피보험자직업을 선택하세요");
                        //Object(obj_getCellData(i, colID)).focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //피보험자운전용도코드
                } else if (colID == "sDrveFlagCd") {
                    // 연금저축일때 피보험자운전용도코드 예외처리
                    if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {
                        // 업무보고서분류코드-7:연금
                        obj.setCellData(i, colID, "1"); // 1-자가용
                    }
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("피보험자운전용도를 선택하세요");
                        //Object(obj_getCellData(i, colID)).focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID); //주피와의 관계
                } else if (colID == "sMinsrRelnCd") {
                    if (util.isNull(obj.getCellData(i, colID))) {
                        wprom.alert("주피와의 관계를 선택하세요");
                        //Object(obj_getCellData(i, colID)).focus();
                        validFlag = true;
                        break;
                    }
                    scwin.lfn_CompChangeCheck(obj, i, colID);
                    if (obj.getCellData(i, "sMinsrRelnCd") == "10") {
                        nMinsrRelnCnt++;
                    }
                }
            }
            if (validFlag) {
                return validFlag;
            }
            if (parent.sSimpleYn != "Y") {
                if (wconv.length(Ds_Pibo.getCellData(i, "sAddrFlgcd")) <= 0) {
                    wprom.alert("고객등록을 먼저 해주세요");
                    validFlag = true;
                    break;
                }
            }
        }
        if (nMinsrRelnCnt <= 0) {
            wprom.alert("주피와의관계 [본인]이 없습니다.");
            validFlag = true;
        } else if (nMinsrRelnCnt > 1) {
            wprom.alert("주피와의관계 [본인]은 2명 이상일수 없습니다.");
            validFlag = true;
        }
    }
    return validFlag;
};


/*-----------------------------------
// function 명 : lfn_Trty_CompChangeCheck
// 내용        : 특약 데이터  변경여부 체크
-----------------------------------*/
scwin.lfn_Trty_CompChangeCheck = function(obj, objBack, i) { //완료
    //trace("obj.savexml() ==>  " + obj.savexml());
    //trace("objBack.savexml() ==>  " + objBack.savexml());
    //trace("i==="+i+"==chkobj==="+obj.getColumn(i, "chk")+"==chkobjBack==="+objBack.getColumn(i, "chk"));
    //기존엔 체크/해지 변경된경우 변경으로 봄
    if (obj.getCellData(i, "chk") != objBack.getCellData(i, "chk") && obj.getCellData(i, "sScrnIndcYn") == "Y") {
        modifyFlag = true;
        //trace("objid=="+obj.ID+"==colID==chk변경==modifyFlag=="+modifyFlag);		
        return false;
    } else {
        if (obj.getCellData(i, "chk") == "1") {
            //보험기간코드
            if (obj.getCellData(i, "sInsurTermCd") != objBack.getCellData(i, "sInsurTermCd")) {
                modifyFlag = true;
                //trace("objid=="+obj.ID+"==colID==sInsurTermCd==이전=="+objBack.GetColumn(i, "sInsurTermCd")+"==이후=="+obj.GetColumn(i, "sInsurTermCd")+"==modifyFlag=="+modifyFlag);		
                return false;
            }

            //납입기간코드
            if (obj.getCellData(i, "sPaymTermCd") != objBack.getCellData(i, "sPaymTermCd")) {
                modifyFlag = true;
                //trace("objid=="+obj.ID+"==colID==sPaymTermCd==이전=="+objBack.GetColumn(i, "sInsurTermCd")+"==이후=="+obj.GetColumn(i, "sInsurTermCd")+"==modifyFlag=="+modifyFlag);				
                return false;
            }

            //특약가입금액
            if (obj.getCellData(i, "nTrtyInsAmt") != objBack.getCellData(i, "nTrtyInsAmt")) {
                modifyFlag = true;
                //trace(i+"==objid=="+obj.ID+"==colID==nTrtyInsAmt==이전=="+objBack.GetColumn(i, "nTrtyInsAmt")+"==이후=="+obj.GetColumn(i, "nTrtyInsAmt")+"==modifyFlag=="+modifyFlag);					
                return false;
            }
        }
    }
    return true;
};


//---------------------------------------------------------------------------
// function 명 : lfn_checkMedical
// 내용        : 사전조회 이미지등록여부조회및 check
//---------------------------------------------------------------------------
scwin.lfn_checkMedical = function(nRow) { //완료
    var result;
    result = true;
    //사전조회 체크시 대면일 경우 (가입설계 동의가 없는 경우만 이미지 등록여부 체크
    if (scwin.lfn_getCUSAA42Info(Ds_Pibo.getCellData(nRow, "sInrpsCd")) == "Y") {
        //데이터셋 초기화
        wconv.clear(DsWs_LTIDB01Cnt);
        var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB011Task", "selMedicImageCheck", "", "");
		transObj.setUrl("/contract/CBSC075MController.do");
		transObj.setId("DOBJ_Medic");
		transObj.setParam("sImagClsfCd", "JCD10001"); //이미지분류코드(JCD10001)
		//gfn_SetParam(MethodObj, "sImagKindCd", "JCD1000101");							//이미지종류코드(JCD1000101)
		transObj.setParam("sResno", Ds_Pibo.getCellData(nRow, "sInrpsCd")); //이미지키정보
		transObj.setParam("sValdDate", sToday); //기준일자
		transObj.setParam("sUserID", util.getGdsValue("gUserID")); //로그인
		transObj.setXPath("//*/WARNING");
		transObj.addXPath("//hashtable/data[@hashkey='LTIDB07Cnt']/LTIDB07Cnt");    
		transObj.sync();
		transObj.send();
		//util.interfaceKey(_tranSync.result.serviceDs);
        
        util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");
    
	    if (DsWs_Warning.getRowCount() > 0) {
			wprom.alert(DsWs_Warning.getCellData(0, "msg"));
            result = false;
            return false;
	    }
        
        util.jSonDsCreate(_tranSync.getDsJson("LTIDB07Cnt"), "DsWs_LTIDB01Cnt", "Y");
        
        if (wconv.toNumber(DsWs_LTIDB01Cnt.getCellData(0, "nCount")) == 0) {
            wprom.alert(Ds_Pibo.getCellData(nRow, "sInrpsName") + "님의 보험계약사전조회동의서 스캔처리후 조회가능합니다.");
            result = false;
            return false;
        }

        //본인 스캔한 고객인지 체크 
        if (util.getGdsValue("gUserDuty") == "30" || util.getGdsValue("gUserDuty") == "33" || util.getGdsValue("gUserDuty") == "35") {
            if (DsWs_LTIDB01Cnt.getCellData(0, "sSelfWrcsYn") == "N") {
                wprom.alert(Ds_Pibo.getCellData(nRow, "sInrpsName") + "님의 보험계약사전조회동의서의 담당자 스캔처리후 조회가능합니다.");
                result = false;
                return false;
            }
        }
    }
    return result;
};

/*-----------------------------------
// function 명 : lfn_make_Ds_Trty_Save
// 내용        : 산출을 위해 해당피보험자의 특약만 보관
-----------------------------------*/
scwin.lfn_make_Ds_Trty_Save = function() { //완료
    wconv.clear(Ds_Trty_Save);
    
    for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
        if (util.getCellDataF(Ds_Trty, i, "chk") == "1") {
            util.appendRow(Ds_Trty_Save);
            for (var j = 0; j < Ds_Trty.getTotalCol(); j++) {            	
                Ds_Trty_Save.setCellData((Ds_Trty_Save.getRowCount() - 1), Ds_Trty.getColumnID(j), util.getCellDataF(Ds_Trty, i, Ds_Trty.getColumnID(j)));
            }
        }
    }
    
};


//---------------------------------------------------------------------------
// function 명 : Ds_Pibo_OnColumnChanged
// 내용        : Ds_Pibo 변경
//---------------------------------------------------------------------------
//scwin.Ds_Pibo_OnColumnChanged = function(obj, nRow, strColumnID, varOldValue, varNewValue, nPivotIndex) {
scwin.Ds_Pibo_OnColumnChanged = function(info) { //완료
	//rowIndex: 0, colID: "sel", oldValue: "", newValue: "1"
    //고객선택시 기존계약의 직업과 현재 직업차이 확인
    
    var nRow = info.rowIndex;
    
    if (info.colID == "sJobCd") {
        if (!util.isNull(info.newValue) && parent.sSimpleYn != "Y") {
            //wconv.trace("sJobCd : " + sJobCd);
            wconv.clear(DsWs_PvcrJob);
            wconv.clear(DsWs_SsrtCarr);
            var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB330Task", "getPvcrJobCnfm", "", "");
			transObj.setUrl("/contract/CBSC075MController.do");
			transObj.setId("getPvcrJobCnfm");
			transObj.setParam("sInrpsCd", Ds_Pibo.getCellData(info.rowIndex, "sInrpsCd"));
			transObj.setParam("sJobCd", info.newValue);
			transObj.setXPath("//*/WARNING");
			transObj.addXPath("//vector/data/LTIEA01Job");
			transObj.addXPath("//vector/data/LTIEA01Carr");
			transObj.sync();
			transObj.send();
			//util.interfaceKey(_tranSync.result.serviceDs);
	        util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Job"), "DsWs_PvcrJob", "Y");
	        util.jSonDsCreate(_tranSync.getDsJson("LTIEA01Carr"), "DsWs_SsrtCarr", "Y");
            if (DsWs_PvcrJob.getRowCount() > 0) {
                var msg = Ds_Pibo.getCellData(nRow, "sInrpsName") + " 고객님의 직업은 당사기존에 체결된 계약에서의 직업과 \n상이합니다.\n" + "확인 후 기존계약의 직업을 변경하거나 신규 직업을 변경하여 \n등록하시기 바랍니다.\n"
                		+ "[중요]직업이 정확하지 않은 경우 향후 고지의무위반이나 통지\n의무위반으로 " + "가입자 및 모집자 모두에게 불이익이 발생할 수 \n있습니다.\n\n"
                		+ "* 기존계약번호 : " + DsWs_PvcrJob.getCellData(0, "sCrNo") + "\n" + "* 직업 : "
                		+ DsWs_PvcrJob.getCellData(0, "sJobName") + "(" + DsWs_PvcrJob.getCellData(0, "sJobCd") + ")";
                wprom.alert(msg);
            }
        }
    }
};


scwin.ExprDis = function(ExprChk, ExprTrtyFlagCd, ExprsScrnIndcYn, ExprsTrtyCd, rowIndex) {
	//scwin.ExprDis(display('chk'), display('TrtyFlagCd'), display('sScrnIndcYn'), display('sTrtyCd'), rowIndex());

	var rChk = grd_sTrty.getCellReadOnly(rowIndex, 0);

	if (scwin.lfn_TrtyEnableCheck(rowIndex) == "1") {
		if (rChk == false) {
			//grd_sTrty.setCellBackgroundColor( rowIndex, 0, gds.user5);
			grd_sTrty.setCellReadOnly(rowIndex, 0, true);
		}
	} else {
		if (rChk == true || util.isNull(rChk)) {
			//grd_sTrty.setCellBackgroundColor(rowIndex, 0, "");
			grd_sTrty.setCellReadOnly(rowIndex, 0, false);
		}
	}

	return "";
};

/*-----------------------------------
// function 명 : lfn_TrtyEnableCheck
// 내용        : 기본특약 비활성화 처리
-----------------------------------*/
scwin.lfn_TrtyEnableCheck = function(nRow) {
    //trace("TrtyFlagCd=="+Ds_Trty.GetColumn(nRow, "TrtyFlagCd"));
    //trace("sScrnIndcYn=="+Ds_Trty.GetColumn(nRow, "sScrnIndcYn"));
    //Ds_Trty.GetColumn(nRow, "sScrnIndcYn")
    if (Ds_Trty.getCellData(nRow, "TrtyFlagCd") == "01" || Ds_Trty.getCellData(nRow, "sScrnIndcYn") == "N") {
        //trace("1");	
        Ds_Trty.setCellData(nRow, "chk", "1");
        return 1;
    }

    //trace("2");
    return 2;
};


//---------------------------------------------------------------------------
// function 명 : lfn_changeExpandShow
// 내용        : 가입금액 멀티입력 가능여부
//---------------------------------------------------------------------------
scwin.lfn_changeExpandShow = function(sTrtyCd) {
	/*
    var rtnExpandShow = "false";
    wconv.clear(Ds_InsAmt);
    wconv.copy(Ds_InsAmt, "Dsws_InsAmt");
    wconv.filter(Ds_InsAmt, "sTrtyCd== '" + sTrtyCd + "'");
    wconv.copyF(Ds_InsAmt_Tmp, Ds_InsAmt);
    if (Ds_InsAmt_Tmp.getRowCount() > 1) {
        rtnExpandShow = "true";
    }
    return rtnExpandShow;
    */
};


//---------------------------------------------------------------------------
// function 명 : lfn_trtyOnHeadClick
// 내용        : 특약전체 체크/해제
//---------------------------------------------------------------------------
//scwin.lfn_trtyOnHeadClick = function(obj, nCell, nX, nY, nPivotIndex) {
scwin.lfn_trtyOnHeadClick = function(headerId) { //완료
    //trace("obj=="+obj.ID+"=="+nCell+"=="+grd_sTrty.GetCellProp("head", nCell, "text"));
    console.log("lfn_trtyOnHeadClick : headerId=" + headerId);
    var chk = "0";
    if (headerId == "column1") {
    
    	var inHtml = $("#grd_sTrty_column1").html();
    
    	if (inHtml.indexOf("chkoff.jpg") >= 0) {
    		$("#grd_sTrty_column1").html('<img src="/cm/images/chkon.jpg">');
    		chk = "1";
    	} else {
    		$("#grd_sTrty_column1").html('<img src="/cm/images/chkoff.jpg">');
    		chk = "0";
    	}	
        if (Ds_Trty.getRowCount() > 0) {
            for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
                //화면에 표시되지않은 특약은 체크처리에서 뺀다.
                if (Ds_Trty.getCellData(i, "sScrnIndcYn") == "Y") {
                    Ds_Trty.setCellData(i, "chk", chk);
                }
            }
        }
    }
};

//=====================userData3 값에 세팅한다.==============================//
//Ex) scwin.lfn_grd_sTrty_Pre_Bind@lfn_grd_sTrty_Last_Bind
//util.setCompBindRefresh 이전에 실행될 함수명
var grdHeadChkImg = "";
scwin.lfn_grd_sTrty_Pre_Bind = function(OBJ) { //완료
	//console.log("Pre_Bind : " + OBJ.getID());
	if (OBJ.getID() == "grd_sTrty") {
		grdHeadChkImg = $("#grd_sTrty_column1").html();
	}
}
//util.setCompBindRefresh 이후에 실행될 함수명
scwin.lfn_grd_sTrty_Last_Bind = function(OBJ) { //완료
	//console.log("Last_Bind : " + OBJ.getID());
	if (OBJ.getID() == "grd_sTrty") {
		if (!util.isNull(grdHeadChkImg)) {
			$("#grd_sTrty_column1").html(grdHeadChkImg);
		}
	}
}
//=====================userData3 값에 세팅한다.==============================//



//---------------------------------------------------------------------------
// function 명 : lfn_Trty_OnCellClick
// 내용        : 특약사항 Cell click시 처리
//---------------------------------------------------------------------------
scwin.lfn_Trty_OnCellClick = function(nRow, nCell) { //완료

    if (grd_sTrty.getColumnID(nCell) == "TrtyHnglAbbName") {

    	txtTrtyInfo.setValue("");
    	
    	var ppramData = {};
    	ppramData.sTrtyCd = Ds_Trty.getCellData(nRow, "sTrtyCd");
    	ppramData.nTrtyInsAmt = Ds_Trty.getCellData(nRow, "nTrtyInsAmt");

    	var sfilterTrtyCmpsContAmtLimit = function(cellData, param, rowIndex){
			if(Number(DS_TrtyCmpsContAmtLimitInfo.getCellData(rowIndex, "nTrtyInsAmt")) == Number(ppramData.nTrtyInsAmt)
					&& DS_TrtyCmpsContAmtLimitInfo.getCellData(rowIndex, "sTrtyCd") == ppramData.sTrtyCd){
				return true;
			}else{
				return false;
			}
		};
    	DS_TrtyCmpsContAmtLimitInfo.clearFilter();
    	DS_TrtyCmpsContAmtLimitInfo.setColumnFilter({"type":"func", "colIndex":"sTrtyCd", "key":sfilterTrtyCmpsContAmtLimit, "condition":"and"});
    	if(DS_TrtyCmpsContAmtLimitInfo.getRowCount() > 0){
        	txtTrtyInfo.setValue(DS_TrtyCmpsContAmtLimitInfo.getCellData(0, "sInfo"));
        	DS_TrtyCmpsContAmtLimitInfo.removeColumnFilterAll();
        }else{
        	DS_TrtyCmpsContAmtLimitInfo.removeColumnFilterAll();

        	TrtyCmpsContAmtLimitVo.set("gdCd", Ds_LTIDA00.getCellData(0, "sGdCd"));
			TrtyCmpsContAmtLimitVo.set("gnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd"));
			TrtyCmpsContAmtLimitVo.set("planCd", cmb_Plan.getValue());
			TrtyCmpsContAmtLimitVo.set("ssrtDate", parent.cal_sSsrtDate.getValue());
			TrtyCmpsContAmtLimitVo.set("trtyCd", Ds_Trty.getCellData(nRow, "sTrtyCd"));
			TrtyCmpsContAmtLimitVo.set("trtyInsAmt", Ds_Trty.getCellData(nRow, "nTrtyInsAmt"));

			var trans = new transSub();      // transaction 보낼 객체 생성
			trans.setId("retrieveTrtyCmpsContAmtLmit");     // transaction 보낼 SubmissionID
			trans.setUrl("/contract/longterm/CBSC0011.do");  // Controller 쪽으로 보낼 주소
			trans.setDs("TrtyCmpsContAmtLimitVo");
			trans.targetDs("TrtyCmpsContAmtLimitDtalVo");
			trans.callBack("scwin.subCallBack"); // 받을 Dataset을 처리시 콜백함수
			trans.send();
        }

    }
    
};

//---------------------------------------------------------------------------
// function 명 : 신규
// 내용        : 보상한도내용
//---------------------------------------------------------------------------
scwin.subCallBack = function(e) { //완료
	//alert(JSON.stringify(e));
	switch (e.subID) {
		case "retrieveTrtyCmpsContAmtLmit":
			if(e.flag == "s"){
				//TrtyCmpsContAmtLimitDtalVo.setJSON(e.result.listTrtyCmpsContAmtLimitDtalVo);
				util.copyM(TrtyCmpsContAmtLimitDtalVo, e.result.listTrtyCmpsContAmtLimitDtalVo);
				var contMsg = "";
     			for (var i=0; i<TrtyCmpsContAmtLimitDtalVo.getRowCount();i++) {
	      			contMsg += "[ " + TrtyCmpsContAmtLimitDtalVo.getCellData(i, "cvrgeName") + " ]<br/>";
	      			contMsg += TrtyCmpsContAmtLimitDtalVo.getCellData(i, "pymStndSpec") + "<br/>";
	      			contMsg += "# 보상한도 " + TrtyCmpsContAmtLimitDtalVo.getCellData(i, "conts") + "<br/>";
	      			contMsg += "<br/>";
     			}
     			//alert("조회완료\n\n"+contMsg);
     			//txtTrtyInfo.setValue(contMsg);
     			var row = grd_sTrty.getRealRowIndex(grd_sTrty.getFocusedRowIndex());
     			var idx = DS_TrtyCmpsContAmtLimitInfo.getRowCount();
     			DS_TrtyCmpsContAmtLimitInfo.insertRow(idx);
     			DS_TrtyCmpsContAmtLimitInfo.setCellData(idx, "sTrtyCd", TrtyCmpsContAmtLimitVo.get("trtyCd"));
     			DS_TrtyCmpsContAmtLimitInfo.setCellData(idx, "nTrtyInsAmt", TrtyCmpsContAmtLimitVo.get("trtyInsAmt"));
     			DS_TrtyCmpsContAmtLimitInfo.setCellData(idx, "sInfo", contMsg);
     			txtTrtyInfo.setValue(DS_TrtyCmpsContAmtLimitInfo.getCellData(idx, "sInfo"));
			}else{
				wprom.alert(e.msg);
			}
		break;
	}
};


//---------------------------------------------------------------------------
// function 명 : chk_sPsnGroupFlgcd_OnClick()
// 내용        : 단체취급체크시 화면처리
//---------------------------------------------------------------------------
//scwin.chk_sPsnGroupFlgcd_oncheckboxclick = function(index, checked, value) { //완료
scwin.chk_sPsnGroupFlgcd_oncheckboxclick_Async = function(info) { //완료
	util.eventAsyncCall(this, scwin.chk_sPsnGroupFlgcd_oncheckboxclick, arguments);	
}

scwin.chk_sPsnGroupFlgcd_oncheckboxclick = function(info) { //완료
	
	var strValue = "";
	
	if (info.checked) {
		strValue = "1";
	} else {
		strValue = "0";
	}

	if ((Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "20" && strValue == "0") ||
	    (Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd") == "10" && strValue == "1")){

	   scwin.fn_setRule(parent.edt_sGdCd.getValue());
	}

	if (strValue == "1") {
		//chk_sPsnGroupFlgcd.setValue(true);
		btn_chk_sPsnGroupFlgcd.show();
		Ds_LTIDA00.setCellData(0,"sPsnGroupFlgcd","20");
	} else {
		//chk_sPsnGroupFlgcd.setValue(false);
		btn_chk_sPsnGroupFlgcd.hide();
		Ds_LTIDA00.setCellData(0,"sPsnGroupFlgcd","10");
		wconv.clear(Ds_LTIEA10);
	}

};

//---------------------------------------------------------------------------
// function 명 : 신규
// 내용        : 단체취급체크 팝업
//---------------------------------------------------------------------------
scwin.btn_GroupList_onclick = function() { //완료
	var promise = Promise.resolve();
    promise = promise.then(function(rtnVal) {
    	var indata = new Object();
    	indata.sGroupCrAdmNo = Ds_LTIEA10.getCellData(0, "sGroupCrAdmNo");
    	indata.sGroupName = Ds_LTIEA10.getCellData(0, "sGroupName");
    	indata.nFrstPsct = Ds_LTIEA10.getCellData(0, "nFrstPsct");
    	indata.nGroupDcrt = Ds_LTIEA10.getCellData(0, "nGroupDcrt");
   		var popInfo = {"width":480,
   	                   "height":146,
   	                   "indata":indata,
   	                   "callback"  : scwin.popupCallback,
					   "title"     : "단체취급"
   	                  };
   	    return wprom.popupOpen("/ui/cbsc/CBSC134P.xml", popInfo, "pop_S");     
    });
    promise = promise.then(function(result) {
    	if (result != "") {
    		if(Ds_LTIEA10.getRowCount() < 1){
				Ds_LTIEA10.insertRow();
			}
			Ds_LTIEA10.setCellData(0, "sGroupCrAdmNo", result.sGroupCrAdmNo);
			Ds_LTIEA10.setCellData(0, "sGroupName", result.sGroupName);
			Ds_LTIEA10.setCellData(0, "nFrstPsct", result.nFrstPsct);
			Ds_LTIEA10.setCellData(0, "nGroupDcrt", result.nGroupDcrt);
			util.setRowPosition(Ds_LTIEA10, 0);
			//msk_sGroupCrAdmNo.setValue(result.sGroupCrAdmNo);
       		//edt_sGroupName.setValue(result.sGroupName);
       		//medt_nFrstPsct.setValue(result.nFrstPsct);
       		//edt_nGroupDcrt.setValue(result.nGroupDcrt);
		}
	});
};



/*-----------------------------------
// function 명 : lfn_InsurTermPaymTermChanged
// 내용        : 보험기간/납입기간변경시 조회
-----------------------------------*/
//scwin.lfn_InsurTermPaymTermChanged = function(obj, strCode, strText, nOldIndex, nNewIndex) {
scwin.lfn_InsurTermPaymTermChanged = function(info) { //완료
	//oldValue, newValue, oldSelectedIndex, newSelectedIndex	
	var nOldIndex = info.oldSelectedIndex; 
	var nNewIndex = info.newSelectedIndex;

    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > strCode ===> " + strCode);	
    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > strText ===> " + strText);	
    if (wconv.length(wconv.trim(Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsName"))) <= 0) {
        cmb_Plan.setSelectedIndex(nOldIndex);
        wprom.alert("고객등록을 먼저 해주세요.");
        return;
    }
    
    wconv.clear(DsWs_InsurTerm);
    wconv.clear(DsWs_PaymTerm);
    
    var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB331Task", "getAnntPlanTrty", "", "");
    transObj.setId("getAnntPlanTrty");
    transObj.setUrl("/contract/CBSC075MController.do");
    transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); //상품코드
    transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); //종형코드
    transObj.setParam("sStndDate", Ds_LTIDA00.getCellData(0, "sSsrtDate")); //청약일
    transObj.setParam("sPlanCd", cmb_Plan.getValue()); //플랜코드
    transObj.setParam("sResno", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsCd")); //피보험자주민번호
    transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sDrveFlagCd")); //주민번호 
    transObj.setParam("sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); // 업무보고서분규코드
    transObj.setParam("sAnntOpnAgeCd", Ds_LTIDA00.getCellData(0, "sAnntOpnAgeCd")); // 연금개시나이
    transObj.setParam("sAnntPymTermCd", Ds_LTIDA00.getCellData(0, "sAnntPymTermCd")); // 연금지급기간
    transObj.setParam("gUserIP", util.getGdsValue("gUserIP")); // 테스트용
    transObj.setParam("sPlanName", cmb_Plan.getText(false)); //플랜명
    transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sDrveFlagCd")); //주민번호
    //var exArr = cmb_InsurTermPaymTerm.getValue().split("/");
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];
    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > sInsurTermCd ===> " + sInsurTermCd);
    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > sPaymTermCd ===> " + sPaymTermCd);
    transObj.setParam("sInsurTermCd", sInsurTermCd); // 보험기간
    transObj.setParam("sPaymTermCd", sPaymTermCd); // 납입기간
    
    //보험기간
    transObj.setXPath("//*/WARNING");
    transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");
    transObj.setXPathDs();
	transObj.sync();
	transObj.send(); 
    
    util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");
    
    if (DsWs_Warning.getRowCount() > 0) {
		wprom.alert(DsWs_Warning.getCellData(0, "msg"));
    	return;
    }

    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm", "Y");
    
    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > 보험기간(DsWs_InsurTerm) ===> " + DsWs_InsurTerm.SaveXML());	
    //trace("##### C010_Div1 > lfn_InsurTermPaymTermChanged > 납입기간(DsWs_PaymTerm) ===> " + DsWs_PaymTerm.SaveXML());
    //Ds_Trty.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);
	
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];

    // 보험기간종료일자 setting
    cal_sInsurEndDate.setValue(scwin.lfn_endDate(cal_sInsurStrtdate.getValue(), sInsurTermCd, Ds_Pibo.getCellData(0, "nInrpsAge")));
    
    // 보기/납기 명칭 세팅
    util.setCellDataF(Ds_LTIDA00, 0, "sInsurTermPaymTermName", cmb_InsurTermPaymTerm.getValue()); // 보기납기
    // 보험기간/납입기간 세팅
    util.setCellDataF(Ds_LTIDA00, 0, "sInsurTermCd", sInsurTermCd); // 보험기간
    util.setCellDataF(Ds_LTIDA00, 0, "sPaymTermCd", sPaymTermCd); // 납입기간

	//일시납 납입기간에 따른 납입주기 세팅
    scwin.lfn_PaymCyclSet();
    
    
	
	// 보험기간,납입기간 초기값 세팅
    for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
        for (var j = 0; j < DsWs_InsurTerm.getRowCount(); j++) {
            if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == util.getCellDataF(DsWs_InsurTerm, j, "sTrtyCd")) {
                util.setCellDataF(Ds_Trty, i, "sInsurTermCd", util.getCellDataF(DsWs_InsurTerm, j, "sInsurTermCd"));
                break;
            }
        }

        // 납입기간 초기값세팅
        for (var j = 0; j < DsWs_PaymTerm.getTotalRow(); j++) {
            if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == util.getCellDataF(DsWs_PaymTerm, j, "sTrtyCd")) {
                util.setCellDataF(Ds_Trty, i, "sPaymTermCd", util.getCellDataF(DsWs_PaymTerm, j, "sPaymTermCd"));
                //trace("sPaymTermCd=="+Ds_Trty.GetColumn(i, "sPaymTermCd")+"]");
                break;
            }
        }
    }
	
	
	
    // 특약 납기 보기 별도 셋팅(납기 보기 수정 데이터가 있는 경우)
    //if (Ds_Trty.wconv.findRowF("InrtmPytrMdfcYn", "Y") > -1) {
    if (wconv.findRowF(Ds_Trty, "InrtmPytrMdfcYn", "Y") > -1) {
        for (var k = 1; k < Ds_Pibo.getTotalRow(); k++) {
            scwin.lfn_InsurTermPaymTermChangedPibo(k);
        }
    }

    // 특약관계체크
    scwin.lfn_TrtyList_Relation_Check();
    //Ds_Trty.FireEvent = true;
    util.setDataListEvent(Ds_Trty, dsListEvArray);
    
    // 포커스 이동
    btn_CalcPrem.focus(); // 보험료계산
};


/*-----------------------------------
// function 명 : lfn_InsurTermPaymTermChangedPibo
// 내용        : 피보험자별 납입기간 셋팅
-----------------------------------*/
scwin.lfn_InsurTermPaymTermChangedPibo = function(rowIdx) { //완료

	wconv.clear(DsWs_InsurTerm);
    wconv.clear(DsWs_PaymTerm);

	var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB331Task", "getAnntPlanTrty", "", "");
    transObj.setId("getAnntPlanTrty");
    transObj.setUrl("/contract/CBSC075MController.do");
    transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); //상품코드
    transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); //종형코드
    transObj.setParam("sStndDate", Ds_LTIDA00.getCellData(0, "sSsrtDate")); //청약일
    transObj.setParam("sPlanCd", cmb_Plan.getValue()); //플랜코드
    transObj.setParam("sResno", Ds_Pibo.getCellData(rowIdx, "sInrpsCd")); //피보험자주민번호
    transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(rowIdx, "sDrveFlagCd")); //운전자 구분코드
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];
    transObj.setParam("sInsurTermCd", sInsurTermCd); //보험기간
    transObj.setParam("sPaymTermCd", sPaymTermCd); //납입기간
    
    transObj.setXPath("//*/WARNING");
    transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");
    transObj.setXPathDs();
	transObj.sync();
	transObj.send(); 
    
    util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");
    
    if (DsWs_Warning.getRowCount() > 0) {
		wprom.alert(DsWs_Warning.getCellData(0, "msg"));
    	return;
    }
    
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm", "Y");
    
    //trace("보험기간=="+DsWs_InsurTerm.SaveXML());	
    //trace("납입기간=="+DsWs_PaymTerm.SaveXML());	
    //Ds_Trty.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);
	
    //보험기간,납입기간 초기값 세팅
    for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
        if (util.getCellDataF(Ds_Trty, i, "nPsnPrprtGroupSeqno") == Ds_Pibo.getCellData(rowIdx, "nInrpsSeqno")) {
            for (var j = 0; j < DsWs_InsurTerm.getRowCount(); j++) {
                if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == DsWs_InsurTerm.getCellData(j, "sTrtyCd")) {
                    util.setCellDataF(Ds_Trty, i, "sInsurTermCd", DsWs_InsurTerm.getCellData(j, "sInsurTermCd"));
                    if (Ds_Trty.getCellData(i, "InrtmPytrMdfcYn") == "Y" && Ds_Trty.getCellData(i, "sTrtyCd") == "21020401") {
                    }
                    //trace(i+"==sInsurTermCd=="+Ds_Trty.GetColumn(i, "sInsurTermCd")+"]");
                    break;
                }
            }

            //납입기간 초기값세팅
            for (var j = 0; j < DsWs_PaymTerm.getTotalRow(); j++) {
                if (util.getCellDataF(Ds_Trty, i, "sTrtyCd") == util.getCellDataF(DsWs_PaymTerm, j, "sTrtyCd")) {
                    util.setCellDataF(Ds_Trty, i, "sPaymTermCd", util.getCellDataF(DsWs_PaymTerm, j, "sPaymTermCd"));
                    //trace("sPaymTermCd=="+Ds_Trty.GetColumn(i, "sPaymTermCd")+"]");					
                    break;
                }
            }
        }
    }
    
    //Ds_Trty.FireEvent = true;
    util.setDataListEvent(Ds_Trty, dsListEvArray);
};


/*-----------------------------------
// function 명 : div_Annty_cmb_AnntOpnAgeCd_OnChanged
// 내용        : 연금개시연령 변경
-----------------------------------*/
//scwin.div_Annty_cmb_AnntOpnAgeCd_OnChanged = function(obj, strCode, strText, nOldIndex, nNewIndex) {
scwin.div_Annty_cmb_AnntOpnAgeCd_OnChanged = function(info) { //완료
	//oldValue, newValue, oldSelectedIndex, newSelectedIndex
	var nOldIndex = info.oldSelectedIndex;
	var nNewIndex = info.newSelectedIndex;
	var objID = this.id;
	var obj = {"getID" : function() {return objID}};
	var strCode = "";
	var strText = "";
    /*
    	sInrpsInfoChg = false;
    */
    scwin.lfn_InsurTermCd_OnChanged(obj, strCode, strText, nOldIndex, nNewIndex);
};

/*-----------------------------------
// function 명 : div_Annty_cmb_AnntPymTermCd_OnChanged
// 내용        : 연금지급기간 변경
-----------------------------------*/
//scwin.div_Annty_cmb_AnntPymTermCd_OnChanged = function(obj, strCode, strText, nOldIndex, nNewIndex) {
scwin.div_Annty_cmb_AnntPymTermCd_OnChanged = function(info) { //완료
	//oldValue, newValue, oldSelectedIndex, newSelectedIndex
	var nOldIndex = info.oldSelectedIndex;
	var nNewIndex = info.newSelectedIndex;
	var objID = this.id;
	var obj = {"getID" : function() {return objID}};
	var strCode = "";
	var strText = "";
    /*
    	sInrpsInfoChg = false;
    */
    scwin.lfn_InsurTermCd_OnChanged(obj, strCode, strText, nOldIndex, nNewIndex);
};

/*---------------------------------------------------------------
// function 명 : lfn_InsurTermCd_OnChanged
// 내용        : 보험기간 (연금개시연령 또는 연금지급기간) 변경시
---------------------------------------------------------------*/
scwin.lfn_InsurTermCd_OnChanged = function(obj, strCode, strText, nOldIndex, nNewIndex) { //완료
    //trace("#####	B010_Div1.lfn_InsurTermCd_OnChanged		#####");
    //trace("#####	Ds_LTIDA00.GetColumn(0, sAnntOpnAgeCd)	===> " + Ds_LTIDA00.GetColumn(0, "sAnntOpnAgeCd"));
    //trace("#####	Ds_LTIDA00.GetColumn(0, sAnntPymTermCd)	===> " + Ds_LTIDA00.GetColumn(0, "sAnntPymTermCd"));
    if (wconv.length(wconv.trim(Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsName"))) <= 0) {
        cmb_Plan.setSelectedIndex(nOldIndex);
        wprom.alert("고객등록을 먼저 해주세요.");
        return;
    }

    //Ds_Pibo.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Pibo);
	util.removeAllDataListEvent(Ds_Pibo);
	
    scmb_plan = true; //plan변경 flag.
    
    for (var i = 0; i < Ds_Pibo.getTotalRow(); i++) {
        util.setCellDataF(Ds_Pibo, i, "sApplPlanCd", cmb_Plan.getValue());
        util.setCellDataF(Ds_Pibo, i, "sApplPlanName", cmb_Plan.getValue());
    }
    
    wconv.clear(DsWs_InsurTerm);
    wconv.clear(DsWs_PaymTerm);
    wconv.clear(DsWs_Trty);
    wconv.clear(DsWs_InsurTermPaymTerm);
    wconv.clear(Dsws_InsAmt);
    wconv.clear(Ds_Trty_Backup); // 특약 백업용 초기화
    wconv.clear(DsWs_TrtyTerm);
    if (obj.getID() == "cmb_AnntOpnAgeCd") {
        // 연금개시나이 선택시
        wconv.clear(DsWs_AnntPymTermCd); // 연금지급기간 초기화
    }

    var transObj = new callService("com.inswave.longterm.ssr.pln.task.DBB331Task", "getAnntPlanTrty", "", "");
    transObj.setId("getAnntPlanTrty");
    transObj.setUrl("/contract/CBSC075MController.do");
    transObj.setParam("gUserIP", util.getGdsValue("gUserIP")); // 테스트용
    transObj.setParam("sGdCd", Ds_LTIDA00.getCellData(0, "sGdCd")); // 상품코드
    transObj.setParam("sGnrzCd", Ds_LTIDA00.getCellData(0, "sGnrzCd")); // 종형코드
    transObj.setParam("sStndDate", Ds_LTIDA00.getCellData(0, "sSsrtDate")); // 청약일
    transObj.setParam("sPlanCd", cmb_Plan.getValue()); // 플랜코드
    transObj.setParam("sResno", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsCd")); // 피보험자주민번호
    transObj.setParam("sDrivFlagCd", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sDrveFlagCd")); // 
    transObj.setParam("sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); // 업무보고서분규코드
    transObj.setParam("sAnntOpnAgeCd", Ds_LTIDA00.getCellData(0, "sAnntOpnAgeCd")); // 연금개시나이
    
    //	gfn_SetParam(MethodObj, "sAnntPymTermCd",	Ds_LTIDA00.GetColumn(0, "sAnntPymTermCd"));						// 연금지급기간
    if (obj.getID() == "cmb_AnntPymTermCd") {
        // 연금지급기간 선택
        transObj.setParam("sAnntPymTermCd", Ds_LTIDA00.getCellData(0, "sAnntPymTermCd")); // 연금지급기간
    } else {
        // 연금개시나이 선택
        transObj.setParam("sAnntPymTermCd", ""); // 연금지급기간
    }


    //trace("#####	B010_Div1.lfn_InsurTermCd_OnChanged		#####");
    //trace("#####	nAnntOpnAge		===> " + nAnntOpnAge);
    //trace("#####	nAnntPymTerm	===> " + nAnntPymTerm);
    //trace("#####	nInsAge			===> " + nInsAge);
    //trace("#####	nInsurTermCd	===> " + nInsurTermCd);
    //trace("#####	sInsurTermCd	===> " + sInsurTermCd);
    /*
    DsWs_Warning.DataObject = "DOBJ_PlanTrty";
    DsWs_InsurTerm.DataObject = "DOBJ_PlanTrty"; // 보험기간
    DsWs_Trty.DataObject = "DOBJ_PlanTrty";
    DsWs_PaymTerm.DataObject = "DOBJ_PlanTrty";
    DsWs_InsurTermPaymTerm.DataObject = "DOBJ_PlanTrty";
    Dsws_InsAmt.DataObject = "DOBJ_PlanTrty";
    DsWs_TrtyTerm.DataObject = "DOBJ_PlanTrty";
    if (obj.getID() == "cmb_AnntOpnAgeCd") {
        // 연금개시나이 선택시
        DsWs_AnntPymTermCd.DataObject = "DOBJ_PlanTrty"; // 연금지급기간
    }
    */
    
    transObj.setXPath("//*/WARNING");
    transObj.addXPath("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='multi']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='InsAmt']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi");
    transObj.addXPath("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi");
    
    transObj.setXPathDs();
	transObj.sync();
	transObj.send(); 
    
    util.jSonDsCreate(_tranSync.getDsJson("//*/WARNING"), "DsWs_Warning");
    
    if (DsWs_Warning.getRowCount() > 0) {
		wprom.alert(DsWs_Warning.getCellData(0, "msg"));
    	return;
    }
    
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTerm']/vector/data/multi"), "DsWs_InsurTerm", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='multi']/vector/data/multi"), "DsWs_Trty", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='PaymTerm']/vector/data/multi"), "DsWs_PaymTerm", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsurTermPaymTerm']/vector/data/multi"), "DsWs_InsurTermPaymTerm", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='InsAmt']/vector/data/multi"), "Dsws_InsAmt", "Y");
    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='trtyTermList']/vector/data/multi"), "DsWs_TrtyTerm", "Y");
    if (obj.getID() == "cmb_AnntOpnAgeCd") {
    	// 연금개시나이 선택시
    	util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='AnntyPymTermList']/vector/data/multi"), "DsWs_AnntPymTermCd", "Y"); // 연금지급기간
    }

    //trace("보험기간=="+DsWs_InsurTerm.SaveXML());	
    //trace("특약=="+DsWs_Trty.SaveXML());	
    //보기납기 첫번째 세팅
    cmb_InsurTermPaymTerm.setSelectedIndex(0);
    //lfn_InsurTermPaymTermChanged(obj,cmb_InsurTermPaymTerm.Value,cmb_InsurTermPaymTerm.Value,0,0);
    //Ds_Trty.FireEvent = false;
    var dsListEvArray = util.getDataListEvent(Ds_Trty);
	util.removeAllDataListEvent(Ds_Trty);
	
	// 특약세팅
	util.jSonDsCreate(DsWs_Trty.getAllJSON(), "Ds_Trty", "Y");	

    //trace("Ds_Trty:" + Ds_Trty.SaveXML()); 
    scwin.lfn_TrtyDataSetSet();

    // 특약중 화면출력특약만 화면에 보여줌
    //wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >== 0");
    //wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >== 0");
    var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			return true;
    	} else {
    		return false;
    	}
    }
    Ds_Trty.clearFilter();
    Ds_Trty.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});
    var funcFilter = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
			return true;
    	} else {
    		return false;
    	}
    }
    Ds_Trty_Backup.clearFilter();
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter, "condition":"and"});

    // 보험기간,가입금액 초기값 세팅
    scwin.lfn_InsurTermInit(obj);
    
    //Ds_Trty.FireEvent = true;
    util.setDataListEvent(Ds_Trty, dsListEvArray);

    // 플랜에 따른 영업보험료변경가능여부가 N인경우 영업보험료 비활성화처리
    if (DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "sPremAmtChgYn") == "N") {
        medt_nBussPrem.setDisabled(true);
    } else {
        medt_nBussPrem.setDisabled(false);
    }


    // 특약관계체크
    scwin.lfn_TrtyList_Relation_Check();

    // 장기보험고도화
    Ds_LTIDA00.setCellData(0, "sInsurTermPaymTermName", cmb_InsurTermPaymTerm.getValue()); // 보기납기
    // 연금지급기간
    if (obj.getID() == "cmb_AnntOpnAgeCd") {
        // 연금개시나이 선택시
        if (DsWs_AnntPymTermCd.getRowCount() == 0) {
            wprom.alert("연금지급기간 조회건이 없습니다.");
        } else {
            var insRow = util.insertRow(DsWs_AnntPymTermCd, 0);
            /*수작업 변환 개발자 가이드(테스트 중)
            dataList에 row를 추가하고 setCellData를 하는 경우 첫 번째 인자를 insRow로 변경해주세요.*/
            DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCd", "");
            DsWs_AnntPymTermCd.setCellData(0, "sAnntPymTermCdName", "- 선택 -");
            cmb_AnntPymTermCd.setSelectedIndex(1);
        }
    }

    //trace("Ds_Trty:"+Ds_Trty.SaveXml());
    // 피보험자가 여러명일때 나머지 피보험자의 특약도 조회
    for (var i = 1; i < Ds_Pibo.getTotalRow(); i++) {
        scwin.lfn_searchPiboTrty(obj, i);
    }
    /*
    wconv.filter(Ds_Trty, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='1'");
    wconv.filter(Ds_Trty_Backup, "pos(sScrnIndcYn, 'Y') >= 0 && nPsnPrprtGroupSeqno=='1'");
    */
    var funcFilter1 = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == "1") {
    			return true;
    		}
    	}
    	return false;
    }
    var funcFilter2 = function(cellData, tmpParam, rowIdx) {
    	if (Ds_Trty_Backup.getCellData(rowIdx, "sScrnIndcYn").indexOf("Y") >= 0) {
    		if (Ds_Trty_Backup.getCellData(rowIdx, "nPsnPrprtGroupSeqno") == "1") {
    			return true;
    		}
    	}
    	return false;
    }
    Ds_Trty.clearFilter();
    Ds_Trty_Backup.clearFilter();
    Ds_Trty.setColumnFilter       ({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter1, "condition":"and"});
    Ds_Trty_Backup.setColumnFilter({"type":"func", "colIndex":"sScrnIndcYn", "key":funcFilter2, "condition":"and"});

    //Ds_Pibo.FireEvent = true;
    util.setDataListEvent(Ds_Pibo, dsListEvArray);

    // 포커스 이동
    btn_CalcPrem.focus(); // 보험료계산
    //medt_nBussPrem.SetFocus();	// 영업보험료
};



//---------------------------------------------------------------------------
// function 명 : btnGroupList_OnClick()
// 내용        : 단체취급List 조회화면 호출
//---------------------------------------------------------------------------
scwin.btnGroupList_OnClick = function(obj) { //완료 (미사용)

	return util.toDoAlert("btnGroupList_OnClick (미사용)");

    var promise = Promise.resolve();
    //trace("Ds_LTIEA10.GetCount() ===> " + Ds_LTIEA10.GetCount());
    //trace(Ds_LTIEA10.SaveXML());
    var arg = "sGroupCrAdmNo=" + wconv.quote(div_Group_msk_sGroupCrAdmNo.getValue());
    promise = promise.then(function(rtnVal) {
        return wprom.promise.popupOpen("PROJECT_PATH_TEMP/ssr_pln/B150.xml", 800, 550, "TaskBar=true Resize=true");
    });
    promise = promise.then(function(result) {
        /*wprom.popupOpen(가이드참조)*/
        if (wconv.Length(result) != 0) {
            var resultArr = wconv.split(result, "^", true);
            if (Ds_LTIEA10.getRowCount() == 0) {
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "sGroupCrAdmNo",
                        "sGroupCrAdmNo",
                        "text"
                    ]
                ]); // 단체계약관리번호
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "sGroupCd",
                        "sGroupCd",
                        "text"
                    ]
                ]); // 단체코드
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "sGroupName",
                        "sGroupName",
                        "text"
                    ]
                ]); // 단체명
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "sRpstCd",
                        "sRpstCd",
                        "text"
                    ]
                ]); // 대표자코드
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "sRpstName",
                        "sRpstName",
                        "text"
                    ]
                ]); // 대표자명
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "nFrstPsct",
                        "nFrstPsct",
                        "text"
                    ]
                ]); // 최초인원수     
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "nCrntPsct",
                        "nCrntPsct",
                        "text"
                    ]
                ]); // 현재인원수
                util.insertColumn(Ds_LTIEA10, [
                    [
                        "nGroupDcrt",
                        "nGroupDcrt",
                        "text"
                    ]
                ]); // 할인율
                util.appendRow(Ds_LTIEA10);
            }


            //trace(resultArr);
            Ds_LTIEA10.setCellData(0, "sGroupCrAdmNo", resultArr[0]); // 단체계약관리번호       
            Ds_LTIEA10.setCellData(0, "sGroupCd", resultArr[1]); // 단체코드
            Ds_LTIEA10.setCellData(0, "sGroupName", resultArr[2]); // 단체명           
            Ds_LTIEA10.setCellData(0, "sRpstCd", resultArr[3]); // 대표자코드             
            Ds_LTIEA10.setCellData(0, "sRpstName", resultArr[4]); // 대표자명    
            Ds_LTIEA10.setCellData(0, "nFrstPsct", resultArr[5]); // 최초인원수           
            Ds_LTIEA10.setCellData(0, "nCrntPsct", resultArr[6]); // 현재인원수     
            Ds_LTIEA10.setCellData(0, "nGroupDcrt", wconv.toString(wconv.toNumber(resultArr[7]) * 100)); //할인율
            //trace(Ds_LTIEA10.SaveXML());	
        }
    });
    return promise;
};

//---------------------------------------------------------------------------
// function 명 : btn_SearchCust_OnClick
// 내용        : 스마트폰앱고객 버튼클릭시 처리
//---------------------------------------------------------------------------
scwin.btn_SearchCust_OnClick = function(obj) { //완료

	var arg = "sUserID=" + util.getGdsValue("gUserID");
    var nFindRow = wconv.findRow(Ds_Pibo, "sel", "1"); //현재 선택된 피보험자
    if (nFindRow < 0) {
        wprom.alert("피보험자를 먼저 선택하시기 바랍니다.");
        return false;
    }

    var bfInrpsCd = Ds_Pibo.getCellData(nFindRow, "sInrpsCd");

    var promise = Promise.resolve();
    promise = promise.then(function(rtnVal) {
		var indata = {sUserID : util.getGdsValue("gUserID")};
		var popInfo = {
						"width"     : 635,
						"height"    : 390,  
						"indata"    : indata,
						"title"     : "대면채널조회",
						};
		return wprom.popupOpen("/ui/cbso/CBSO009P.xml", popInfo);
	});
	promise = promise.then(function(rtnValue) {
		if (wconv.length(rtnValue) != 0) {
			var args = wconv.split(rtnValue, "^", true);
        	if (args.length > 2) {
            	Ds_Pibo.setCellData(nFindRow, "sInrpsCd", wconv.trim(args[2]));
            	var afInrpsCd = Ds_Pibo.getCellData(nFindRow, "sInrpsCd"); //변경후 피보험자
        	}
        }
	});

    return promise;
};

//---------------------------------------------------------------------------
// function 명 : lfn_Btn_LoadFile_OnClick
// 내용        : 피보험자 정보파일 읽기
//---------------------------------------------------------------------------
scwin.lfn_Btn_LoadFile_OnClick = function(obj) { //완료 (미사용)

	return util.toDoAlert("lfn_Btn_LoadFile_OnClick (미사용)");

    parent.lfn_Cancel();
    parent.lfn_loadFile(obj);
};


//---------------------------------------------------------------------------
// function 명 : btn_ExptPrem_OnClick
// 내용        : 예상보험료 버튼클릭시 처리
//---------------------------------------------------------------------------
scwin.btn_ExptPrem_OnClick = function(obj) { //완료
    //var arg = "sPlanNo=" + wconv.quote(Ds_LTIDA00.getCellData(0, "sPlanNo"));
    var indata = {sCrNo : Ds_LTIDA00.getCellData(0, "sPlanNo")};
	var popInfo = {
					"width"     : 820,
					"height"    : 315,
					"indata"    : indata,
					"title"     : "예상보험료"
					};
	wprom.popupOpen("/ui/cbsc/CBSC034P.xml", popInfo);
};

//---------------------------------------------------------------------------
// function 명 : lfn_deleteRow
// 내용        : 보험자 삭제 행삭제
//---------------------------------------------------------------------------
scwin.lfn_deleteRow = function(obj) { //완료
    var nFindRow = wconv.findRow(Ds_Pibo, "sel", "1");
    if (nFindRow == 0) {
        wprom.alert("첫번째 피보험자는 삭제할 수 없습니다.");
        return;
    }
    if (nFindRow < Ds_Pibo.getRowCount() - 1) {
        wprom.alert("마지막 피보험자를 먼저 삭제 하세요.");
        return;
    }
    //Ds_Pibo.FireEvent = false; //이벤트 발생이 안되도록 셋팅
    var dsListEvArray = util.getDataListEvent(Ds_Pibo);
	util.removeAllDataListEvent(Ds_Pibo);
	
    //피보험자에 종속되어있는 데이타삭제(타보험, 질의서, 부담보)
    scwin.lfn_deleteEtc(nFindRow, "Y");

    //특약 삭제
    scwin.lfn_ClearTrty(nFindRow);
    util.deleteRow(Ds_Pibo, nFindRow); // Dataset에 빈 Record한줄 추가
    util.deleteRow(Ds_Pibo_BackUp, nFindRow);
    scwin.Grd_Pibo_OnCellPosChanged(nFindRow - 1, 0, nFindRow - 1, -1, "Y"); //사용자호출 Y
    
    //Ds_Pibo.FireEvent = true;
    util.setDataListEvent(Ds_Pibo, dsListEvArray);
    //MS텝 정보 출력
	parent.scwin.lfn_set_Tab_Info("S1", "T1");
};

//---------------------------------------------------------------------------
// function 명 : lfn_Btn_carList_OnClick
// 내용        : 자동차가입 현황 팝업
//---------------------------------------------------------------------------
scwin.lfn_Btn_carList_OnClick = function(obj) { //완료 (미사용)

	return util.toDoAlert("lfn_Btn_carList_OnClick (미사용)");

    scwin.lfn_ThcpCarInsCrst(DsWs_PrdAttr);
};


//---------------------------------------------------------------------------
// function 명 : fn_Medical()
// 내용        : 사전조회(비례보상제도)
//---------------------------------------------------------------------------
scwin.fn_Medical = function(obj) { //완료

    //사전조회시에도 고객등록 여부 확인
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        if (wconv.length(Ds_Pibo.getCellData(i, "sAddrFlgcd")) <= 0) {
            wprom.alert("고객등록을 먼저 해주세요");
            fFlag = false;
            return fFlag;
        }
    }

    // scan 이 아직 셋팅전. 
    if ((parent.sScanObjtYn == "Y" && scwin.lfn_checkMedical(wconv.findRow(Ds_Pibo, "sel", "1"))) || parent.sScanObjtYn != "Y") {
        var pi_nRow = wconv.findRow(Ds_Pibo, "sel", "1");
        if (Ds_Pibo_BackUp.getCellData(pi_nRow, "hasPronCmpsTrty") == "N" && Ds_Pibo_BackUp.getCellData(pi_nRow, "hasFxamtCmps") == "N") {
            scwin.Trty_ValidationCheck(Ds_Trty);
        }

        //알림메세지
        /* 상품소개 동의등 부분으로 인해 해당 메세지 주석 처리.ldh (20120730)
        var str_msg = "";
        var str_msg2 = "";
		
        if (gFaceSalesYN == "Y"	){
        	str_msg = "개인신용정보 수집,이용,조회동의서(사전조회)를 스캔하였습니까?";
        	str_msg2 = "";
        }else{
        	str_msg = "손보협회 보험계약정보 (실손담보 및 정액담보)를 사전조회하는데 동의 녹취를 이행하셨습니까?";
        	str_msg2 = "(보험계약정보 조회자료는 손보협회로 실시간 전송되므로 반드시 사전조회 동의 녹취후 조회하여 주시기 바랍니다)";
        }
		
        if(gfn_MsgBox("MB_YESNO", str_msg , str_msg2) != 1){
        	return;
        }
        */
        
        var indata = new Object();
		indata.sInrpsCd = Ds_Pibo.getCellData(pi_nRow, "sInrpsCd"); //피보험자코드
		indata.sInrpsName = Ds_Pibo.getCellData(pi_nRow, "sInrpsName"); //피보험자명
		indata.sPlanNo = parent.medt_PlanNo.getValue(); //설계번호
		indata.hasPronCmpsTrty = Ds_Pibo_BackUp.getCellData(pi_nRow, "hasPronCmpsTrty"); //실손가입여부(2011.05.13 김상운추가)
		indata.hasFxamtCmps = Ds_Pibo_BackUp.getCellData(pi_nRow, "hasFxamtCmps"); //정액담보가입여부(2011.05.13 김상운추가)
		var sSvtYn = "N";
        if (DsWs_PrdAttr.getCellData(0, "GdFlgcd") == "2") {
            sSvtYn = "Y";
        }
        indata.sSvtYn = sSvtYn;
        var pObj = {  // 수정(추가) 2017.10.20, by 진태만 
			"Ds_Pibo" : Ds_Pibo 					// 피보험자 정보 Ds 
			,"Ds_LTIDA00" : Ds_LTIDA00 		// 보험 기본사항 정보 Ds 
			,"Ds_Pibo_BackUp" : Ds_Pibo_BackUp 		//부모창 Ds_Pibo_BackUp  
		} 	// 자식으로 보낼 부모 Ds OBJECT 리스트
		
        //알림메세지
        var popInfo = {"width":826,
					   "height":695,
					   "indata"    : indata,	 			// 자식으로 보낼 부모 파라미터  리스트
					   "parentObject"    : pObj,	 	// 자식으로 보낼 부모 Ds OBJECT 리스트   // 수정(추가) 2017.10.20, by 진태만 
					   "callback"  : "",
					   "title"     : "보험계약정보조회"
					  };
		wprom.popupOpen("/ui/cbsc/CBSC056P.xml", popInfo);//보험계약정보조회

    }
    
};

/*-----------------------------------
// function 명 : lfn_insuDetail
// 내용        : 인수제한사유조회
-----------------------------------*/
scwin.lfn_insuDetail = function(obj) { //완료

	if (Ds_LTIDA15.getRowCount() == 0) {
        wprom.alert("인수제한 사항이 없습니다");
        return false;
    }
    
	//var result = Open("ssr_pln::B080_Pop.xml", 800, 550, "TaskBar=true Resize=true");
	var promise = Promise.resolve();
	promise = promise.then(function(rtnVal) {
		var indata = new Object();
 		var pObj = {  // 수정(추가) 2017.10.31, by 진태만 
				 	"Ds_LTIDA00" : Ds_LTIDA00 		// 보험 기본사항 정보 Ds Set	 
					, "Ds_Pibo" : Ds_Pibo 							// 피보험자 정보 Ds Set 
					, "Ds_LTIDA03" : parent.Ds_LTIDA03  		// 계약자 정보 Ds Set
					, "Ds_LTIDA15" : Ds_LTIDA15  		// 부모창 심사 정보 Ds Set  
					, "medt_PlanNo" : parent.medt_PlanNo 		// 설계번호 Set
					, "edt_sGdCdNm" : parent.edt_sGdCdNm	// 상품명 Set  
				} 	// 자식으로 보낼 부모 Ds OBJECT 리스트
 
		var popInfo = {"width":834,	// 수정(추가) 2017.10.31, by 진태만  --> 834, 449
					   "height":480,
					   "indata":indata,
					   "parentObject"    : pObj,	 	// 자식으로 보낼 부모 Ds OBJECT 리스트   // 수정(추가) 2017.10.31, by 진태만  
					   "callback"  : "",
					   "title"     : "인수제한사유조회"
					  };
		return wprom.popupOpen("/ui/cbsc/CBSC085P.xml", popInfo);//인수제한사유조회
	});
	return promise;
};

//---------------------------------------------------------------------------
// function 명 : fn_summary()
// 내용        : 보험료 요약
//---------------------------------------------------------------------------
scwin.fn_summary = function(obj) { //완료

    //trace("\n----------------fn_summary-------------------\n");
    //trace(Ds_Pibo.SaveXML());
    //trace("\n----------------fn_summary-------------------\n");
    //계약기본사항만 변경되었는지 체크한다.

    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    if (!CalcPremFlag) {
        wprom.alert("보험료 산출을 해주세요");
        return false;
    }    
    if (wconv.length(Ds_LTIDA00.getCellData(0, "nAccuPrem")) == 0) {
        wprom.alert("보험료 산출이 되지 않았습니다");
        return false;
    }
    if (Ds_Pibo.getRowCount() == 0) {
        wprom.alert("피보험자 정보가 없습니다");
        return false;
    }

	var promise = Promise.resolve();

    promise = promise.then(function(rtnVal) {
		var indata = new Object();
		indata.sPlanNo = Ds_LTIDA00.getCellData(0, "sPlanNo"); //설계번호
		indata.sPsnGroupFlgcd = Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd");
		
		var pObj = {  // 수정(추가) 2017.10.31, by 진태만 
				 	"Ds_LTIDA00" : Ds_LTIDA00 	// 보험 기본사항 정보 Ds Set	 
					, "Ds_Pibo" : Ds_Pibo 						// 피보험자 정보 Ds Set 
					, "Ds_LTIEA10" : Ds_LTIEA10  			// 부모창 단체 정보 Ds Set
				} 	// 자식으로 보낼 부모 Ds OBJECT 리스트
				
		var popInfo = {"width":825,	// 수정(width, height): 2017.10.31, by 진태만   --> 847, 575
					   "height":550,
					   "indata":indata,
					    "parentObject"    : pObj,	 	// 자식으로 보낼 부모 Ds OBJECT 리스트   // 수정(추가) 2017.10.31, by 진태만  
					   "callback"  : "",
					   "title"     : "보험료 요약"
					  }; 
		return wprom.popupOpen("/ui/cbsc/CBSC058P.xml", popInfo);	// 보험료 요약 팝업
	});
    return promise;    
};

//---------------------------------------------------------------------------
// function 명 : openPrint()
// 내용        : 가입설계서
//---------------------------------------------------------------------------
scwin.openPrint = function(obj) { //완료

    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    if (scwin.lfn_checkPrint()) {
        //해약환급처리
        parent.scwin.lfn_RtnAmt();

        //갱신보험료처리
        if (parent.sSimpleYn != "Y") {
        	parent.scwin.lfn_RenwlPrem();
        }
        
        var sArg = "";
        var sPlanNo = parent.medt_PlanNo.getValue();
        var sPsnGroupFlgcd = Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd");
        var sInrpsName = Ds_Pibo.getCellData(0, "sInrpsName");
        var sDmCode = "";

        var reportInfo = new Object();
        if (Ds_LTIDA00.getCellData(0, "sScanObjtYn") == "Y") {
            reportInfo.rptName = "longterm/C400_Rep";
            sDmCode = "L186";
        } else {
            reportInfo.rptName = "longterm/C400_Rep";
            sDmCode = "L185";
        }

        reportInfo.dataType       = "xml";
		reportInfo.taskValue      = "com.inswave.longterm.psv.ens.task.EBE200Task";
		reportInfo.actionValue    = "printC400_RepV01";
		reportInfo.sInterfaceType = "Y";
		reportInfo.gUserID        = util.getGdsValue("gUserID");
		reportInfo.setParam       = [ "sPlanNo|"+ sPlanNo
		                             ,"sPsnGroupFlgcd|"+sPsnGroupFlgcd
		                             ,"sGdCd|"+parent.edt_sGdCd.getValue()
		                             ,"sDmCode|"+sDmCode];
		reportInfo.title          = "가입설계서";
		wprom.reportOpen(reportInfo);
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_hwangup()
// 내용        : 예상환급금조회
//---------------------------------------------------------------------------
scwin.lfn_hwangup = function(obj) { //완료

    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    if (!CalcPremFlag) {
        wprom.alert("보험료 산출을 해주세요");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
        wprom.alert("영업보험료가 0원 입니다.\n예상환급금 조회를 할수 없습니다.");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nApplPrem")) <= 0) {
        wprom.alert("적용보험료가 0원 입니다.\n예상환급금 조회를 할수 없습니다.");
        return false;
    }

	  // 장기보험고도화
	var hwangup = "/ui/cbsc/CBSC131P.xml";  // 해지환급금 조회[B200_Pop]
	
	if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {		// 업무보고서 분류코드-7:연금
		hwangup = "/ui/cbsc/CBSC132P.xml";		 // 지환급금 조회[B201_Pop] 
	}

	var indata = new Object();
	indata.sPsnGroupFlgcd = Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd");
		
	var pObj = {  // 수정(추가) 2017.10.31, by 진태만 
			"Ds_LTIDA00" : Ds_LTIDA00 		// 보험 기본사항 정보 Ds Set	 
			, "Ds_Pibo" : Ds_Pibo 							// 피보험자 정보 Ds Set 
			, "Ds_Trty" : Ds_Trty  							// 계약자 특약사항 Ds Set 
		} 	// 자식으로 보낼 부모 Ds OBJECT 리스트
				   
	var popInfo = {"width":843,
				   "height":611,
				   "indata":indata,
				   "parentObject"    : pObj,	 	// 자식으로 보낼 부모 Ds OBJECT 리스트 // 수정(추가) 2017.10.31, by 진태만 
				   "callback"  : "",
				   "title"     : "해지환급금 조회"
				  };
	wprom.popupOpen(hwangup, popInfo);	//해지환급금 조회	   
	

	/*
	var indata = new Object();
	indata.sPsnGroupFlgcd = Ds_LTIDA00.getCellData(0, "sPsnGroupFlgcd");
	var popInfo = {"width":900,
				   "height":700,
				   "indata":indata,
				   "callback"  : scwin.popupCallback,
				   "title"     : "해지환급금 조회"
				  };
	return wprom.popupOpen("/ui/cbsc/CBSC131P.xml", popInfo);//해지환급금 조회

    // 장기보험고도화
    // var result = Dialog("ssr_sst::B200_Pop.xml",  800, 550, "TaskBar=true Resize=true");
    // 장기보험고도화
    var hwangup = "ssr_sst::B200_Pop.xml";
    if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") == "7") {
        // 업무보고서분류코드-7:연금
        hwangup = "ssr_sst::B201_Pop.xml";
    }
    promise = promise.then(function(rtnVal) {
        return wprom.promise.popupOpen(hwangup, 800, 550, "TaskBar=true Resize=true");
    });
    return promise;
    */
};


/*-----------------------------------
// function 명 : fn_printInfo
// 내용        : 안내문발송
-----------------------------------*/
scwin.fn_printInfo = function(obj) { //완료

    var promise = Promise.resolve();
    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    if (scwin.lfn_checkPrint()) {
        //해약환급금처리
        parent.scwin.lfn_RtnAmt();
        var sArg = "";
        var sPlanNo = parent.medt_PlanNo.getValue();
        var sPsnGroupFlgcd;
        if (chk_sPsnGroupFlgcd.getValue() == true) {
            sPsnGroupFlgcd = "20";
        } else {
            sPsnGroupFlgcd = "10";
        }
        
        var indata = new Object();
        indata.sPlanNo = sPlanNo;
        indata.sPsnGroupFlgcd = sPsnGroupFlgcd;//개인단체구분코드
        indata.sGdCd = parent.edt_sGdCd.getValue();
        indata.sGdCdNm = parent.edt_sGdCdNm.getValue();
        indata.sPlanProgRankCd = Ds_LTIDA00.getCellData(0, "sPlanProgRankCd");
        indata.tab = 1;
	        
        if (parent.sSimpleYn != "Y") {
            if (Ds_LTIDA00.getCellData(0, "sScanObjtYn") == "Y") {
            	promise = promise.then(function(rtnVal) {
        			var pObj = { 
							  "Ds_Pibo" : Ds_Pibo  
							, "DsWs_PrdAttr" : DsWs_PrdAttr
							, "DsWs_LTIDA00" :  parent.DsWs_LTIDA00
							, "Ds_LTIDA00"   :  Ds_LTIDA00
					}
			    	var popInfo = {"width":1208,
		    	                   "height":630,
		    	                   "indata":indata,
		    	                   "parentObject"    : pObj,
		    	                   "callback"  : "",
								   "title"     : "안내문발송"
		    	                  };
		    	    return wprom.popupOpen("/ui/cbsc/CBSC103M.xml", popInfo);
			    });
			    promise = promise.then(function(rv) {
					/*wprom.popupOpen(가이드참조)*/
                    if (!mfn_IsEmpty(rv)) {
                    	/*
                        DsWs_LTIDA00.setCellData(0, "sSrdoIssuDate", rv);
                        parent.DS_LTIDA00.setCellData(0, "sSrdoIssuDate", rv);
                        */
                    }


                    //청약서발행건은 재산출 / 수정 금지
                    if (Ds_LTIDA00.getCellData(0, "sScanObjtYn") == "Y" && wconv.length(parent.Ds_LTIDA00.getCellData(0, "sSrdoIssuDate")) > 0) {
                        parent.scwin.lfn_ComponentEnable(parent.Tab_Step1, "", false); //parent.lfn_ComponentEnable(Tab_Req_Step2, "", false);
                        // 장기보험고도화 - 연금상품 div 비활성화
                        parent.Tab_Step1.cmb_AnntOpnAgeCd.Enable = false; // 연금개시나이
                        parent.Tab_Step1.cmb_AnntPymTermCd.Enable = false; // 연금지급기간
                        parent.Tab_Step1.cmb_AnntPymTypeCd.Enable = false; // 연금지급형태
                        parent.Tab_Step1.cmb_AnntPymCyclCd.Enable = false; // 연금지급주기
                    }
				});
            }
            
        } else {
            if (Ds_LTIDA00.getCellData(0, "sScanObjtYn") == "Y") {
            
            	var sInrpsName = Ds_Pibo.getCellData(0, "sInrpsName");
                indata.sPlanNo = sPlanNo;
                indata.sInrpsName = sInrpsName;
                indata.sSimpleYn = parent.sSimpleYn;
                promise = promise.then(function(rtnVal) {
			    	var popInfo = {"width":690,
		    	                   "height":255,
		    	                   "indata":indata,
		    	                   "callback"  : "",
								   "title"     : "증명서신청"
		    	                  };
		    	    return wprom.popupOpen("/ui/cbsc/CBSC102P.xml", popInfo);
			    });
    
            } else {
            
            	var sInrpsName = Ds_Pibo.getCellData(0, "sInrpsName");
                indata.sPlanNo = sPlanNo;
                indata.sInrpsName = sInrpsName;
                promise = promise.then(function(rtnVal) {
			    	var popInfo = {"width":690,
		    	                   "height":255,
		    	                   "indata":indata,
		    	                   "callback"  : "",
								   "title"     : "증명서출력"
		    	                  };
		    	    return wprom.popupOpen("/ui/cbsc/CBSC104P.xml", popInfo);
			    });

         	}   
        }
    }
    return promise;
};

//---------------------------------------------------------------------------
// function 명 : lfn_checkPrint
// 내용        : 인쇄시 check사항
//---------------------------------------------------------------------------
scwin.lfn_checkPrint = function(PrintGubun) { //완료
    if (wconv.findRow(Ds_LTIDA15, "sJugmGradCd", "P") >= 0) {
        wprom.alert("인수금지 대상입니다. 인수제한사유를 확인하세요\n" + PrintGubun + "발송을 할수 없습니다.");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
        wprom.alert("영업보험료가 0원 입니다.\n" + PrintGubun + "발송을 할수 없습니다.");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nApplPrem")) <= 0) {
        wprom.alert("적용보험료가 0원 입니다.\n" + PrintGubun + "발송을 할수 없습니다.");
        return false;
    }
    return true;
};


/*-----------------------------------
// function 명 : btn_Copy_OnClick
// 내용        : 복사버튼 클릭시 데이타복사
-----------------------------------*/
scwin.btn_Copy_OnClick_Async = function(obj) { //완료
	util.eventAsyncCall(this, scwin.btn_Copy_OnClick, arguments);
}

scwin.btn_Copy_OnClick = function(obj) { //완료

    if (util.getGdsValue("gDoer") == "A000271" && parent.sToday >= "20161001" && parent.sToday <= "20161010") {
        wprom.alert("2016.10.10까지 처리불가합니다.");
        return;
    }

    //가입설계 동의 유효기간이 지난것은 안되도록 처리(20120801)
    var sInrpsNameEtc = "";
    for (var j = 0; j < Ds_Pibo.getRowCount(); j++) {
        if (scwin.lfn_getCUSAA42Info(Ds_Pibo.getCellData(j, "sInrpsCd")) == "Y") {
            sInrpsNameEtc = sInrpsNameEtc + Ds_Pibo.getCellData(j, "sInrpsName") + ",";
        }
    }
    if (wconv.length(sInrpsNameEtc) > 0) {
    	if (wconv.substr(Ds_Pibo.getCellData(0, "sInrpsCd"), 7, 6) != "000000") {
			sInrpsNameEtc = wconv.mid(sInrpsNameEtc, 0, wconv.length(sInrpsNameEtc) - 1);
			wprom.alert(sInrpsNameEtc + "님의 가입설계를 위한 동의 유효기간(3개월)이 만료되었습니다.\n재동의를 수행하시기 바랍니다.");
			return false;
		}
    }
    var sStdDate = "20110805"; //질의서 B230_Div3_Pop 기준일
    if (util.getGdsValue("gProdYN") == "N") {
        sStdDate = "20110804";
    }

    //가입가능상품 check
    if (scwin.lfn_GoodsSearch() == false) {
        wprom.alert("복사가 불가능한 청약번호입니다.");
        return false;
    }

    //가입가능상품 check
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        if (Ds_Pibo.getCellData(i, "nInrpsAge") != gfn_getInsAge(Ds_Pibo.getCellData(i, "sInrpsCd"), parent.sToday)) {
            wprom.alert("복사가 불가능한 청약번호입니다..");
            return false;
        }
        /*
        if (Ds_Pibo.getCellData(i, "sDrveFlagCd") == "2") {
            wprom.alert("영업용운전자는 가입금지입니다");
            return false;
        }
        */
    }
    if (Ds_LTIDA00.getCellData(0, "sSsrtDate") < sStdDate) {
        wprom.alert("복사가 불가능한 청약번호입니다...");
        return false;
    }



    //과거 청약번호를 보관한다.(질의서, 전산심사테이블 복사를위해)
    oldPlanNo = parent.medt_PlanNo.getValue();
    oldSsrtDate = cal_sSsrtDate.getValue();
    parent.medt_PlanNo.setValue("");
    cal_sSsrtDate.setValue(parent.sToday);
    cal_sInsurStrtdate.setValue(parent.sToday);
    //cal_sInsurEndDate.Value = lfn_endDate(cal_sInsurStrtdate.Value, Ds_Trty.GetColumn(0, "sInsurTermCd"), Ds_Pibo.GetColumn(0,"nInrpsAge"));	// 장기보험고도화
    var exArr = wconv.split(cmb_InsurTermPaymTerm.getValue(), "/", true);
    var sInsurTermCd = exArr[0];
    var sPaymTermCd = exArr[1];
    
    cal_sInsurEndDate.setValue(scwin.lfn_endDate(cal_sInsurStrtdate.getValue(), sInsurTermCd, util.getCellDataF(Ds_Pibo, 0, "nInrpsAge")));
    
    for (var i = 0; i < Ds_Pibo.getRowCount(); i++) {
        Ds_Pibo_BackUp.setCellData(i, "MediFlag", "N");
        Ds_Pibo_BackUp.setCellData(i, "fixFlag", "N");
        Ds_Pibo.setCellData(i, "sPsnInfoOferAgreYn", ""); //개인정보제공동의여부
        Ds_Pibo.setCellData(i, "sMNumCrInsAgreYn", ""); //다수계약가입동의여부
    }

    //세금우대 미가입
    Ds_LTIDA00.setCellData(0, "sTaxPrfrYn", "N");

    //청약서발행일자
    Ds_LTIDA00.setCellData(0, "sSrdoIssuDate", "");

    //수익자 약정과 / 통신수단 해지는 초기화.
    parent.Ds_LTIDA03.setCellData(0, "sInsurPftbpAsmtYn", "");
    Ds_LTIDA00.setCellData(0, "sCmmcMeanCnclAgreYn", "");
    
    if (parent.sSimpleYn != "Y") {
        parent.Tab_Step4.scwin.initDescrFlag();
    }

    //복사시 심의결과코드 지움(2011.05.18 김상운)
    Ds_LTIDA00.setCellData(0, "sConuResltCd", "");

    //복사시 비교계약안내 확인여부 제거
    Ds_LTIDA00.setCellData(0, "sCmprCrNotcSsrt", "");
    Ds_LTIDA00.setCellData(0, "sCmprCrNotcCncl", "");

    //2011.04.25 김상운추가(품의결과 내용 삭제)
    parent.scwin.lfn_clearConuReslt();
    
    scwin.fn_calPrem("copy");
    
    if (parent.sSimpleYn != "Y") {
        //화면항목비활성화처리
        parent.scwin.lfn_ComponentEnable(parent.Tab_Step1, "", true);
        parent.scwin.lfn_ComponentEnable(parent.Tab_Step2, "", true);
        parent.scwin.lfn_ComponentEnable(parent.Tab_Step3, "", true);
        
        cmb_AnntOpnAgeCd.setDisabled(false);  // 연금개시나이
        cmb_AnntPymTermCd.setDisabled(false); // 연금지급기간
        cmb_AnntPymTypeCd.setDisabled(false); // 연금지급형태
        cmb_AnntPymCyclCd.setDisabled(false); // 연금지급주기
    }

    //납이주기별 콤보활성화구분
    scwin.lfn_PaymCyclSet();

    //플랜,납입주기,납만 화면 활성화/비활성화
    scwin.lfn_PlanEnable(wconv.findRow(Ds_Pibo, "sel", "1"));

    //플랜에 따른 영업보험료변경가능여부가 N인경우 영업보험료 비활성화처리
    if (DsWs_Plan.getCellData(cmb_Plan.getSelectedIndex(), "sPremAmtChgYn") == "N") {
        medt_nBussPrem.setDisabled(true);
    } else {
        medt_nBussPrem.setDisabled(false);
    }
};



//---------------------------------------------------------------------------
// function 명 : lfn_Search
// 내용        : 현재판매중인 상품리스트를 조회
//---------------------------------------------------------------------------
scwin.lfn_GoodsSearch = function(obj) { //완료

	wconv.clear(DsWs_Goods);
    var MethodObj = new callService("com.inswave.longterm.prd.rle.task.BCA710Task", "getInsAvaGdList", "", "");
    MethodObj.setUrl("/contract/CBSC075MController.do");
    MethodObj.setId("getInsAvaGdList");
    //	if (sJupiCode){
    MethodObj.setParam("sResno", Ds_Pibo.getCellData(0, "sInrpsCd"));
    MethodObj.setParam("sBunsMetdDocuClsfCd", DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd")); // 업무보고서분규코드
    //	}
    MethodObj.setParam("sUserID", util.getGdsValue("gUserID"));
    MethodObj.setParam("sGdCd", wconv.trim(parent.edt_sGdCd.getValue()));

    //MethodObj.setParam("sGdNm", trim(edt_.Text));
    if (chk_sPsnGroupFlgcd.getValue() == true) {
        MethodObj.setParam("sPsnGroupFlag", "20");
    }

	MethodObj.setXPath("//*/vector/data/multi");
	MethodObj.addXPath("//WARNING");
	MethodObj.setXPathDs();
	MethodObj.sync();
	MethodObj.send();

	util.jSonDsCreate(_tranSync.getDsJson("//WARNING"), "DsWs_Warning");

    if (DsWs_Warning.getRowCount() > 0) {
		wprom.alert(DsWs_Warning.getCellData(0, "msg"));
    	return false;
    }

    util.jSonDsCreate(_tranSync.getDsJson("//*/vector/data/multi"), "DsWs_Goods", "Y");

    if (DsWs_Goods.getRowCount() == 0) {
        //		alert("가입가능한 상품이 없습니다.");
        return false;
    } else {
        return true;
    }
};


//---------------------------------------------------------------------------
// function 명 : lfn_Btn_goChung_OnClick
// 내용        : 청약화면으로 이동
//---------------------------------------------------------------------------
scwin.lfn_Btn_goChung_OnClick_Async = function(obj) { //완료
	util.eventAsyncCall(this, scwin.lfn_Btn_goChung_OnClick, arguments);
}

scwin.lfn_Btn_goChung_OnClick = function(obj) { //완료

    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    parent.scwin.lfn_goChung(obj);
};

/*-----------------------------------
// function 명 : lfn_calSave_onClick
// 내용        : 영업보험료 입력후 클릭시 보험료를 계산 저장한다.
-----------------------------------*/
scwin.lfn_calSave_onClick_Async = function(obj) { //완료
	util.eventAsyncCall(this, scwin.lfn_calSave_onClick, arguments);
}

scwin.lfn_calSave_onClick = function(obj) { //완료
    // 연금저축가능여부(연금저축한도체크여부) 초기화 - 장기보험고도화
    sAnntSvAvaYn = false;
    except = "allPrem";

    //	장기보험고도화 - 최소보험료산출전에 0일때 체크
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMinPrem")) <= 0 && wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
        wprom.alert("영업보험료가 입력되지 않았습니다.");
        medt_nBussPrem.focus();
        return false;
    }

    //if(substr(toString(medt_nBussPrem.Value), Length(medt_nBussPrem.Value)-1, 1) != "0"){
    //	alert("영업보험료의 단위는 10원입니다.");
    //	return false;
    //}
    //피보험자나 특약정보가 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level3")) {
        //	if(Tab_Req.Tab_Step1.lfn_ValidationCheck("all")){
        return false;
    }

    //납입주기변경체크
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sPaymCyclCd");

    // 보기/납기 변경 체크
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sInsurTermCd"); // 보험기간
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sPaymTermCd"); // 납입기간
    // 연금정보 변경 체크
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sAnntOpnAgeCd"); // 연금개시나이
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sAnntPymTermCd"); // 연금지급기간
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sAnntPymTypeCd"); // 연금지급형태
    scwin.lfn_CompChangeCheck(Ds_LTIDA00, 0, "sAnntPymCyclCd"); // 연금지급주기
    //최소영업보험료 체크
    if (scwin.lfn_checkMinPremAmt() == false) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }


    // 간편산출에서 계산할수 없도록 처리(청약진행중인건)
    if (parent.sSimpleYn == "Y" && wconv.length(parent.medt_PlanNo.getValue()) > 0) {
        parent.scwin.lfn_ProgRankCd();
        if (wconv.length(parent.sSimpleProg) > 0) {
            wprom.alert("청약진행중인 가입설계입니다 \n간편산출을 할수 없습니다.");
            return;
        }
    }
    var nGrntPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nGrntPrem")); //보장보험료
    var nAccuPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nAccuPrem")); //적립보험료
    //var nBussPrem = ToNumber(Ds_LTIDA00.GetColumn(0, "nBussPrem"));//영업보험료
    var nBussPrem = wconv.toNumber(medt_nBussPrem.getValue()); //영업보험료
    var nDcPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nDcPrem")); //할인보험료
    var nApplPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nApplPrem")); //적용보험료
    var nMinPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMinPrem")); //최소보험료
    var nMaxPrem = wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMaxPrem")); //최대보험료
    var nGroupDcrt = wconv.toNumber(Ds_LTIEA10.getCellData(0, "nGroupDcrt")) / 100; //단체할인율
    //trace(nBussPrem+"==="+nMinPrem+"==="+nMaxPrem+"==="+Ds_LTIDA00.GetColumn(0, "nBussPrem")+"==="+medt_nBussPrem.Value);
    //trace("Ds_LTIDA00=="+Ds_LTIDA00.SaveXML());
    //입력된 영업보험료가 최대/최소값 사이인지 체크
    if (!util.isNull(util.nvl(nBussPrem,"") + "") && nBussPrem >= nMinPrem && nBussPrem <= nMaxPrem) {} else {
        wprom.alert("영업보험료는 최소/최대보험료 사이값으로 입력해야 합니다.");
        medt_nBussPrem.focus();
        return false;
    }


    wconv.clear(DsWs_LTIDA00);

    var MethodObj = new callService("com.inswave.longterm.ssr.pln.task.DBB340Task", "updateCalcPrem");
    MethodObj.setUrl("/contract/CBSC075MController.do");
    MethodObj.setId("updateCalcPrem");
    //계약기본사항을 담는다
    MethodObj.addSingleData("LTIDA00", "LTIDA00", "Ds_LTIDA00"); // 계약기본사항정보
    //피보험자
    MethodObj.addVectorData("vLTIDA01", "LTIDA01", "Ds_Pibo"); //피보험자정보
    //trace("Ds_Trty=="+Ds_Trty.SaveXML());
    
    //보장적립구분코드가 0일경우 주계약에 적립보험료 넣음
    if (Ds_Trty.getTotalRow() > 0) {
        wconv.clear(Ds_Trty_Tmp);
        for (var i = 0; i < Ds_Trty.getTotalRow(); i++) {
            if (util.getCellDataF(Ds_Trty, i, "chk") == "1") {
                util.appendRow(Ds_Trty_Tmp);
                for (var j = 0; j < Ds_Trty.getColCnt(); j++) {
                    Ds_Trty_Tmp.setCellData((Ds_Trty_Tmp.getRowCount() - 1), Ds_Trty.getColumnID(j), util.getCellDataF(Ds_Trty, i, Ds_Trty.getColumnID(j)));
                }
            }
        }
    }
    
    
    //trace("Ds_Trty_Tmp=="+Ds_Trty_Tmp.SaveXML());
    MethodObj.addVectorData("vLTIDA02", "LTIDA02", "Ds_Trty_Tmp"); //특약사항정보담음

	MethodObj.setHashTable();
    
	MethodObj.setXPath("//hashtable/data[@hashkey='LTIDA00']/LTIDA00");
	MethodObj.addXPath("//WARNING");
	MethodObj.setXPathDs();
	MethodObj.sync();
	MethodObj.send();

	util.jSonDsCreate(_tranSync.getDsJson("//WARNING"), "DsWs_Warning");

    if (DsWs_Warning.getRowCount() > 0) {
		wprom.alert(DsWs_Warning.getCellData(0, "msg"));
    	return;
    }

    util.jSonDsCreate(_tranSync.getDsJson("//hashtable/data[@hashkey='LTIDA00']/LTIDA00"), "DsWs_LTIDA00", "Y");

	//계약기본정보의 보험료를 세팅(변경된 환급금/율때문에 세팅)
    //wconv.copy(Ds_LTIDA00, "DsWs_LTIDA00");
    util.jSonDsCreate(DsWs_LTIDA00.getAllJSON(), "Ds_LTIDA00", "Y");
	wprom.alert("보험료 계산이 처리되었습니다");

	except = "";
};


/*-----------------------------------
// function 명 : lfn_checkMinPremAmt
// 내용        : 최소영업보험료 체크
-----------------------------------*/
scwin.lfn_checkMinPremAmt = function() {
    /*
    sPaymCyclCd
    월납:12
    2월:06
    3월:04
    6월:02
    연납:01
    일시납:99
	
    nMinPremAmt1 : 월납
    nMinPremAmt2 : 2월납
    nMinPremAmt3 : 3월납
    nMinPremAmt4 : 6월납
    nMinPremAmt5 : 연납
    nMinPremAmt6 : 일시납
    */
    var nPlanRow = wconv.findRow(DsWs_Plan, "sPlanCd", cmb_Plan.getValue());
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "12") {
        var nMinPremAmt1 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt1"));
        if (nMinPremAmt1 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt1, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "06") {
        var nMinPremAmt2 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt2"));
        if (nMinPremAmt2 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt2, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "04") {
        var nMinPremAmt3 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt3"));
        if (nMinPremAmt3 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt3, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "02") {
        var nMinPremAmt4 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt4"));
        if (nMinPremAmt4 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt4, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "01") {
        var nMinPremAmt5 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt5"));
        if (nMinPremAmt5 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt5, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    if (Ds_LTIDA00.getCellData(0, "sPaymCyclCd") == "99") {
        var nMinPremAmt6 = wconv.toNumber(DsWs_Plan.getCellData(nPlanRow, "nMinPremAmt6"));
        if (nMinPremAmt6 > wconv.toNumber(medt_nBussPrem.getValue())) {
            wprom.alert("영업보험료 " + wconv.numFormat(nMinPremAmt6, 0) + "원 이상으로 입력바랍니다.");
            return false;
        }
    }
    return true;
};

//---------------------------------------------------------------------------
// function 명 : btn_AnntPymAmt_OnClick
// 내용        : 연금지급금액 버튼클릭시 처리
//---------------------------------------------------------------------------
scwin.btn_AnntPymAmt_OnClick = function(obj) { //완료

    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }
    if (!CalcPremFlag) {
        wprom.alert("보험료 산출을 해주세요");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
        wprom.alert("영업보험료가 0원 입니다.\n연금지급금액을 조회를 할수 없습니다.");
        return false;
    }
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nApplPrem")) <= 0) {
        wprom.alert("적용보험료가 0원 입니다.\n연금지급금액을 조회를 할수 없습니다.");
        return false;
    }
    

	var indata = new Object();
    indata.sPlanNo = Ds_LTIDA00.getCellData(0, "sPlanNo");
   
  	var popInfo = {"width":763,
 	                   "height":577,
 	                   "indata":indata,
 	                   "callback"  : "",
			   			"title"     : "연금지급금액"
 	                  };
	wprom.popupOpen("/ui/cbsc/CBSC074P.xml", popInfo);
	
    /*
    var arg = "sPlanNo=" + wconv.quote(Ds_LTIDA00.getCellData(0, "sPlanNo"));
    promise = promise.then(function(rtnVal) {
        // 청약번호
        return wprom.promise.popupOpen("PROJECT_PATH_TEMP/pay_pin/CBSC074P.xml", arg, 800, 550);
    });
    return promise;
    */
};

//---------------------------------------------------------------------------
// function 명 : btn_AnntSvLimit_OnClick
// 내용        : 연금저축 한도 조회 화면 연동
//---------------------------------------------------------------------------
scwin.btn_AnntSvLimit_OnClick = function(obj) { //완료
    // 장기보험고도화 연금저축 세팅 추가
    if (DsWs_PrdAttr.getCellData(0, "BunsMetdDocuClsfCd") != "7") {
        // 업무보고서분류코드-7:연금
        wprom.alert("연금저축상품만 한도 조회가 가능합니다.");
        return;
    }

    //myplatform 접속 환경 구분
    var sConnectFlag = ((util.getGdsValue("gFaceSalesYN") == "Y") ? util.getGdsValue("gFaceSalesYN") : "N");
    if (sConnectFlag == "Y") {

    	var oDsJson=[{
			 "sCrtorCd"       : Ds_Pibo.getCellData(0, "sInrpsCd") // 계약자코드(주민번호)
			,"sTaxPrfrFlag"   : "6" // 1-세금우대, 2-비과세, 6-연금저축
		}];
		gds.gDs_LinkArg.setJSON(oDsJson);

        gfn_OpenLinkPage("CBSC068M"); // G430-세금우대한도조회
    } else {
        // if (gUserIP != "10.1.6.67") {
        // gDs_LinkArg.clearData();
        // gDs_LinkArg.InsertRow(0);
        // gDs_LinkArg.AddColumn("nCrtorCd");
        // gDs_LinkArg.AddColumn("nSvKind");
        // gDs_LinkArg.setColumn(0, "nCrtorCd", Ds_Pibo.GetColumn(0, "sInrpsCd"));
        // gDs_LinkArg.setColumn(0, "nSvKind", "36"); 
        // var Rst = Dialog("pay_ptm::G440_Pop.xml", gDs_LinkArg, 780, 580);	// G440_Pop-세금우대전금융기관 가입내역 조회
        // } else {
        // alert("gUserIP ===> " + gUserIP);
        // G430-세금우대한도조회 메인화면 오픈
        //util.UserNotify(1, Ds_Pibo.getCellData(0, "sInrpsCd") + "&sTaxPrfrFlag=6"); //}
    }
};

//---------------------------------------------------------------------------
// function 명 : lfn_AnntSvLimitCheck
// 내용        : 연금저축 한도 체크
//---------------------------------------------------------------------------
// function lfn_AnntSvLimitCheck()
// {
//trace("##### C010_Div1 > lfn_AnntSvLimitCheck #####");
//// 장기보험고도화 연금저축 세팅 추가
// if (DsWs_PrdAttr.GetColumn(0, "BunsMetdDocuClsfCd") != "7") {	// 업무보고서분류코드-7:연금
// return false;
// }
// DsWs_SendTax.Clear();
// DsWs_SendTaxList.Clear();
// SOBJ_AnntSvLimit.WSDL = gWsdlBasis;
// var MethodObj = gfn_CreateMethodObj(SOBJ_AnntSvLimit, "com.inswave.longterm.pay.ptm.task.GEG440Task", "sendSelectFinaOrgn", "", "");
// gfn_SetParam(MethodObj, "sTermNo",		gUserCenterCode);					// 입력지점	
// gfn_SetParam(MethodObj, "sTrmnUserID",	gUserId);							// 단말기조작자ID
// gfn_SetParam(MethodObj, "sTrmnUserNm",	gUserEmpName);						// 단말기조작자성명
// gfn_SetParam(MethodObj, "nCrtorCd",		Ds_Pibo.GetColumn(0, "sInrpsCd"));	// 계약자코드
// gfn_SetParam(MethodObj, "nSvKind",		"36");								// 조회 저축종류 36-연금저축
// if (length(Ds_Pibo.SetColumn(0, "sInrpsCd")) == 10) {
// gfn_SetParam(MethodObj, "nCrtorCdFlag", 2);	//사업자번호 2
// } else if (length(Ds_Pibo.SetColumn(0, "sInrpsCd")) == 13) {
// gfn_SetParam(MethodObj, "nCrtorCdFlag", 1);	//주빈번호 1
// }
// DsWs_SendTaxList.XPath = "//*/vector/data/TAX0210";
// DsWs_SendTax.XPath = "//*/TAX0021";
// DsWs_Warning.DataObject ="DOBJ_AnntSvLimit";
//// 호출
// gfn_CallService(SOBJ_AnntSvLimit, DOBJ_AnntSvLimit, MethodObj);
// if (length(DsWs_Warning.GetColumn(0,"msg")) > 0) {
// alert(DsWs_Warning.GetColumn(0,"msg"));
// return true;
// }
// var nTaxPrfrLmitAmt		= DsWs_SendTax.GetColumn(0,"nTaxPrfrLmitAmt");		// 한도
// var nTaxPrfrLmitRemnAmt = DsWs_SendTax.GetColumn(0,"nTaxPrfrLmitRemnAmt");	// 한도잔여금액
// var nTaxPrfrInsTamt		= ToNumber(Ds_LTIDA00.GetColumn(0,"sPaymCyclCd")) * ToNumber(Ds_LTIDA00.GetColumn(0,"nAccuPrem"));	//  가입금액(적립보험료)
////trace(replace(gfn_XmlEncoder(DOBJ_AnntSvLimit.Value), "><", ">\n<"));
////trace("##### C010_Div1 > lfn_AnntSvLimitCheck > Ds_Pibo.SetColumn(0, sInrpsCd) ===> " + Ds_Pibo.SetColumn(0, "sInrpsCd"));
////trace("##### C010_Div1 > lfn_AnntSvLimitCheck > nTaxPrfrInsTamt ===> " + nTaxPrfrInsTamt);
//trace("##### C010_Div1 > lfn_AnntSvLimitCheck > nTaxPrfrLmitRemnAmt ===> " + nTaxPrfrLmitRemnAmt);
////trace("##### C010_Div1 > lfn_AnntSvLimitCheck > DsWs_Warning.GetColumn(0, msg) ===> " + DsWs_Warning.GetColumn(0, "msg"));
//// 한도 체크
// if (ToNumber(nTaxPrfrInsTamt) > ToNumber(nTaxPrfrLmitRemnAmt)) {
// alert("연금저축 " + NumFormat(ToNumber(nTaxPrfrLmitAmt) / 10000, 0) + "만원 한도 초과되었습니다.\n(잔여한도 : " + NumFormat(nTaxPrfrLmitRemnAmt,0) + "원)");
////trace("가입금액(nTaxPrfrInsTamt):" + nTaxPrfrInsTamt +  " / 한도잔여(nTaxPrfrLmitRemnAmt):" + nTaxPrfrLmitRemnAmt );
// return true;
// }
//// return 이후 처리 가능하도록
// return false;
// }


/*-----------------------------------
// function 명 : lfn_bosang_OnClick
// 내용        : 보상한도조회
-----------------------------------*/
scwin.lfn_bosang_OnClick = function(obj) { //완료 (미사용)
	
	return util.toDoAlert("lfn_bosang_OnClick (미사용)");

    var promise = Promise.resolve();
    //계약기본사항만 변경되었는지 체크한다.
    if (scwin.lfn_ValidationCheck("level1")) {
        return false;
    }
    if (modifyFlag) {
        wprom.alert("계약사항이 변경되었습니다.\n 보험료산출을 처리해주세요.");
        return false;
    }


    //초기화
    wconv.clear(Ds_BosangTrty);

    //청약일이 입력되어 있어야 한다.
    if (cal_sSsrtDate_Value.length == 0) {
        wprom.alert("청약일을 입력해 주세요");
        cal_sSsrtDate.focus();
        return false;
    }


    //특약데이터가 있는지 체크한다.
    if (Ds_Trty.getRowCount() == 0) {
        wprom.alert("선택할 특약이 없습니다.");
        return false;
    }

    //선택된 특약이 있는지 확인
    var check = false;
    var cnt = 0;
    for (var i = 0; i < Ds_Trty.getRowCount(); i++) {
        if (Ds_Trty.getCellData(i, "chk") == "1") {
            util.insertColumn(Ds_BosangTrty, [[ "sTrtyCd", "sTrtyCd","text" ]]);
            util.insertColumn(Ds_BosangTrty, [["nTrtyInsAmt","nTrtyInsAmt","text"]]);
            util.insertColumn(Ds_BosangTrty, [["sBaseSlctFlagName","sBaseSlctFlagName","text"]]);
            util.appendRow(Ds_BosangTrty);
            Ds_BosangTrty.setCellData(cnt, "sTrtyCd", Ds_Trty.getCellData(i, "sTrtyCd")); //특약번호
            Ds_BosangTrty.setCellData(cnt, "nTrtyInsAmt", Ds_Trty.getCellData(i, "nTrtyInsAmt")); //가입금액
            Ds_BosangTrty.setCellData(cnt, "sBaseSlctFlagName", Ds_Trty.getCellData(i, "BascSlctFlagCd_H")); //특약구분
            cnt++;
            check = true;
        }
    }
    if (!check) {
        wprom.alert("선택된 특약이 없습니다.");
        return false;
    }
    promise = promise.then(function(rtnVal) {
        return wprom.promise.popupOpen("PROJECT_PATH_TEMP/ssr_pln/CBSC055P.xml", "", 800, 550, "TaskBar=true Resize=true"); /*wprom.popupOpen(가이드참조)*/
    });
    return promise;
};




/*-----------------------------------
// function 명 : lfn_ShowWaitImage
// 내용        : 엑셀로드시 로딩처리
-----------------------------------*/
var gv_bShowImage = false;

scwin.lfn_ShowWaitImage = function(bFlag) { //완료 (미사용)
	
	return util.toDoAlert("lfn_ShowWaitImage (미사용)");

    if (gv_bShowImage == false) {
        var strProp = "Height=\"60\" Left=\"0\" Visible=\"False\" Top=\"0\" Width=\"300\"";
        Create("Div", "div_wait", strProp);
        var strContents = "<Contents>\n";
        strContents += "<Shape Bottom=\"90\" Height=\"60\" Id=\"shp_SearchBoder\" Left=\"0\" LineColor=\"INACTIVECAPTION\" LineWidth=\"5\" Right=\"300\" TabOrder=\"101\" RoundHeight=\"0\" RoundUnit=\"Pixel\" RoundWidth=\"0\" Top=\"0\" Type=\"RoundRect\" Width=\"300\"></Shape>\n";
        //strContents += '<Image Height="20" Id="Image0" ImageID="IMAGE::dataProcess.gif" Left="0" Left="23" Top="56" Width="255"></Image>\n';
        strContents += "<Static Align=\"Center\" Font=\"굴림체,9,Bold\" Height=\"13\" Id=\"st_title01\" Left=\"23\" TabOrder=\"102\" Text=\"데이터&#32;처리중\" Top=\"13\" Width=\"255\"></Static>\n";
        strContents += "<Static Align=\"Center\" Font=\"굴림체,9,Bold\" Height=\"13\" Id=\"Static0\" Left=\"23\" TabOrder=\"103\" Text=\"잠시만&#32;기다려&#32;주시기&#32;바랍니다.\" Top=\"29\" Width=\"255\"></Static>\n";
        strContents += "</Contents>\n";
        div_wait.Contents = strContents;
        gv_bShowImage = true;
    }
    if (bFlag) {
        var nLeft = toInteger(((window.width - div_wait.width)) / 2);
        var nTop = toInteger(((window.height - div_wait.height)) / 2) - 5;
        div_wait.left = nLeft;
        div_wait.top = nTop - 100;
        div_wait.Visible = true;
    } else {
        div_wait.Visible = false;
    }
};



//---------------------------------------------------------------------------
// function 명 : fn_setTrty()
// 내용        : 특약사항조회
//---------------------------------------------------------------------------
scwin.fn_setTrty = function() { //완료 (미사용)

	return util.toDoAlert("fn_setTrty (미사용)");

    //특약사항조회
    wconv.clear(DsWs_Trty);
    SOBJ_Trty.WSDL = gds.gWsdlBasis;
    var MethodObj = gfn_CreateMethodObj(SOBJ_Trty, "com.inswave.longterm.ssr.pln.task.DBB022Task", "getTrty", "", "");
    gfn_SetParam(MethodObj, "sFlagCd", "2");
    gfn_SetParam(MethodObj, "sGdcd", sGdCd);
    gfn_SetParam(MethodObj, "sPlanCd", sPlanCd);
    gfn_SetParam(MethodObj, "sStndDate", parent.sToday);
    gfn_SetParam(MethodObj, "sResno", Ds_Pibo.getCellData(wconv.findRow(Ds_Pibo, "sel", "1"), "sInrpsCd"));

    //trace("sGdcd:" + sGdcd);
    //trace("sPlanCd:" + sPlanCd);
    //trace("sStndDate:" + sStndDate);
    //trace("sResno:" + Ds_Pibo.GetColumn(Ds_Pibo.FindRow("sel","1"), "sInrpsCd"));
    var result = gfn_CallService(SOBJ_Trty, DOBJ_Trty, MethodObj);
    if (result == false) {
        wprom.alert(DsWs_Warning.getCellData(0, "msg"));
        return;
    }
    if (DsWs_Trty.getRowCount() == 0) {
        wprom.alert("특약사항 조회건이 없습니다.");
    } else {
        //  //trace("\n----------특약사항--------------------------------------------");
        wconv.copy(Ds_Trty, "DsWs_Trty"); //  //trace(DsWs_Trty.SaveXML());
        //  //trace("\n----------보험기간--------------------------------------------");
        //  //trace(DsWs_PaymTerm.SaveXML());
    }
};

//---------------------------------------------------------------------------
// function 명 : Btn_IVR_OnClick
// 내용        :  IVR 3자 통화를 위한 버튼 이벤트 발생
// param 
// 1: (J : 주민등록번호, C : 카드번호, A : 계좌번호)
// 2: lfn_IVR_CallBack (콜백 함수명)
// 3 : ""  (콜백 받는 변수명 1)
// 4 : nRow (콜백 받는 변수명 2)
//---------------------------------------------------------------------------

scwin.Btn_IVR_OnClick = function(obj, nRow) { //완료 (미사용)

	return util.toDoAlert("Btn_IVR_OnClick (미사용)");

    ivrOpenPop("J", "", "lfn_IVR_CallBack", "", nRow); // IVR 3자 통화 팝업 호출  (J : 주민등록번호, C : 카드번호, A : 계좌번호)
    // obj는 결과값을 셋팅할 fieldName				
};

//---------------------------------------------------------------------------
// function 명 : lfn_IVR_CallBack
// 내용        :  IVR 콜백함수
//---------------------------------------------------------------------------
scwin.lfn_IVR_CallBack = function(id, nRow, val) { //완료 (미사용)

	return util.toDoAlert("lfn_IVR_CallBack (미사용)");

    if (wconv.Length(val) > 0) {
        Ds_Pibo.setCellData(nRow, "sInrpsCd", val);
        scwin.Grd_Pibo_OnKillFocus();
        scwin.lfn_Edt_Mask_OnKillFocus(); //나이계산 
        Grd_Pibo.Redraw;
    }
};

// 주기선택후 포커스 이동
//scwin.lfn_OnKillFocus_OnChanged = function(obj, strCode, strText, nOldIndex, nNewIndex) {
scwin.lfn_OnKillFocus_OnChanged = function(e) { //완료
	//console.log("ddddd======" + this.id);
    if (this.id == "cmb_InsurTermPaymTerm") {
        util.focus(btn_CalcPrem);
    } else if (this.id == "cmb_Plan") {
        util.focus(btn_CalcPrem);
    } else if (this.id == "cmb_PaymCycl") {
        //util.focus(edt_insuredPaym);
    }
};

/*-----------------------------------
// function 명 : lfn_BussPremMinus
// 내용        : 영업보험료 - 사용불가처리
-----------------------------------*/
scwin.lfn_BussPremMinus = function(obj, strPreText, strPostText) { //완료 (미사용)
	
	return util.toDoAlert("lfn_BussPremMinus (미사용)");
	
    obj.setValue(replace(strPostText, "-", ""));
};

/*-----------------------------------
// function 명 : lfn_DataChangeCheck
// 내용        : dataset 변경여부 체크
-----------------------------------*/
scwin.lfn_DataChangeCheck = function(obj, newObj, chk) { //완료 (미사용)

	return util.toDoAlert("lfn_DataChangeCheck (미사용)");

    newObj.ClearData();
    obj.AddColumn("execFlag");
    newObj.AddColumn("execFlag");
    var execFlag = "";
    var cnt = 0;
    var changeFlag = false;
    if (chk.length() == 0)
        chk = "chk";

    //trace("obj.ID:"+obj.ID);
    //trace("chk:"+chk);
    //체크박스에 체크된것만 담음	
    if ((obj.ID == "Ds_Pibo" && chk == "sel") || (obj.ID == "Ds_Trty" && chk == "chk")) {
        for (var i = 0; i < obj.GetCountNF(); i++) {
            //trace(i+"==="+obj.GetColumn(i, chk));
            if (obj.GetColumnNF(i, chk) == "1") {
                if (chk == "chk") {
                    if (obj.GetRowTypeNF(i) == "insert") {
                        obj.SetColumnNF(i, "execFlag", "I");
                    } else if (obj.GetRowTypeNF(i) == "update") {
                        obj.SetColumnNF(i, "execFlag", "U");
                    }
                } else {
                    obj.SetColumnNF(i, "execFlag", "I");
                }


                //trace("InsertRow:"+chk);
                newObj.InsertRow(cnt);
                if (obj.ID != "Ds_Trty") {
                    newObj.CopyRow(cnt++, obj, i);
                } else {
                    for (var j = 0; j < obj.GetColCount(); j++) {
                        newObj.SetColumn(cnt, obj.GetColID(j), obj.GetColumnNF(i, obj.GetColID(j)));
                    }
                    cnt++;
                }
            }
        }
    } else {
        //그리드에서 insert,update구분
        for (var i = 0; i < obj.getRowCount(); i++) {
            //trace(i+"==GetRowType=="+obj.GetRowType(i));
            execFlag = "";
            if (obj.GetRowType(i) == "insert") {
                execFlag = "I";
            } else if (obj.GetRowType(i) == "update") {
                execFlag = "U";
            }
            if (execFlag != "") {
                obj.SetColumn(i, "execFlag", execFlag);
                newObj.InsertRow(cnt);
                newObj.CopyRow(cnt++, obj, i); //trace("newObj입력=="+newObj.savexml());			
            }
        }




        //그리드에서 delete 구분
        for (var i = 0; i < obj.GetDelRowCount(); i++) {
            //trace(obj.GetRowType(i)+"=="+i+"="+obj.GetTotalRowType(i)+"==cnt="+cnt);
            newObj.InsertRow(cnt);
            for (var j = 0; j < obj.GetColCount(); j++) {
                if (obj.GetColID(j) == "execFlag") {
                    newObj.SetColumn(cnt, obj.GetColID(j), "D");
                } else {
                    newObj.SetColumn(cnt, obj.GetColID(j), obj.GetDelColumn(i, obj.GetColID(j)));
                }
            }
            cnt++;
        }
    }
    if (newObj.GetColCount() > 0) {
        changeFlag = true;
    }


    //trace("obj=="+obj.savexml());
    //trace("newObj=="+newObj.savexml());
    return changeFlag;
};

/*-----------------------------------
// function 명 : lfn_next
// 내용        : 다음버튼
-----------------------------------*/
scwin.lfn_next_Async = function(obj) { //완료
	util.eventAsyncCall(this, scwin.lfn_next, arguments);
}

scwin.lfn_next = function(obj) { //완료
    // 장기보험고도화 - 최소보험료산출전에 0일때 체크
    if (wconv.toNumber(Ds_LTIDA00.getCellData(0, "nMinPrem")) <= 0 && wconv.toNumber(Ds_LTIDA00.getCellData(0, "nBussPrem")) <= 0) {
        wprom.alert("영업보험료가 입력되지 않았습니다.");
        medt_nBussPrem.focus();
        return;
    }

    // 탭버튼 클릭시나 다음버튼 클릭시 처리
    var flag = parent.scwin.lfn_TabChanging(0, 1);
    if (flag) {
        // 연금저축한도 체크 - 장기보험고도화
        /*		if (lfn_AnntSvLimitCheck() {
        		   return;
        		}	*/
        /*		if (parent.lfn_AnntSvLimitCheck(parent.Tab_Req.TabIndex, "")) {
        			return;
        		}	*/
       	/*
        parent.Tab_Req.OnChanging = "";
        parent.Tab_Req.TabIndex = 1;
        parent.Tab_Req.OnChanging = "lfn_TabChanging";
        */
        parent.scwin.lfn_TabClickSelect(1, false);
    }
};

//---------------------------------------------------------------------------
// function 명 : 신규
// 내용        : 영업보험료 포커스 아웃 확인 Null일경우 0 입력
//---------------------------------------------------------------------------
scwin.medt_nBussPrem_onfocus = function(e) {
	if(medt_nBussPrem.getValue() == "0"){
		medt_nBussPrem.setValue("");
	}
};

//---------------------------------------------------------------------------
// function 명 : 신규
// 내용        : 영업보험료 포커스 확인 0인경우 Null 입력
//---------------------------------------------------------------------------	
scwin.medt_nBussPrem_onblur = function(e) {
	if(wconv.length(wconv.trim(medt_nBussPrem.getValue())) == 0){
		if(wconv.length(wconv.trim(parent.edt_sGdCd.getValue())) > 0){
			medt_nBussPrem.setValue("0");
		}
	}
};

]]></script>
	</head>
	<body>

<xf:group id="Div_01" style="" class="section">
	<xf:group id="" style="" class="w2tb tb" tagname="table">
		<w2:attributes>
			<w2:summary></w2:summary>
		</w2:attributes>
		<xf:group tagname="colgroup">
			<xf:group style="width:90.00px;" tagname="col"></xf:group>
			<xf:group style="width:180.00px;" tagname="col"></xf:group>
			<xf:group style="width:90.00px;" tagname="col"></xf:group>
			<xf:group style="width:80.00px;" tagname="col"></xf:group>
			<xf:group style="width:90.00px;" tagname="col"></xf:group>
			<xf:group style="width:140.00px;" tagname="col"></xf:group>
			<xf:group style="width:90.00px;" tagname="col"></xf:group>
			<xf:group style="" tagname="col"></xf:group>
		</xf:group>
		<xf:group style="" tagname="tr">
			<xf:group style="" class="w2tb_th" tagname="th">보험기간</xf:group>
			<xf:group style="padding-right:0px;" class="w2tb_td" tagname="td">
				<xf:group class="" style="">
					<xf:input id="cal_sInsurStrtdate" style="width:75px;" readOnly="true" ref="data:Ds_LTIDA00.sInsurStrtdate" displayFormat="####-##-##"/>
					<w2:textbox class="txt_bw" id="" label="~" tagname="span"></w2:textbox>
					<xf:input id="cal_sInsurEndDate" style="width:75px;" readOnly="true" ref="data:Ds_LTIDA00.sInsurEndDate" displayFormat="####-##-##"/>
				</xf:group>
			</xf:group>
			<xf:group class="w2tb_th" tagname="th">납입주기</xf:group>
			<xf:group class="w2tb_td" tagname="td">
				<!-- group:s -->
				<!-- group:e -->
				<xf:select1 allOption="" appearance="minimal"
					chooseOption="" direction="auto" disabled="" disabledClass=""
					displayMode="label" ev:onviewchange="" id="cmb_PaymCycl"
					optionOrder="" ref="data:Ds_LTIDA00.sPaymCyclCd" style="" submenuSize=""
					renderType="native" selectedData="false" ev:onblur="scwin.lfn_OnKillFocus_OnChanged">
					<xf:choices>
						<xf:itemset nodeset="data:DsWs_PaymCycl">
							<xf:label ref="sPaymCyclName"></xf:label>
							<xf:value ref="sPaymCyclCd"></xf:value>
						</xf:itemset>
					</xf:choices>
				</xf:select1>
			</xf:group>
			<xf:group style="" class="w2tb_th" tagname="th" id="Static29">보기/납기</xf:group>
			<xf:group style="" class="w2tb_td" tagname="td">
				<w2:attributes>
					<w2:colspan>3</w2:colspan>
					<w2:rowspan>1</w2:rowspan>
					<w2:nowrap></w2:nowrap>
				</w2:attributes>
				<xf:group class="" style="width: 100%;overflow: hidden;">
					<xf:select1 allOption="" appearance="minimal"
						chooseOption="" direction="auto" disabled="false" disabledClass=""
						displayMode="label" ev:onviewchange="scwin.lfn_InsurTermPaymTermChanged" id="cmb_InsurTermPaymTerm"
						optionOrder="" ref="data:Ds_LTIDA00.sInsurTermPaymTermName"
						style="width:125px;float: left;" submenuSize="" renderType="native"
						selectedData="false" ev:onblur="scwin.lfn_OnKillFocus_OnChanged">
						<xf:choices>
							<xf:itemset
								nodeset="data:DsWs_InsurTermPaymTerm">
								<xf:label ref="sInsurPaymName"></xf:label>
								<xf:value ref="sInsurPaymCd"></xf:value>
							</xf:itemset>
						</xf:choices>
					</xf:select1>
					<w2:textbox label="갱신종료연령 : 100세" id="Sta_Title1"
						style="width:130px;height:20px;display:none;text-align:center;float: left;"
						tagname="span">
					</w2:textbox>
					<xf:group id="chk_sPsnGroupFlgcd_group">
						<xf:select appearance="full" cols=""
							id="chk_sPsnGroupFlgcd" rows="1" selectedindex="-1"
							style="float: left;" class="ml5" falseValue="0" ev:oncheckboxclick="" ev:onviewchange="scwin.chk_sPsnGroupFlgcd_oncheckboxclick_Async">
							<xf:choices>
								<xf:item>
									<xf:label><![CDATA[단체취급]]></xf:label>
									<xf:value><![CDATA[1]]>
									</xf:value>
								</xf:item>
							</xf:choices>
						</xf:select>
						<w2:anchor class="btn_search ml5" ev:onclick="scwin.btn_GroupList_onclick"
							id="btn_chk_sPsnGroupFlgcd" outerDiv="false" style="float: left;">
							<xf:label><![CDATA[검색]]></xf:label>
						</w2:anchor>
					</xf:group>
				</xf:group>
			</xf:group>
		</xf:group>
		<xf:group tagname="tr" style="">
			<xf:group class="w2tb_th" tagname="th">연금개시나이</xf:group>
			<xf:group class="w2tb_td" tagname="td">
				<xf:select1 allOption="" appearance="minimal"
					chooseOption="" direction="auto" disabled="true" disabledClass=""
					displayMode="label" ev:onviewchange="scwin.div_Annty_cmb_AnntOpnAgeCd_OnChanged" id="cmb_AnntOpnAgeCd"
					optionOrder="" ref="data:Ds_LTIDA00.sAnntOpnAgeCd" style="width:100px" submenuSize=""
					renderType="native" selectedData="false">
					<xf:choices>
						<xf:itemset nodeset="data:DsWs_AnntOpnAgeCd">
							<xf:label ref="sAnntOpnAgeCdName"></xf:label>
							<xf:value ref="sAnntOpnAgeCd"></xf:value>
						</xf:itemset>
					</xf:choices>
				</xf:select1>
			</xf:group>
			<xf:group class="w2tb_th" tagname="th">연금지급기간</xf:group>
			<xf:group class="w2tb_td" tagname="td">
				<xf:select1 allOption="" appearance="minimal"
					chooseOption="" direction="auto" disabled="true" disabledClass=""
					displayMode="label" ev:onviewchange="scwin.div_Annty_cmb_AnntPymTermCd_OnChanged" id="cmb_AnntPymTermCd"
					optionOrder="" ref="data:Ds_LTIDA00.sAnntPymTermCd" style="" submenuSize="" renderType="native"
					selectedData="false">
					<xf:choices>
						<xf:itemset nodeset="data:DsWs_AnntPymTermCd">
							<xf:label ref="sAnntPymTermCdName"></xf:label>
							<xf:value ref="sAnntPymTermCd"></xf:value>
						</xf:itemset>
					</xf:choices>
				</xf:select1>
			</xf:group>
			<xf:group class="w2tb_th" tagname="th">연금지급형태</xf:group>
			<xf:group class="w2tb_td" tagname="td">
				<xf:select1 allOption="" appearance="minimal"
					chooseOption="" direction="auto" disabled="true" disabledClass=""
					displayMode="label" ev:onviewchange="" id="cmb_AnntPymTypeCd"
					optionOrder="" ref="data:Ds_LTIDA00.sAnntPymTypeCd" style="" submenuSize="" renderType="native"
					selectedData="false">
					<xf:choices>
						<xf:itemset nodeset="data:DsWs_AnntPymTypeCd">
							<xf:label ref="sAnntPymTypeCdName"></xf:label>
							<xf:value ref="sAnntPymTypeCd"></xf:value>
						</xf:itemset>
					</xf:choices>
				</xf:select1>
			</xf:group>
			<xf:group class="w2tb_th" tagname="th">연금지급주기</xf:group>
			<xf:group class="w2tb_td" tagname="td" >
				<xf:select1 allOption="" appearance="minimal"
					chooseOption="" direction="auto" disabled="true" disabledClass=""
					displayMode="label" ev:onviewchange="" id="cmb_AnntPymCyclCd"
					optionOrder="" ref="data:Ds_LTIDA00.sAnntPymCyclCd" style="width:80px" submenuSize=""
					renderType="native" selectedData="false">
					<xf:choices>
						<xf:itemset nodeset="data:DsWs_AnntPymCyclCd">
							<xf:label ref="sAnntPymCyclCdName"></xf:label>
							<xf:value ref="sAnntPymCyclCd"></xf:value>
						</xf:itemset>
					</xf:choices>
				</xf:select1>
			</xf:group>
		</xf:group>
	</xf:group>
</xf:group>



<xf:group id="" style="" class="section">
	<xf:group id="Div_02" style="" class="defaultbox">
		<w2:textbox id="" style="" class="df_tt fl" label="피보험자 (계약자와 동일)"></w2:textbox>
		<xf:group id="" style="" class="box_left_line fl">
			<w2:anchor id="btn_SearchCust" class="btn_nml" outerDiv="" ev:onclick="scwin.btn_SearchCust_OnClick">
				<xf:label><![CDATA[대면고객정보]]></xf:label>
			</w2:anchor>
			<w2:anchor id="Btn_LoadFile" class="btn_nml" outerDiv="" ev:onclick="scwin.lfn_Btn_LoadFile_OnClick">
				<xf:label><![CDATA[가져오기]]></xf:label>
			</w2:anchor>
		</xf:group>
		
		<xf:group class="fr" id="" style="">
			<w2:anchor id="btnAddPibo" ev:onclick="scwin.lfn_addRow" class="btn_add" outerDiv="false" style="">
				<xf:label><![CDATA[보상한도]]></xf:label>
			</w2:anchor>
			<w2:anchor id="btnDelPibo" ev:onclick="scwin.lfn_deleteRow" class="btn_del ml3" outerDiv="false" style="">
				<xf:label><![CDATA[보험료계산]]></xf:label>
			</w2:anchor>
		</xf:group>
		
		<xf:group class="fr" id="" style="padding-right:5px;">
			<w2:anchor id="btn_ExptPrem" ev:onclick="scwin.btn_ExptPrem_OnClick" class="btn_nml" outerDiv="">
				<xf:label><![CDATA[예상보험료]]></xf:label>
			</w2:anchor>
		</xf:group>
	</xf:group>

	<xf:group id="grid_Div" style="">
		<w2:attributes>
			<w2:onblur>scwin.lfn_Grid_Blur()</w2:onblur>
			<w2:tabindex>0</w2:tabindex>
		</w2:attributes>
		<w2:gridView ignoreCellClick="false" ev:onrowindexchange=""
			autoFit="allColumn" rowStatusWidth="20" visibleRowNum=""
			class="cm_grid" wheelRows="" ev:onviewchange="scwin.Grd_Pibo_OnKillFocus"
			fixedColumnWithHidden="" dataList="Ds_Pibo" id="Grd_Pibo"
			style="height:48px" scrollByColumn="false" useShiftKey="true"
			rowStatusVisible="" ev:onafteredit="" rowStatusHeaderValue="상태"
			ev:oncellclick="scwin.Grd_PiboLIst_OnCellClick" rowNumVisible=""
			rowNumWidth="10"
			ev:oncellindexchange="scwin.Grd_Pibo_OnCellPosChanged" ev:onkeydown="scwin.Grd_Pibo_KeyDown" ev:onkeyup="" editModeEvent="onclick" ev:oneditkeyup="scwin.Grd_Pibo_OnChar">
			<w2:header id="header1" style="">
				<w2:row id="row2" style="">
					<w2:column id="column1" blockSelect="false"
						style="height:23px;" width="40" inputType="text" value="선택"
						displayMode="label">
					</w2:column>
					<w2:column id="column2" blockSelect="false"
						style="height:23px;" width="90" inputType="text" value="구분"
						displayMode="label">
					</w2:column>
					<w2:column id="column3" blockSelect="false"
						style="height:23px;" width="135" inputType="text" value=" 주민번호"
						displayMode="label" colSpan="3" rowSpan="">
					</w2:column>
					<w2:column id="column4" blockSelect="false"
						style="height:23px;" width="110" inputType="text" value="성명"
						displayMode="label">
					</w2:column>
					<w2:column id="column5" blockSelect="false"
						style="height:23px;" width="70" inputType="text" value="나이"
						displayMode="label">
					</w2:column>
					<w2:column id="column6" blockSelect="false"
						style="height:23px;" width="105" inputType="text" value="주피와관계"
						displayMode="label">
					</w2:column>
					<w2:column id="column7" blockSelect="false"
						style="height:23px;" width="170" inputType="text" value="직업"
						displayMode="label" colSpan="2" rowSpan="">
					</w2:column>
					<w2:column id="column8" blockSelect="false"
						style="height:23px;" width="70" inputType="text" value="급수"
						displayMode="label">
					</w2:column>
					<w2:column id="column9" blockSelect="false"
						style="height:23px;" width="90" inputType="text" value="운전용도"
						displayMode="label">
					</w2:column>
					<w2:column id="column10" blockSelect="false"
						style="height:23px;" width="115" inputType="text" value="보장보험료"
						displayMode="label">
					</w2:column>
				</w2:row>
			</w2:header>
			<w2:gBody id="gBody4" style="">
				<w2:row id="row5" style="">
					<w2:column id="sel" blockSelect="false" style="height:20px;"
						width="40" inputType="text"
						displayMode="label" selectedData="" falseValue="0" trueValue="1"
						readOnly="true" displayFormatter="scwin.lfn_sel_dsp" defaultValue="">
					</w2:column>
					<w2:column id="sInrpsFlagCd" blockSelect="false"
						style="height:20px;" width="90" inputType="select" displayMode="label"
						allOption="" chooseOption="" selectedData="false"
						viewType="icon">
						<w2:choices>
							<w2:itemset nodeset="data:DsWs_FlagCd">
								<w2:label ref="sHnglCdName"></w2:label>
								<w2:value ref="sCd"></w2:value>
							</w2:itemset>
						</w2:choices>
					</w2:column>
					<w2:column id="sInrpsCd" blockSelect="false"
						style="height:20px;" width="135" inputType="text" displayMode="label"
						viewType="icon" imageSrc="" customFormatter="" dataType="text"
						displayFormat="" maxLength="13"
						displayFormatter="scwin.lfn_sInrpsCd_DspMask" value="">
					</w2:column>
					<w2:column blockSelect="false" id="column12"
						style="height:20px;" inputType="text" width="10"
						displayMode="label" readOnly="true">
					</w2:column>
					<w2:column blockSelect="false" id="column14"
						style="height:20px;" inputType="image" width="20"
						displayMode="label"
						imageSrc="/cm/images/contents/ico_btn_input_sch.png"
						readOnly="true">
					</w2:column>
					<w2:column id="sInrpsName" blockSelect="false"
						style="height:20px;" width="110" inputType="" displayMode="label"
						readOnly="true">
					</w2:column>
					<w2:column id="nInrpsAge" blockSelect="false"
						style="height:20px;" width="70" inputType="" displayMode="label"
						readOnly="true">
					</w2:column>
					<w2:column id="sMinsrRelnCd" blockSelect="false"
						style="height:20px;" width="105" inputType="select" displayMode="label"
						viewType="icon" selectedData="false" allOption="" chooseOption=""
						readOnly="true">
						<w2:choices>
							<w2:itemset nodeset="data:DsWs_MinsrReln">
								<w2:label ref="sName"></w2:label>
								<w2:value ref="sCd"></w2:value>
							</w2:itemset>
						</w2:choices>
					</w2:column>
					<w2:column id="sJobName" blockSelect="false"
						style="height:20px;" width="150" inputType="" displayMode="label" imageSrc=""
						viewType="" readOnly="true">
					</w2:column>
					<w2:column blockSelect="false" id="column16"
						style="height:20px;" inputType="image" width="20"
						displayMode="label"
						imageSrc="/cm/images/contents/ico_btn_input_sch.png"
						readOnly="true">
					</w2:column>
					<w2:column id="sJobGradCd" blockSelect="false"
						style="height:20px;" width="70" inputType="select" displayMode="label"
						selectedData="false" viewType="icon" allOption="" chooseOption=""
						readOnly="true">
						<w2:choices>
							<w2:itemset nodeset="data:DsWs_Grade">
								<w2:label ref="sHnglCdName"></w2:label>
								<w2:value ref="sCd"></w2:value>
							</w2:itemset>
						</w2:choices>
					</w2:column>
					<w2:column id="sDrveFlagCd" blockSelect="false"
						style="height:20px;" width="90" inputType="select" displayMode="label"
						selectedData="false" viewType="icon" allOption="" chooseOption=""
						readOnly="true">
						<w2:choices>
							<w2:itemset nodeset="data:DsWs_Drive">
								<w2:label ref="sHnglCdName"></w2:label>
								<w2:value ref="sCd"></w2:value>
							</w2:itemset>
						</w2:choices>
					</w2:column>
					<w2:column id="nGrntPrem" blockSelect="false"
						style="height:20px;" width="115" inputType="text" displayMode="label"
						readOnly="true" textAlign="right">
					</w2:column>
				</w2:row>
			</w2:gBody>
		</w2:gridView>
	</xf:group>
</xf:group>



<xf:group id="" style="" class="layout_7_3">
	<xf:group id="Div_03" style="" class="leftarea" >
		<!-- group:s -->
		<xf:group id="" style="" class="section">
			<xf:group id="" style="" class="defaultbox">
				<w2:textbox id="" style="" class="df_tt fl" label="특약사항"></w2:textbox>
				<xf:group id="" style="" class="fl ml20">
					<xf:select1 allOption="" appearance="minimal"
						chooseOption="" direction="auto" disabled="false" disabledClass=""
						displayMode="label" ev:onviewchange="scwin.lfn_PlanChanged_viewChange" id="cmb_Plan"
						optionOrder="" ref="" style="width:170px;" submenuSize=""
						renderType="native" selectedData="false" ev:onchange="" ev:onblur="scwin.lfn_OnKillFocus_OnChanged">
						<xf:choices>
							<xf:itemset nodeset="data:DsWs_Plan">
								<xf:label ref="sPlanName"></xf:label>
								<xf:value ref="sPlanCd"></xf:value>
							</xf:itemset>
						</xf:choices>
					</xf:select1>
				</xf:group>
				<xf:group id="" style="" class="fr">
					<w2:anchor id="btn_AnntSvLimit" ev:onclick="scwin.btn_AnntSvLimit_OnClick" class="btn_nml" outerDiv="true">
						<xf:label><![CDATA[연금저축한도]]></xf:label>
					</w2:anchor>
					<w2:anchor id="btn_AnntPymAmt" ev:onclick="scwin.btn_AnntPymAmt_OnClick" class="btn_nml" outerDiv="true">
						<xf:label><![CDATA[연금지급금액]]></xf:label>
					</w2:anchor>
					<w2:anchor id="btn_CalcPrem" ev:onclick="scwin.btn_CalcPrem_OnClick_Async" class="btn_blue sum"
						outerDiv="true">
						<xf:label><![CDATA[보험료계산]]></xf:label>
					</w2:anchor>
				</xf:group>
			</xf:group>
			<w2:gridView ignoreCellClick="false" ev:onrowindexchange=""
				autoFit="allColumn" rowStatusWidth="20" visibleRowNum=""
				class="cm_grid" wheelRows="" ev:onviewchange=""
				fixedColumnWithHidden="" dataList="Ds_Trty" id="grd_sTrty"
				style="height:336px;" scrollByColumn="false" useShiftKey="true"
				rowStatusVisible="" ev:onafteredit="" rowStatusHeaderValue="상태"
				ev:oncellclick="scwin.lfn_Trty_OnCellClick" rowNumVisible="" rowNumWidth="10" ev:onheaderclick="scwin.lfn_trtyOnHeadClick" userData3="scwin.lfn_grd_sTrty_Pre_Bind@scwin.lfn_grd_sTrty_Last_Bind">
				<w2:header id="header1" style="">
					<w2:row id="row2" style="">
						<w2:column id="column1" blockSelect="false"
							style="height:20px;" width="30" inputType="text" value="선택"
							displayMode="label">
						</w2:column>
						<w2:column id="column2" blockSelect="false"
							style="height:20px;" width="70" inputType="text" value="구분"
							displayMode="label">
						</w2:column>
						<w2:column id="column3" blockSelect="false"
							style="height:20px;" width="190" inputType="text" value="특약"
							displayMode="label">
						</w2:column>
						<w2:column id="column4" blockSelect="false"
							style="height:20px;" width="110" inputType="text" value="보험기간"
							displayMode="label">
						</w2:column>
						<w2:column id="column5" blockSelect="false"
							style="height:20px;" width="100" inputType="text" value="납입기간"
							displayMode="label">
						</w2:column>
						<w2:column id="column6" blockSelect="false"
							style="height:20px;" width="105" inputType="text" value="가입금액"
							displayMode="label">
						</w2:column>
						<w2:column id="column7" blockSelect="false"
							style="height:20px;" width="105" inputType="text"
							value="보장보험료" displayMode="label">
						</w2:column>
						<w2:column blockSelect="false" id="column10"
							style="height:20px;" inputType="text" width="20"
							displayMode="label" value="예상보장영업보험료">
						</w2:column>
						<w2:column blockSelect="false" id="column8"
							style="height:20px;" inputType="text" width="39"
							displayMode="label" value="Expr 적용">
						</w2:column>
						<w2:column blockSelect="false" id="column15"
							style="height:20px;" inputType="text" width="20"
							displayMode="label">
						</w2:column>
						<w2:column blockSelect="false" id="column13"
							style="height:20px;" inputType="text" width="20"
							displayMode="label" hidden="">
						</w2:column>
						<w2:column blockSelect="false" id="column11"
							style="height:20px;" inputType="text" width="20"
							displayMode="label">
						</w2:column>
					</w2:row>
				</w2:header>
				<w2:gBody id="gBody4" style="">
					<w2:row id="row5" style="">
						<w2:column id="chk" blockSelect="false"
							width="30" inputType="checkbox" displayMode="label" selectedData="false">
						</w2:column>
						<w2:column id="BascSlctFlagCd_H"
							blockSelect="false" width="70" displayMode="label" readOnly="true">
						</w2:column>
						<w2:column id="TrtyHnglAbbName"
							blockSelect="false" width="190" displayMode="label" readOnly="true">
						</w2:column>
						<w2:column id="sInsurTermCd" blockSelect="false"
							width="110" displayMode="label" readOnly="true"
							inputType="select" allOption="" chooseOption=""
							selectedData="false" userData3="">
							<w2:choices>
								<w2:itemset
									nodeset="data:DsWs_TrtyTerm_Link">
									<w2:label ref="sInsurTermName"></w2:label>
									<w2:value ref="nInsurTermCd"></w2:value>
								</w2:itemset>
							</w2:choices>
						</w2:column>
						<w2:column id="sPaymTermCd" blockSelect="false"
							width="100" displayMode="label" inputType="select" readOnly="true"
							selectedData="false" allOption="" chooseOption="">
							<w2:choices>
								<w2:itemset
									nodeset="data:DsWs_TrtyTerm_1_Link">
									<w2:label ref="sPaymTermName"></w2:label>
									<w2:value ref="nPaymTermCd"></w2:value>
								</w2:itemset>
							</w2:choices>
						</w2:column>
						<w2:column id="nTrtyInsAmt" blockSelect="false"
							width="105" displayMode="label" inputType="select"
							selectedData="false" allOption="" chooseOption="">
							<w2:choices>
								<w2:itemset
									nodeset="data:Dsws_InsAmt_Link">
									<w2:label ref="sHnglCdName"></w2:label>
									<w2:value ref="sCd"></w2:value>
								</w2:itemset>
							</w2:choices>
						</w2:column>
						<w2:column id="nGrntPrem" blockSelect="false"
							width="105" displayMode="label" inputType="text" dataType="number" readOnly="true">
						</w2:column>
						<w2:column blockSelect="false"
							id="nExptGrntBussPrem" style="height:20px" inputType="text"
							width="20" displayMode="label" readOnly="true" dataType="number">
						</w2:column>
						<w2:column blockSelect="false" id="colExpr"
							style="height:20px;" inputType="expression" width="39"
							displayMode="label"
							expression="scwin.ExprDis(display('chk'), display('TrtyFlagCd'), display('sScrnIndcYn'), display('sTrtyCd'), rowIndex());">
						</w2:column>
						<w2:column blockSelect="false" id="TrtyFlagCd"
							style="height:20px;" inputType="text" width="10"
							displayMode="label">
						</w2:column>
						<w2:column blockSelect="false" id="sScrnIndcYn"
							style="height:20px;" inputType="text" width="20"
							displayMode="label">
						</w2:column>
						<w2:column blockSelect="false" id="sTrtyCd"
							style="height:20px;" inputType="text" width="70"
							displayMode="label">
						</w2:column>
					</w2:row>
				</w2:gBody>
			</w2:gridView>

		</xf:group>
		<!-- group:e -->
	</xf:group>

	<xf:group id="Div_04" style="" class="rightarea" >
		<!-- group:s -->
		<xf:group id="" style="" class="section">
			<xf:group id="" style="" class="defaultbox">
				<w2:textbox id="" style="" class="df_tt fl" label="보상내용 및 한도"></w2:textbox>
			</xf:group>
			<xf:group id="" style="height:194px" class="txtbox">
				<w2:textbox id="txtTrtyInfo" style="" class="txt" label=""></w2:textbox>
			</xf:group>
			
			<xf:group id="" style="" class="w2tb tb" tagname="table">
				<w2:attributes>
					<w2:summary></w2:summary>
				</w2:attributes>
				<xf:group tagname="colgroup">
					<xf:group style="width:75.00px;" tagname="col"></xf:group>
					<xf:group style="" tagname="col"></xf:group>
					<xf:group style="width:75.00px;" tagname="col"></xf:group>
					<xf:group style="" tagname="col"></xf:group>
				</xf:group>
				<xf:group style="" tagname="tr" id="1">
					<xf:group style="" class="w2tb_th" tagname="th">최소보험료</xf:group>
					<xf:group style="" class="w2tb_td" tagname="td">
						<xf:input id="medt_nMinPrem" style="text-align: right;" disabled="true" ref="data:Ds_LTIDA00.nMinPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
					<xf:group class="w2tb_th" tagname="th">최대보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<xf:input disabled="true" id="medt_nMaxPrem" style="text-align: right;" ref="data:Ds_LTIDA00.nMaxPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
				</xf:group>
				<xf:group tagname="tr" style="">
					<xf:group class="w2tb_th" tagname="th">보장보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<xf:input disabled="true" id="medt_nGrntPrem" style="text-align: right;" ref="data:Ds_LTIDA00.nGrntPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
					<xf:group class="w2tb_th" tagname="th">적립보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<xf:input disabled="true" id="medt_nAccuPrem" style="text-align: right;" ref="data:Ds_LTIDA00.nAccuPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
				</xf:group>
				<xf:group tagname="tr" style="">
					<xf:group class="w2tb_th" tagname="th">할인보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<xf:input disabled="true" id="medt_nDcPrem" style="text-align: right;" ref="data:Ds_LTIDA00.nDcPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
					<xf:group class="w2tb_th" tagname="th">적용보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<xf:input disabled="true" id="medt_nApplPrem" style="text-align: right;" ref="data:Ds_LTIDA00.nApplPrem" displayFormat="###,###,###,###" dataType="number"></xf:input>
					</xf:group>
				</xf:group>
				<xf:group tagname="tr" style="">
					<xf:group class="w2tb_th" tagname="th">영업보험료</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<w2:attributes>
							<w2:colspan>3</w2:colspan>
							<w2:rowspan>1</w2:rowspan>
						</w2:attributes>
						<xf:group class="input_btn icon" style="">
							<xf:input id="medt_nBussPrem" ref="data:Ds_LTIDA00.nBussPrem" style="text-align: right;" displayFormat="###,###,###,###" dataType="number" maxlength="12" editType="select" ev:onfocus="scwin.medt_nBussPrem_onfocus" ev:onblur="scwin.medt_nBussPrem_onblur"></xf:input>
							<w2:anchor class="" ev:onclick="scwin.lfn_calSave_onClick_Async" id="btn_Input_Save" outerDiv=""
								style="">
								<xf:label><![CDATA[저장]]></xf:label>
							</w2:anchor>
						</xf:group>
					</xf:group>
				</xf:group>
				<xf:group tagname="tr" style="">
					<xf:group class="w2tb_th" tagname="th">예상환급금</xf:group>
					<xf:group class="w2tb_td" tagname="td">
						<w2:attributes>
							<w2:colspan>3</w2:colspan>
							<w2:rowspan>1</w2:rowspan>
						</w2:attributes>
						<xf:input disabled="true" id="medit_nExptEndRetrnAmt" style="width:100px;text-align: right;" ref="data:Ds_LTIDA00.nExptEndRetrnAmt" displayFormat="###,###,###,###" dataType="number"></xf:input>
						<xf:input disabled="true" id="medt_nExptEndRtnrt" style="width:50px;text-align: right;" ref="data:Ds_LTIDA00.nExptEndRtnrt" displayFormat="###.##" dataType="number"></xf:input>
						<w2:textbox class="txt_bw" id="" label="%" tagname="span"
							style=""></w2:textbox>
					</xf:group>
				</xf:group>
			</xf:group>
		</xf:group>


		<!-- group:e -->
	</xf:group>

</xf:group>


<xf:group id="" style="" class="section">
	<xf:group id="Div_05" style="" class="defaultbox last" >
		<xf:group id="" style="" class="fl">
			<w2:anchor id="btn_Medical" ev:onclick="scwin.fn_Medical" class="btn_nml"
				outerDiv="true">
				<xf:label><![CDATA[사전조회]]></xf:label>
			</w2:anchor>
			<w2:anchor id="btn_Insu" ev:onclick="scwin.lfn_insuDetail" class="btn_nml"
				outerDiv="true">
				<xf:label><![CDATA[인수제한사유]]></xf:label>
			</w2:anchor>
			<w2:anchor id="btn_SummaryPrem" ev:onclick="scwin.fn_summary" class="btn_nml"
				outerDiv="true">
				<xf:label><![CDATA[보험료 요약]]></xf:label>
			</w2:anchor>
			<w2:anchor id="btn_PrintAgmt" ev:onclick="scwin.openPrint" class="btn_nml"
				outerDiv="true" disabled="true">
				<xf:label><![CDATA[가입설계서]]></xf:label>
			</w2:anchor>
			<w2:anchor id="btn_HwanGup" ev:onclick="scwin.lfn_hwangup" class="btn_nml"
				outerDiv="true">
				<xf:label><![CDATA[예상환급금]]></xf:label>
			</w2:anchor>
			<w2:anchor class="btn_nml" ev:onclick="scwin.fn_printInfo" id="btn_PrintInfo"
				outerDiv="true" style="" disabled="true">
				<xf:label><![CDATA[안내문발송]]></xf:label>
			</w2:anchor>
			<w2:anchor class="btn_nml" ev:onclick="scwin.lfn_Btn_carList_OnClick" id="Btn_carList" outerDiv="true"
				style="" disabled="true">
				<xf:label><![CDATA[자동차가입현황]]></xf:label>
			</w2:anchor>
			<w2:anchor class="btn_nml" ev:onclick="scwin.lfn_Moni" id="btn_Moni" outerDiv="true"
				style="">
				<xf:label><![CDATA[모니터링]]></xf:label>
			</w2:anchor>
		</xf:group>
		<xf:group id="" style="" class="fr">
			<w2:anchor id="btn_Copy" ev:onclick="scwin.btn_Copy_OnClick_Async" class="btn_nml1 bul"
				outerDiv="true">
				<xf:label><![CDATA[복사]]></xf:label>
			</w2:anchor>
			<w2:anchor id="Btn_goChung" ev:onclick="scwin.lfn_Btn_goChung_OnClick" class="btn_nml1 bul"
				outerDiv="true">
				<xf:label><![CDATA[청약]]></xf:label>
			</w2:anchor>
			<w2:anchor id="Btn_next" ev:onclick="scwin.lfn_next_Async" class="btn_nml1 bul"
				outerDiv="true">
				<xf:label><![CDATA[다음]]></xf:label>
			</w2:anchor>
		</xf:group>
	</xf:group>
</xf:group>


<xf:select1 allOption="" appearance="minimal"
	chooseOption="" direction="auto" disabled="true" disabledClass=""
	displayMode="label" ev:onviewchange="" id="cmb_codeHidden"
	optionOrder="" ref="" style="position: absolute;left:361px;top:186px;width: 100px;height:20px;display: none;" submenuSize="" renderType="native" selectedData="false">
	<xf:choices></xf:choices>
</xf:select1>

<xf:input id="cal_sSsrtDate"
 		style="position: absolute ;left:9px;top:64px;width:66px;height:20px;display: none;" ref="data:Ds_LTIDA00.sSsrtDate" readOnly="true" ev:onchange="scwin.cal_sSsrtDate_onchange">
</xf:input>

	</body>
</html>